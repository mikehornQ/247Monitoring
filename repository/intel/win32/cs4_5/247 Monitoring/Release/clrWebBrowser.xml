<?xml version="1.0"?>
<doc>
    <assembly>
        <name>clrWebBrowser</name>
    </assembly>
    <members>
        <member name="T:Facilita.Web.CachedResponse">
            <summary>
            Represents an HTTP response that has been cached by the <see cref="T:Facilita.Web.WebBrowser"/>.
            </summary>
            
            <remarks>
            A CachedResponse can be added to the cache prior to sending a request to the web server.
            The HTTP headers <c>"Expires"</c> and <c>"Last-Modified"</c> must be set using <see cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>.
            If a request is sent to a <see cref="T:Facilita.Web.Url"/> which is cached (and hasn't expired), then
            no request will be made to the web server, and a <see cref="T:Facilita.Web.Response"/> object will 
            be constructed from the stored CachedResponse object instead.
            <para>
            See <see cref="M:Facilita.Web.WebBrowser.AddResponseToCache(Facilita.Web.CachedResponse)"/> for more details.
            </para>
            </remarks>
            
            <seealso cref="M:Facilita.Web.WebBrowser.AddResponseToCache(Facilita.Web.CachedResponse)"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.CachedResponse.getCPtr(Facilita.Web.CachedResponse)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A HandleRef containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.CachedResponse.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.CachedResponse.#ctor(System.String)">
             <summary>
             Initialises a new instance of the CachedResponse class, using the specified <paramref name="url"/>.
             </summary>
            
             <param name="url">The URL to use.</param>
        </member>
        <member name="M:Facilita.Web.CachedResponse.#ctor(Facilita.Web.Url)">
             <summary>
             Initialises a new instance of the CachedResponse class, using the specified <see cref="T:Facilita.Web.Url"/>.
             </summary>
            
             <param name="url">The URL to use.</param>
        </member>
        <member name="M:Facilita.Web.CachedResponse.GetHeaders">
             <summary>
             Gets the HTTP response headers for this CachedResponse.
             </summary>
            
             <returns>The HTTP response headers for this CachedResponse.</returns>
             
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)">
             <summary>
             Sets an HTTP response header for this CachedResponse, as a name/value pair.
             </summary>
             
             <example>
             The following example demonstrates setting the <c>"Expires"</c> response header
             <code language="cs">
             CachedResponse cachedResponse = new CachedResponse("http://myDomain/weather/images/symbols/57x57/3.gif");
             // Set the Expires response header
             cachedResponse.SetHeader("Expires", "Fri, 22 Aug 2008 16:23:24 GMT");
             </code>
             </example>
            
             <param name="header">The header name.</param>
             <param name="value">The header value.</param>
             
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaders"/>
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.RemoveHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.SetHeader(System.String)">
             <summary>
             Sets an HTTP response header for this CachedResponse, using the contents of the specified string.
             </summary>
             
             <example>
             The following example demonstrates setting the <c>"Expires"</c> response header
             <code language="cs">
             CachedResponse cachedResponse = new CachedResponse("http://myDomain/weather/images/symbols/57x57/3.gif");
             // Set the Expires response header
             cachedResponse.SetHeader("Expires: Fri, 22 Aug 2008 16:23:24 GMT");
             </code>
             </example>
            
             <param name="header">The header name and value.</param>
             
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaders"/>
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.RemoveHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.RemoveHeader(System.String)">
             <summary>
             Removes a specified HTTP response header from this CachedResponse.
             </summary>
            
             <param name="header">The name of the header to remove.</param>
             
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaders"/>
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.ClearHeaders">
             <summary>
             Removes all the HTTP response headers from this CachedResponse.
             </summary>
            
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaders"/>
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.RemoveHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.UnsetReferer">
            <summary>
            Removes the <c>"Referer"</c> HTTP header.
            </summary>
        </member>
        <member name="M:Facilita.Web.CachedResponse.ContainsHeader(System.String)">
             <summary>
             Determines whether this CachedResponse contains the specified HTTP header.
             </summary>
             
             <example>
             The following example demonstrates checking the <c>"Expires"</c> header.
             <code language="cs">
             if (cachedResponse.ContainsHeader("Expires"))
             {
                 WriteMessage(string.Format("Expires={0}", cachedResponse.GetHeaderValue("Expires")));
             }
             </code>
             </example>
            
             <param name="header">The HTTP header to check for.</param>
             
             <returns><b>true</b> if the header was found; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Web.CachedResponse.GetHeaderValue(System.String)">
             <summary>
             Gets the value of the specified HTTP response header.
             </summary>
            
             <param name="header">The header to get the value of.</param>
             
             <returns>The value of the header.</returns>
             
             <seealso cref="M:Facilita.Web.CachedResponse.GetHeaders"/>
             <seealso cref="M:Facilita.Web.CachedResponse.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.CachedResponse.RemoveHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.CachedResponse.GetHeaderKeys">
             <summary>
             Gets a list of names of all the HTTP response headers set in this CachedResponse.
             </summary>
            
             <returns>A list of names of all the HTTP response headers set in this CachedResponse.</returns>
        </member>
        <member name="P:Facilita.Web.CachedResponse.Url">
             <summary>
             Gets the <see cref="T:Facilita.Web.Url"/> that this CachedResponse represents a response to.
             </summary>
            
             <value>The <see cref="T:Facilita.Web.Url"/> that this CachedResponse represents a response to.</value>
        </member>
        <member name="P:Facilita.Web.CachedResponse.HasReferer">
             <summary>
             Gets a value that indicates whether the <c>"Referer"</c> HTTP header has been set for this CachedResponse.
             </summary>
            
             <value><b>true</b> if the <c>"Referer"</c> header has been set; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.CachedResponse.UserAgent">
             <summary>
             Gets or sets the value of the <c>"User-Agent"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"User-Agent"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.CachedResponse.Referer">
             <summary>
             Gets or sets the value of the <c>"Referer"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"Referer"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.CachedResponse.ContentType">
             <summary>
             Gets or sets the value of the <c>"Content-Type"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"Content-Type"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.CachedResponse.CharEncoding">
            <summary>
            Gets or sets the character encoding that is used to decode the data contained
            in this <c>CachedResponse</c>, for example <c>"UTF-8"</c>.
            </summary>
            
            <value>The value of the character encoding.</value>
        </member>
        <member name="T:Facilita.Web.Coder">
            <summary>
            Provides static methods for encoding and decoding string data. For more information about percent-encoding, 
            refer to <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>.
            </summary>
        </member>
        <member name="M:Facilita.Web.Coder.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Coder.UrlDecode(System.String)">
            <summary>
            Decodes a <i>percent-encoded</i> string. 
            </summary>
            
            <remarks>
            Converts percent-encoded characters such as <c>%3F</c> into the character they represent, 
            in this case the question mark character <c>?</c>. 
            <para>
            For more information about percent-encoding, refer to 
            <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>. 
            </para>
            </remarks>
            
            <example>
            The following example demonstrates decoding a percent-encoded string.
            <code language="cs">
            string decoded = Coder.UrlDecode("search%3Fq%3Dcamera");
            // decoded == search?q=camera
            </code>
            </example>
            
            <param name="urlFragment">The text to decode; this is usually a portion of a <see cref="T:Facilita.Web.Url"/>.</param>
            
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Facilita.Web.Coder.UrlEncode(System.String,System.String,System.Boolean)">
            <summary>
            Encodes a string using <i>percent-encoding</i>, specifying which characters should be encoded (optionally including reserved characters).
            </summary>
            
            <remarks>
            A character in the string will be percent-encoded if:
            <ul>
            <li>It is outside the <i>printable</i> ASCII range (i.e. is not in the ASCII range 32 to 127) <b>OR</b></li>
            <li>It is one of the defined <paramref name="unsafeCharacters"/> <b>OR</b></li>
            <li>It is a <i>reserved character</i>, and <paramref name="encodeReservedCharacters"/> has the value <b>true</b></li>
            </ul>
            <para>
            For more information about percent-encoding, refer to
            <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates encoding a string.
            <code language="cs">
            string encoded = Coder.UrlEncode("search?q=camera", "&lt;&gt;\"%{}|\\^[]` \n\t\r&amp;", true);
            // encoded == search%3Fq%3Dcamera
            </code>
            </example>
            
            <param name="urlFragment">The text to percent-encode.</param>
            <param name="unsafeCharacters">A string containing a list of characters that need to be percent-encoded.</param>
            <param name="encodeReservedCharacters"><b>true</b> if reserved characters should be encoded.</param>
            
            <returns>The encoded text.</returns>
            
            <seealso cref="P:Facilita.Web.Coder.DefaultUnsafeCharacters"/>
        </member>
        <member name="M:Facilita.Web.Coder.UrlEncode(System.String,System.String)">
            <summary>
            Encodes a string using <i>percent-encoding</i>, specifying which characters should be encoded.
            </summary>
            
            <remarks>
            A character in the string will be percent-encoded if:
            <ul>
            <li>It is outside the <i>printable</i> ASCII range (i.e. is not in the ASCII range 32 to 127) <b>OR</b></li>
            <li>It is one of the defined <paramref name="unsafeCharacters"/></li>
            </ul>
            <para>
            For more information about percent-encoding, refer to
            <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates encoding a string.
            <code language="cs">
            string encoded = Coder.UrlEncode("search?q=camera", "&lt;&gt;\"%{}|\\^[]` \n\t\r&amp;");
            // encoded == search%3Fq%3Dcamera
            </code>
            </example>
            
            <param name="urlFragment">The text to percent-encode.</param>
            <param name="unsafeCharacters">A string containing a list of characters that need to be percent-encoded.</param>
            
            <returns>The encoded text.</returns>
            
            <seealso cref="P:Facilita.Web.Coder.DefaultUnsafeCharacters"/>
        </member>
        <member name="M:Facilita.Web.Coder.UrlEncode(System.String)">
            <summary>
            Encodes a string using <i>percent-encoding</i>.
            </summary>
            
            <remarks>
            A character in the string will be percent-encoded if:
            <ul>
            <li>It is outside the <i>printable</i> ASCII range (i.e. is not in the ASCII range 32 to 127) <b>OR</b></li>
            <li>It is one of the <see cref="P:Facilita.Web.Coder.DefaultUnsafeCharacters"/></li>
            </ul>
            <para>
            For more information about percent-encoding, refer to
            <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates encoding a string.
            <code language="cs">
            string encoded = Coder.UrlEncode("search?q=camera");
            // encoded == search%3Fq%3Dcamera
            </code>
            </example>
            
            <param name="urlFragment">The text to percent-encode.</param>
            
            <returns>The encoded text.</returns>
            
            <seealso cref="P:Facilita.Web.Coder.DefaultUnsafeCharacters"/>
        </member>
        <member name="M:Facilita.Web.Coder.PostDataEncode(System.String,System.String)">
            <summary>
            Encodes a string so that it can be sent to a web server as POST data, specifying the characters which shouldn't be encoded.
            </summary>
            
            <remarks>
            This is done using percent-encoding, in a similar way to <see cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>, with the exception
            that space characters will be converted to <c>+</c>, not <c>%20</c>
            </remarks>
            
            <param name="data">The text to encode.</param>
            <param name="charactersAllowedInPostedForm">A string containing characters that can be present in POST data without being percent-encoded (see <see cref="P:Facilita.Web.Coder.DefaultCharactersAllowedInPostedForm"/>).</param>
            
            <returns>The encoded text.</returns>
        </member>
        <member name="M:Facilita.Web.Coder.PostDataEncode(System.String)">
            <summary>
            Encodes a string so that it can be sent to a web server as POST data.
            </summary>
            
            <remarks>
            This is done using percent-encoding, in a similar way to <see cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>, with the exception
            that space characters will be converted to <c>+</c>, not <c>%20</c>
            </remarks>
            
            <param name="data">The text to encode.</param>
            
            <returns>The encoded text.</returns>
        </member>
        <member name="M:Facilita.Web.Coder.DecodeHTML(System.String)">
            <summary>
            Decodes special characters within the specified HTML string.
            For example, <c>&amp;amp;</c> will be converted to <c>&amp;</c>.
            </summary>
            
            <param name="data">The text to decode.</param>
            
            <returns>The decoded text.</returns>
        </member>
        <member name="P:Facilita.Web.Coder.DefaultCharactersAllowedInPostedForm">
             <summary>
             Gets a string containing all the characters that, by default, are allowed to be posted in a <see cref="T:Facilita.Web.Form"/>.
             </summary>
             
             <remarks>
             By default, a character will be percent-encoded within a form if it is:
             <ul>
             <li>Outside the ASCII range <b>OR</b></li>
             <li>Not an alpha-numeric character <b>AND</b> not in this list of allowed characters</li>
             </ul>
             <para>
             By default, the allowed list of characters is as follows:
             </para>
             <list type="table">
             <listheader><term>Character</term><description>Name</description></listheader>
             <item><term><c>' '</c></term><description>space</description></item>
             <item><term><c>'-'</c></term><description>hyphen</description></item>
             <item><term><c>'_'</c></term><description>underscore</description></item>
             <item><term><c>'.'</c></term><description>full stop</description></item>
             <item><term><c>'*'</c></term><description>asterisk</description></item>
             </list>
             </remarks>
            
             <value>A string containing all the characters that, by default, are allowed to be posted in a <see cref="T:Facilita.Web.Form"/>.</value>
             
             <seealso cref="M:Facilita.Web.Coder.PostDataEncode(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Coder.DefaultUnsafeCharacters">
            <summary>
            Gets a string containing all the characters that, by default, are considered <i>unsafe</i> and must be <i>percent-encoded</i>.
            </summary>
            
            <remarks>
            A character in a string will be percent-encoded if it is:
            <ul>
            <li>Outside the <i>printable</i> ASCII range (i.e. is not in the ASCII range 32 to 127) <b>OR</b></li>
            <li>One of these <i>unsafe</i> characters</li>
            </ul>
            <para>
            By default, the list of <i>unsafe</i> characters is as follows:
            </para>
            <list type="table">
            <listheader><term>Character</term><description>Name</description></listheader>
            <item><term><c>'&lt;'</c></term><description>less-than sign</description></item>
            <item><term><c>'&gt;'</c></term><description>greater-than sign</description></item>
            <item><term><c>'"'</c></term><description>quotation mark</description></item>
            <item><term><c>'%'</c></term><description>percent sign</description></item>
            <item><term><c>'{'</c></term><description>left curly bracket</description></item>
            <item><term><c>'}'</c></term><description>right curly bracket</description></item>
            <item><term><c>'|'</c></term><description>vertical line</description></item>
            <item><term><c>'\'</c></term><description>reverse solidus</description></item>
            <item><term><c>'^'</c></term><description>circumflex accent</description></item>
            <item><term><c>'['</c></term><description>left square bracket</description></item>
            <item><term><c>']'</c></term><description>right square bracket</description></item>
            <item><term><c>'`'</c></term><description>grave accent</description></item>
            <item><term><c>' '</c></term><description>space</description></item>
            <item><term><c>'\r'</c></term><description>carriage return</description></item>
            <item><term><c>'\n'</c></term><description>line feed</description></item>
            <item><term><c>'\t'</c></term><description>tab</description></item>
            <item><term><c>'&amp;'</c></term><description>ampersand</description></item>
            </list>
            <para>
            For more information about percent-encoding, refer to
            <a href="http://tools.ietf.org/html/rfc3986#section-2.1">RFC 3986</a>.
            </para>
            </remarks>
            
            <value>A string containing all the characters that, by default, are considered <i>unsafe</i> and must be <i>percent-encoded</i>.</value>
            
            <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
        </member>
        <member name="T:Facilita.Web.ConcurrentRequestSender">
            <summary>
            Provides methods for sending multiple <see cref="T:Facilita.Web.Request"/> objects to the web server
            concurrently.
            </summary>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.getCPtr(Facilita.Web.ConcurrentRequestSender)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A HandleRef containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:Facilita.Web.ConcurrentRequestSender"/>, specifying the maximum number of concurrent requests to send to the web server.
            </summary>
            <remarks>
            If <paramref name="maxConcurrency"/> is less than or equal to zero, then all the requests will be sent concurrently.
            </remarks>
            <param name="maxConcurrency">the maximum concurrency to allow.</param>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.#ctor">
            <summary>
            Create a new <see cref="T:Facilita.Web.ConcurrentRequestSender"/>.
            </summary>
            <remarks>
            All the requests will be sent concurrently (equivalent to <c>ConcurrentRequestSender(0)</c>).
            </remarks>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.AddRequest(Facilita.Web.Request)">
            <summary>
            Add a <see cref="T:Facilita.Web.Request"/> to the list of requests that will be sent to the web server by a call to <see cref="M:Facilita.Web.ConcurrentRequestSender.SendRequests"/>.
            </summary>
            <param name="request">the <see cref="T:Facilita.Web.Request"/> to add.</param>
            <seealso cref="M:Facilita.Web.ConcurrentRequestSender.SendRequests"/>
        </member>
        <member name="M:Facilita.Web.ConcurrentRequestSender.SendRequests">
            <summary>
            Sends a list of <see cref="T:Facilita.Web.Request"/> objects to the web server in parallel.
            A list containing the <see cref="T:Facilita.Web.Response"/> objects will be returned, in the order in which they were received.
            </summary>
            
            <example>
            The following example demonstrates sending 4 requests concurrently.
            <code language="cs">
            // Send 4 requests concurrently
            ConcurrentRequestSender requestSender = new ConcurrentRequestSender();
            requestSender.AddRequest(WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://localhost:32144/Themes/TestPlant/Content/images/orange_button_bg.gif")));
            requestSender.AddRequest(WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://localhost:32144/Themes/TestPlant/Content/images/bg_maincolumn_3.gif")));
            requestSender.AddRequest(WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://localhost:32144/Themes/TestPlant/Content/images/logo-reflection.gif")));
            requestSender.AddRequest(WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://localhost:32144/Themes/TestPlant/Content/images/ico-register.gif")));
            List&lt;Response&gt; responses = requestSender.SendRequests();
            </code>
            </example>
            
            <returns>A list of <see cref="T:Facilita.Web.Response"/> objects, where each response corresponds to a <see cref="T:Facilita.Web.Request"/> that was sent.</returns>
        </member>
        <member name="T:Facilita.Web.ConnectionType">
            <summary>
            Represents an HTTP or HTTPS connection handler.
            </summary>
        </member>
        <member name="F:Facilita.Web.ConnectionType.UNSPECIFIED">
            <summary>
            Unspecified connection type 
            </summary>
        </member>
        <member name="F:Facilita.Web.ConnectionType.SOCK">
            <summary>
            The internal connection type.
            This is eggPlant Performance's own connection handler
            </summary>
        </member>
        <member name="F:Facilita.Web.ConnectionType.WIN_HTTP">
            <summary>
            The Microsoft WinHTTP connection handler
            </summary>
        </member>
        <member name="F:Facilita.Web.ConnectionType.WIN_INET">
            <summary>
            The Microsoft WinINet connection handler
            </summary>
        </member>
        <member name="T:Facilita.Web.FileElement">
             <summary>
             Represents an <see cref="T:Facilita.Web.InputElement"/> which is a file select control.
             </summary>
             
             <remarks>
             A file select control allows the user to select one or more files to upload.
             <para>
             e.g. <c><![CDATA[<input name="uploadedfile" type="file" />]]></c>
             </para>
             <para>
             If files are added to a FileElement object, they will be uploaded
             when the containing <see cref="T:Facilita.Web.Form"/> is sent to the web server.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
        </member>
        <member name="T:Facilita.Web.InputElement">
             <summary>
             Represents an HTML input element within an HTML form.
             </summary>
             
             <remarks>
             An HTML element is everything from the start tag to the end tag.
             <para>
             e.g. <c><![CDATA[<input type="text" name="firstname">]]></c> would be represented by a single InputElement object.
             </para>
             <para>
             An InputElement is submitted as a key/value pair
             when the containing <see cref="T:Facilita.Web.Form"/> is sent to the web server.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
        </member>
        <member name="T:Facilita.Web.HtmlElement">
            <summary>
            Represents an HTML element within an HTML form.
            </summary>
            
            <remarks>
            An HTML element is everything from the start tag to the end tag.
            <para>
            e.g. <c><![CDATA[<input type="text" name="firstname">]]></c> would be represented by a single <see cref="T:Facilita.Web.InputElement"/> object,
            where InputElement is a subclass of HtmlElement.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Web.HtmlElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.HtmlElement.getCPtr(Facilita.Web.HtmlElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.HtmlElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.HtmlElement.GetAttribute(System.String)">
            <summary>
            Gets the value of the specified attribute, 
            or an empty string if the attribute is not contained within this HTML element.
            </summary>
            
            <example>
            The following example demonstrates getting the value of the "name" attribute for the HTML element.
            <code language="cs">
            // Get the value of the "name" attribute for the HTML element
            string name = element.GetAttribute("name");
            </code>
            </example>
            
            <param name="name">The name of the attribute from which the value should be returned.</param>
            
            <returns>The value of the attribute, or an empty string if no attribute with the specified <paramref name="name"/> could be found.</returns>
            
            <seealso cref="M:Facilita.Web.HtmlElement.SetAttribute(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.HtmlElement.SetAttribute(System.String)">
             <summary>
             Sets the value of the specified attribute to an empty string.
             </summary>
            
             <param name="name">The name of the attribute on which to set the value.</param>
             
             <seealso cref="M:Facilita.Web.HtmlElement.SetAttribute(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.HtmlElement.SetAttribute(System.String,System.String)">
             <summary>
             Sets the value of the specified attribute. The attribute will be added if it does not already exist.
             </summary>
            
             <param name="name">The name of the attribute on which to set the value.</param>
             <param name="value">The new value of the attribute.</param>
             
             <seealso cref="M:Facilita.Web.HtmlElement.GetAttribute(System.String)"/>
        </member>
        <member name="M:Facilita.Web.HtmlElement.HasAttribute(System.String)">
             <summary>
             Determines whether this HTML element contains the specified attribute.
             </summary>
             
             <example>
             The following example demonstrates checking to see if an element contains the <c>"checked"</c> attribute.
             <code language="cs">
             if (element.HasAttribute("checked"))
             {
                 // The element has the "checked" attribute
             }
             </code>
             </example>
            
             <param name="name">The name of the attribute to look for.</param>
             
             <returns><b>true</b> if this HtmlElement contains this attribute; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Web.HtmlElement.RemoveAttribute(System.String)">
             <summary>
             Removes an attribute from this HTML element. This method has no effect if the attribute does not exist.
             </summary>
            
             <param name="name">The name of the attribute to remove.</param>
             
             <seealso cref="M:Facilita.Web.HtmlElement.SetAttribute(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.HtmlElement.GetAttribute(System.String)"/>
        </member>
        <member name="M:Facilita.Web.HtmlElement.Clone">
             <summary>
             Initialises a new instance of the HtmlElement class, which is a copy of the specified HtmlElement.
             </summary>
            
             <returns>A new HtmlElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Name">
             <summary>
             Gets or sets the value of the <c>"name"</c> attribute for this HTML element.
             </summary>
             
             <remarks>
             This property is equivalent to calling <c>GetAttribute("name")</c>.
             </remarks>
            
             <value>The value of the <c>"name"</c> attribute.</value>
             
             <seealso cref="M:Facilita.Web.HtmlElement.GetAttribute(System.String)"/>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Value">
             <summary>
             Gets or sets the value of the <c>"value"</c> attribute for this HTML element.
             </summary>
             
             <remarks>
             Calling this method is equivalent to calling <c>GetAttribute("value")</c>.
             </remarks>
            
             <value>The value of the <c>"value"</c> attribute.</value>
             
             <seealso cref="M:Facilita.Web.HtmlElement.GetAttribute(System.String)"/>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Id">
             <summary>
             Gets or sets the value of the <c>"id"</c> attribute for this HTML element.
             </summary>
             
             <remarks>
             Calling this method is equivalent to calling <c>GetAttribute("id")</c>.
             </remarks>
            
             <value>The value of the <c>"id"</c> attribute.</value>
             
             <seealso cref="M:Facilita.Web.HtmlElement.GetAttribute(System.String)"/>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Content">
             <summary>
             Gets or sets the content of this HTML element. This includes everything between the HTML tags, but
             excludes the tags themselves and any attributes.
             </summary>
            
             <value>The content of the HTML element.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Tag">
             <summary>
             Gets the tag name of this HTML element.
             </summary>
             
             <remarks>
             e.g. the HTML element <c><![CDATA[<input type="text" name="firstname">]]></c> has a tag name of <c>"input"</c>.
             </remarks>
            
             <value>The tag name of this HTML element.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Attributes">
             <summary>
             Gets all the attributes contained in this HtmlElement as an IDictionary
             of attribute names to values.
             </summary>
            
             <value>All the attributes contained in this HtmlElement as an IDictionary
             of attribute names to values.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.Disabled">
             <summary>
             Gets or sets a value that indicates whether this HTML element has been disabled.
             </summary>
             
             <remarks>
             An element is disabled if it has a <c>"disabled"</c> attribute, i.e. if <c>HasAttribute("disabled")</c> returns <b>true</b>.
             <para>
             <c>Disabled = true</c> is equivalent to <c>SetAttribute("disabled")</c>.
             </para>
             <para>
             <c>Disabled = false</c> is equivalent to <c>RemoveAttribute("disabled")</c>.
             </para>
             </remarks>
            
             <value><b>true</b> if this element has the <c>"disabled"</c> attribute; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.AfterStartTagPosition">
            <summary>
            Gets the character offset into the HTML document at which the 1<sup>st</sup> character 
            (not including &lt; &gt; tag characters) in this HTML element appears.
            </summary>
            
            <example>
            The following example demonstrates getting the AfterStartTagPosition of a SelectElement.
            <para>
            The content of the HTTP <see cref="T:Facilita.Web.Response"/> object:
            </para>
            <code language="none">
            <![CDATA[<html><body><form name="myForm">Select: ]]><b><![CDATA[<select]]><u> </u><![CDATA[name="mySelect">]]></b><![CDATA[<option value="1">1</option><option value="2">2</option>]]><b><![CDATA[</select>]]></b><![CDATA[</form></body></html>]]>
            </code>
            <code language="cs">
            Form form = response.ExtractForm("myForm");
            SelectElement select = form.GetSelectElement("mySelect");
            
            // This outputs 47, i.e. the offset of the space after the opening '&lt;select'
            WriteMessage("AfterStartTagPosition : " + select.AfterStartTagPosition);
            </code>
            </example>
            
            <value>The character offset into the HTML document at which the 1<sup>st</sup> character in this HTML element appears.</value>
            
            <seealso cref="P:Facilita.Web.HtmlElement.AfterEndTagPosition"/>
        </member>
        <member name="P:Facilita.Web.HtmlElement.AfterEndTagPosition">
             <summary>
             Gets the character offset into the HTML document at which the last character 
             (not including &lt; &gt; tag characters) in this HTML element appears.
             </summary>
             
             <example>
             The following example demonstrates getting the AfterEndTagPosition of a SelectElement.
             <para>
             The content of the HTTP <see cref="T:Facilita.Web.Response"/> object:
             </para>
             <code language="none">
             <![CDATA[<html><body><form name="myForm">Select: ]]><b><![CDATA[<select name="mySelect">]]></b><![CDATA[<option value="1">1</option><option value="2">2</option>]]><b><![CDATA[</select>]]></b><u>&lt;</u><![CDATA[/form></body></html>]]>
             </code>
             <code language="cs">
             Form form = response.ExtractForm("myForm");
             SelectElement select = form.GetSelectElement("mySelect");
             
             // This outputs 129, i.e. the offset of the '&lt;' after the closing '&lt;/select&gt;'
             WriteMessage("AfterEndTagPosition : " + select.AfterEndTagPosition);
             </code>
             </example>
            
             <value>The character offset into the HTML document at which the last character in this HTML element appears.</value>
             
             <seealso cref="P:Facilita.Web.HtmlElement.AfterStartTagPosition"/>
        </member>
        <member name="P:Facilita.Web.HtmlElement.ContentPosition">
             <summary>
             Gets the character offset into the HTML document at which this HTML element's content starts.
             </summary>
            
             <value>The character offset into the HTML document at which this HTML element's content starts.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this HTML element currently represents a successful control.
             A successful control is one that is <i>valid for submission</i>, i.e. one that will be sent to the 
             web server when the form is submitted.
             </summary>
            
             <value><b>true</b> if this HTML element is a successful control; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HtmlElement.CharEncoding">
            <summary>
            Gets or sets the character encoding that is used to decode the data contained
            in this <c>HtmlElement</c>, for example <c>"UTF-8"</c>.
            </summary>
            
            <value>The value of the the character encoding.</value>
        </member>
        <member name="M:Facilita.Web.InputElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.InputElement.getCPtr(Facilita.Web.InputElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.InputElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.InputElement.#ctor(System.String,System.String,System.Text.Encoding)">
             <summary>
             Initialises a new instance of the InputElement class, with the specified <paramref name="name"/> and <paramref name="value"/>
             attributes, and encoded with the specified character <paramref name="encoding"/>.
             </summary>
            
             <param name="name">The value to assign to the <c>"name"</c> attribute.</param>
             <param name="value">The value to assign to the <c>"value"</c> attribute.</param>
             <param name="encoding">The character encoding to use when encoding the name/value.</param>
        </member>
        <member name="M:Facilita.Web.InputElement.#ctor(System.String,System.String,System.String)">
             <summary>
             Initialises a new instance of the InputElement class, with the specified <paramref name="name"/> and <paramref name="value"/>
             attributes, and encoded with the specified character <paramref name="encoding"/>.
             </summary>
            
             <param name="name">The value to assign to the <c>"name"</c> attribute.</param>
             <param name="value">The value to assign to the <c>"value"</c> attribute.</param>
             <param name="encoding">The character encoding to use when encoding the name/value.</param>
        </member>
        <member name="M:Facilita.Web.InputElement.#ctor(System.String,System.String)">
             <summary>
             Initialises a new instance of the InputElement class, with the specified <paramref name="name"/> and <paramref name="value"/> attributes.
             </summary>
            
             <param name="name">The value to assign to the <c>"name"</c> attribute.</param>
             <param name="value">The value to assign to the <c>"value"</c> attribute.</param>
        </member>
        <member name="M:Facilita.Web.InputElement.Clone">
             <summary>
             Initialises a new instance of the InputElement class, which is a copy of the specified InputElement.
             </summary>
            
             <returns>A new InputElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="M:Facilita.Web.InputElement.MakeFrom(Facilita.Web.HtmlElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="htmlElement">An HtmlElement.</param>
             
             <returns>A new InputElement.</returns>
        </member>
        <member name="P:Facilita.Web.InputElement.Type">
             <summary>
             Gets the type of this InputElement.
             </summary>
             
             <remarks>
             This property is similar to <c>GetAttribute("type")</c>,
             but returns the type as an enum value.
             </remarks>
            
             <value>The type of this InputElement.</value>
        </member>
        <member name="P:Facilita.Web.InputElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this InputElement represents a successful control.
             </summary>
             
             <remarks>
             A successful control is <i>valid for submission</i>. Every successful control has 
             its control name and current value submitted when the form is sent to the web server.
             </remarks>
            
             <value><b>true</b> if this InputElement represents a successful control; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.InputElement.Submitted">
             <summary>
             Gets or sets a value that indicates whether this InputElement has been <i>submitted</i>.
             For example, a button is <i>submitted</i> when it is pressed.
             </summary>
            
             <value><b>true</b> if this InputElement was submitted; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.InputElement.Checked">
             <summary>
             Gets or sets a value that indicates whether the <c>"checked"</c> attribute has been set for this InputElement.
             This method is equivalent to <c>HasAttribute("checked")</c>.
             </summary>
            
             <value><b>true</b> if the <c>"checked"</c> attribute exists in this InputElement; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.InputElement.InputElementType">
            <summary>
            Enumerates the different types of <see cref="T:Facilita.Web.InputElement"/> that are available.
            </summary>
            
            <remarks>
            The type of an InputElement is determined by the <c>"type"</c> attribute
            of the HTML tag, e.g. <c><![CDATA[<input type="text" name="firstname">]]></c>.
            The type determines the appearance and behaviour of the InputElement
            when the HTML is viewed in a browser.
            </remarks>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.other">
            <summary>
            Represents an input type not described by the other values.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.button">
            <summary>
            Represents a clickable button.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.checkbox">
            <summary>
            Represents a box that can be either checked or unchecked.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.file">
            <summary>
            Represents a file selector, usually displayed as a <b>Choose File</b> button which opens a standard file dialog when clicked.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.hidden">
            <summary>
            Represents an InputElement which has a value, but doesn't appear on the page.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.image">
            <summary>
            Represents a submit button but displayed as a specified image instead of the standard button graphic.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.password">
            <summary>
            Represents a text box in which typed characters are masked with dots.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.radio">
            <summary>
            Represents one of a collection of radio buttons, only one of which can be selected at once
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.reset">
            <summary>
            Represents a button which resets all form values to their defaults when clicked.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.submit">
            <summary>
            Represents a button which performs the form's action (usually submitting the form data as a GET or POST request) when clicked.
            </summary>
        </member>
        <member name="F:Facilita.Web.InputElement.InputElementType.text">
            <summary>
            Represents a text box.
            </summary>
        </member>
        <member name="M:Facilita.Web.FileElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.FileElement.getCPtr(Facilita.Web.FileElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A HandleRef containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.FileElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.FileElement.AddFile(System.String,System.String,System.String,System.String)">
             <summary>
             Adds a file to the list of files to upload. It will be uploaded when the <see cref="T:Facilita.Web.Form"/> which contains this FileElement is sent to the web server.
             </summary>
            
             <param name="filename">The name of the file.</param>
             <param name="path">The location of the file on disk. This can either be an absolute path, or a relative path. If it is a relative path, then it is relative to the <c>data/Files</c> directory for the current injector.</param>
             <param name="contentType">The Content-Type to specify when sending this file (e.g. <c>"text/plain"</c>, <c>"image/gif"</c>).</param>
             <param name="contentTransferEncoding">The Content-Transfer-Encoding to specify when sending this file (e.g. <c>"binary"</c>).</param>
        </member>
        <member name="M:Facilita.Web.FileElement.AddFile(System.String,System.String,System.String)">
             <summary>
             Adds a file to the list of files to upload. It will be uploaded when the <see cref="T:Facilita.Web.Form"/> which contains this FileElement is sent to the web server.
             </summary>
            
             <remarks>
             The default Content-Transfer-Encoding is <c>""</c>.
             </remarks>
            
             <param name="filename">The name of the file.</param>
             <param name="path">The location of the file on disk. This can either be an absolute path, or a relative path. If it is a relative path, then it is relative to the <c>data/Files</c> directory for the current injector.</param>
             <param name="contentType">The Content-Type to specify when sending this file (e.g. <c>"text/plain"</c>, <c>"image/gif"</c>).</param>
        </member>
        <member name="M:Facilita.Web.FileElement.AddFile(System.String,System.String)">
             <summary>
             Adds a file to the list of files to upload. It will be uploaded when the <see cref="T:Facilita.Web.Form"/> which contains this FileElement is sent to the web server.
             </summary>
             
             <remarks>
             The default Content-Type is <c>"text/plain"</c>, and the default Content-Transfer-Encoding is <c>""</c>.
             </remarks>
            
             <param name="filename">The name of the file.</param>
             <param name="path">The location of the file on disk. This can either be an absolute path, or a relative path. If it is a relative path, then it is relative to the <c>data/Files</c> directory for the current injector.</param>
        </member>
        <member name="M:Facilita.Web.FileElement.RemoveFile(System.String)">
             <summary>
             Removes a file from the list of files to be uploaded.
             </summary>
            
             <param name="filename">The name of the file to remove from the list.</param>
        </member>
        <member name="M:Facilita.Web.FileElement.#ctor(System.String)">
             <summary>
             Initialises a new instance of the FileElement class, using the specified <paramref name="elementName"/>.
             </summary>
            
             <param name="elementName">The name attribute of the FileElement.</param>
        </member>
        <member name="M:Facilita.Web.FileElement.ClearFiles">
            <summary>
            Clears the list of files to be uploaded.
            </summary>
        </member>
        <member name="M:Facilita.Web.FileElement.Clone">
             <summary>
             Initialises a new instance of the FileElement class, which is a copy of the specified FileElement.
             </summary>
            
             <returns>A new FileElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.FileElement.MultipartBoundary">
             <summary>
             Gets or sets the string that will be used as the boundary between files (including the <c>--</c> prefix), when encoding this element as multipart/form-data.
             </summary>
             
             <example>
             The following example demonstrates setting the multipart file boundary.
             <code language="cs">
             
             // Populate form with data
             Form form = previousResponse.ExtractForm("myForm");
             form.GetInputElement("input1").Value = "value1";
             form.GetFileElement("files-to-upload[]").AddFile("image.bmp", @"C:\dataFiles\image.bmp", "image/bmp");
             form.GetFileElement("files-to-upload[]").AddFile("image2.bmp", @"C:\dataFiles\image2.bmp", "image/bmp");
             
             // Set the multipart boundary for the FileElement
             form.GetFileElement("files-to-upload[]").MultipartBoundary = "--multipart-file-boundary";
             
             // Send the POST request
             Request request = WebBrowser.CreateRequest(HttpMethod.POST, myUrl);
             request.SetMessageBody(form);
             Response response = request.Send();
             </code>
             </example>
             
             <example>
             The following example demonstrates the contents of the POST request sent in the previous example.
             <code language="none">
             --multipart-form-boundary
             Content-Disposition: form-data; name="input1"
             
             value1
             --multipart-form-boundary
             Content-Disposition: form-data; name="files-to-upload[]"
             Content-Type: multipart/mixed; boundary=<b>multipart-file-boundary</b><br /><br />
             
             <b>--multipart-file-boundary</b>
             Content-Disposition: file; filename="image.bmp"
             Content-Type: image/bmp
             
             <i>(binary image data)</i><br />
             <b>--multipart-file-boundary</b>
             Content-Disposition: file; filename="image2.bmp"
             Content-Type: image/bmp
             
             <i>(binary image data)</i><br />
             <b>--multipart-file-boundary--</b>
             --multipart-form-boundary--
             </code>
             </example>
             
             <example>
             The following example demonstrates getting the multipart file boundary.
             <code language="cs">
             form.GetFileElement("files-to-upload[]").MultipartBoundary;
             // This will return "--multipart-file-boundary"
             </code>
             </example>
            
             <value>The string that will be used as the boundary between files (including the <c>--</c> prefix), when encoding this element as multipart/form-data.</value>
        </member>
        <member name="T:Facilita.Web.Form">
            <summary>
            Represents an HTML form.
            </summary>
            
            <remarks>
            Each element in the form is represented by an <see cref="T:Facilita.Web.HtmlElement"/> object. The elements in the form are accessed
            by using the various "get" methods (e.g. <see cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>, <see cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>).
            The HtmlElement objects can be modified to change the data that will be sent back to the server.
            More elements can be added to the form using <see cref="M:Facilita.Web.Form.AddElement(Facilita.Web.HtmlElement)"/>, and removed using <see cref="M:Facilita.Web.Form.RemoveElement(System.String,System.String)"/>.
            </remarks>
            
            <example>
            The following example demonstrates the usual practice of obtaining a Form object by extracting it from a <see cref="T:Facilita.Web.Response"/>, using the <see cref="M:Facilita.Web.Response.ExtractForm(System.Int32)"/> method.
            <para>
            The form is then usually modified by changing the HtmlElement objects it contains,
            and sent back to the server on a later request.
            </para>
            <code language="cs">
            Response response = request.Send();
            Form form = response.ExtractForm(0);
            </code>
            </example>
            
            <example>
            The following example demonstrates sending the Form as query data on a GET request.
            <code language="cs">
            // Create a Url with the form data as a query string
            Url url1 = new Url("http://localhost/");
            url1 = url1.WithQuery(form);
            
            // Create a GET request based on the url and send it to the web server.
            Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
            
            // Send the request to the web server
            Response response1 = request1.Send();
            </code>
            </example>
            
            <example>
            The following example demonstrates sending the Form as the message body on a POST request.
            <code language="cs">
            // Create a Url
            Url url2 = new Url("http://localhost/");
            
            // Create a POST request and set the form data as the message body
            Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
            request2.SetMessageBody(form);
            
            // Send the the request to the web server
            Response response2 = request2.Send();
            </code>
            </example>
        </member>
        <member name="M:Facilita.Web.Form.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.Form.getCPtr(Facilita.Web.Form)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A HandleRef containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.Form.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Form.GetHtmlElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.HtmlElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the HtmlElement to retrieve.</param>
             
             <returns>The first HtmlElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an HtmlElement with the specified <paramref name="name"/>.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetHtmlElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.HtmlElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the HtmlElement to retrieve.</param>
             <param name="value">The value of the HtmlElement to retrieve.</param>
             
             <returns>The first HtmlElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetInputElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.InputElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the InputElement to retrieve.</param>
             
             <returns>The first InputElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an InputElement with the specified <paramref name="name"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> is not an InputElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetInputElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.InputElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the InputElement to retrieve.</param>
             <param name="value">The value of the InputElement to retrieve.</param>
             
             <returns>The first InputElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an InputElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/> is not an InputElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetFileElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.FileElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the FileElement to retrieve.</param>
             
             <returns>The first FileElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a FileElement with the specified <paramref name="name"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> is not a FileElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetFileElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.FileElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the FileElement to retrieve.</param>
             <param name="value">The value of the FileElement to retrieve.</param>
             
             <returns>The first FileElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a FileElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/> is not a FileElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetOptionElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the OptionElement to retrieve.</param>
             
             <returns>The first OptionElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an OptionElement with the specified <paramref name="name"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> is not an OptionElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the OptionElement to retrieve.</param>
             <param name="value">The value of the OptionElement to retrieve.</param>
             
             <returns>The first OptionElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an OptionElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/> is not an OptionElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetSelectElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.SelectElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the SelectElement to retrieve.</param>
             
             <returns>The first SelectElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a SelectElement with the specified <paramref name="name"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> is not a SelectElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.SelectElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the SelectElement to retrieve.</param>
             <param name="value">The value of the SelectElement to retrieve.</param>
             
             <returns>The first SelectElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a SelectElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/> is not a SelectElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetTextAreaElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.TextAreaElement"/> with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name of the TextAreaElement to retrieve.</param>
             
             <returns>The first TextAreaElement in the form that has the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a TextAreaElement with the specified <paramref name="name"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> is not a TextAreaElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.GetTextAreaElement(System.String,System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.TextAreaElement"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name of the TextAreaElement to retrieve.</param>
             <param name="value">The value of the TextAreaElement to retrieve.</param>
             
             <returns>The first TextAreaElement in the form that has the specified <paramref name="name"/> and <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain a TextAreaElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             <exception cref="T:Facilita.Exception.BadValueException">The HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/> is not a TextAreaElement.</exception>
             
             <seealso cref="M:Facilita.Web.Form.GetInputElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetHtmlElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetSelectElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetOptionElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.GetFileElement(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Form.RemoveElement(System.String,System.String)">
             <summary>
             Removes the <see cref="T:Facilita.Web.HtmlElement"/> with the specified <paramref name="name"/> and <paramref name="value"/> from this Form.
             </summary>
            
             <param name="name">The name of the HtmlElement to remove.</param>
             <param name="value">The value of the HtmlElement to remove.</param>
            
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an HtmlElement with the specified <paramref name="name"/> and <paramref name="value"/>.</exception>
             
             <seealso cref="M:Facilita.Web.Form.AddElement(Facilita.Web.HtmlElement)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.Int32)"/>
        </member>
        <member name="M:Facilita.Web.Form.RemoveElement(System.String)">
             <summary>
             Removes the <see cref="T:Facilita.Web.HtmlElement"/> with the specified <paramref name="name"/> from this Form.
             </summary>
            
             <param name="name">The name of the HtmlElement to remove.</param>
            
             <exception cref="T:Facilita.Exception.NoSuchValueException">The form does not contain an HtmlElement with the specified <paramref name="name"/>.</exception>
             
             <seealso cref="M:Facilita.Web.Form.AddElement(Facilita.Web.HtmlElement)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.Int32)"/>
        </member>
        <member name="M:Facilita.Web.Form.#ctor">
            <summary>
            Initialises a new instance of the Form class, with no HtmlElements.
            </summary>
        </member>
        <member name="M:Facilita.Web.Form.#ctor(Facilita.Web.Form)">
             <summary>
             Initialises a new instance of the Form class, which is an exact copy of the specified Form.
             </summary>
            
             <param name="other">The Form to copy.</param>
        </member>
        <member name="M:Facilita.Web.Form.GetHtmlElement(System.Int32)">
             <summary>
             Gets the <i>n<sup>th</sup></i> <see cref="T:Facilita.Web.HtmlElement"/> object in this Form.
             </summary>
            
             <param name="index">The index of the HtmlElement to get.</param>
             
             <returns>The <i>n<sup>th</sup></i> HtmlElement in this Form.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException"></exception>
        </member>
        <member name="M:Facilita.Web.Form.AddElement(Facilita.Web.HtmlElement)">
             <summary>
             Appends the specified <see cref="T:Facilita.Web.HtmlElement"/> to the end of this Form.
             </summary>
            
             <param name="element">The HtmlElement to add.</param>
        </member>
        <member name="M:Facilita.Web.Form.InsertElement(System.Int32,Facilita.Web.HtmlElement)">
             <summary>
             Inserts the specified <see cref="T:Facilita.Web.HtmlElement"/> into the form.
             </summary>
            
             <param name="index">The position in the form at which the specified HtmlElement is to be inserted.</param>
             <param name="element">The HtmlElement to insert.</param>
        </member>
        <member name="M:Facilita.Web.Form.RemoveElement(System.Int32)">
             <summary>
             Removes the <i>n<sup>th</sup></i> <see cref="T:Facilita.Web.HtmlElement"/> from this Form.
             </summary>
            
             <param name="index">The index of the HtmlElement to remove.</param>
             
             <seealso cref="M:Facilita.Web.Form.AddElement(Facilita.Web.HtmlElement)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.String)"/>
             <seealso cref="M:Facilita.Web.Form.RemoveElement(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.Form.CharEncoding">
            <summary>
            Gets or sets the character encoding to use when interpreting this Form.
            </summary>
            
            <remarks>
            Usually, the character encoding will be set automatically when the form is
            extracted from a <see cref="T:Facilita.Web.Response"/> using the <see cref="M:Facilita.Web.Response.ExtractForm(System.Int32)"/>
            method.
            </remarks>
            
            <value>The character encoding to use when interpreting this Form.</value>
        </member>
        <member name="P:Facilita.Web.Form.ElementCount">
             <summary>
             Gets the number of <see cref="T:Facilita.Web.HtmlElement"/> objects in this Form.
             </summary>
            
             <value>The number of HtmlElement objects in this Form.</value>
        </member>
        <member name="P:Facilita.Web.Form.Index">
             <summary>
             Gets the zero-based index of this Form within the <see cref="T:Facilita.Web.Response"/> from which it was extracted.
             </summary>
             
             <remarks>
             The 1<sup>st</sup> Form in a Response will have an index of zero, the 2<sup>nd</sup> form will have
             an index of one, etc.
             </remarks>
            
             <value>The index of this Form within the Response from which it was extracted.</value>
             
             <seealso cref="M:Facilita.Web.Response.ExtractForm(System.Int32)"/>
        </member>
        <member name="P:Facilita.Web.Form.Action">
             <summary>
             Gets the location to send the form data when the Form is submitted.
             </summary>
             
             <remarks>
             This property is equivalent to calling <c>GetAttribute("action");</c>.
             </remarks>
            
             <value>The value of the <c>"action"</c> attribute.</value>
        </member>
        <member name="P:Facilita.Web.Form.EncType">
             <summary>
             Gets or sets the encoding type for this Form, e.g. <c>"application/x-www-form-urlencoded"</c>, <c>"multipart/form-data"</c>.
             </summary>
             
             <remarks>
             This property is equivalent to calling <c>GetAttribute("enctype");</c>. 
             </remarks>
            
             <value>The encoding type for this Form.</value>
        </member>
        <member name="P:Facilita.Web.Form.Method">
             <summary>
             Gets the HTTP method that should be used to send this Form to the web server, e.g. GET, POST.
             </summary>
             
             <remarks>
             This property is equivalent to calling <c>GetAttribute("method");</c>.
             </remarks>
            
             <value>The HTTP method that should be used to send this Form to the web server.</value>
        </member>
        <member name="P:Facilita.Web.Form.MultipartFormBoundary">
             <summary>
             Gets or sets the string that will be used as the boundary between input elements (including the <c>--</c> prefix), when encoding this Form as multipart/form-data.
             </summary>
             
             <example>
             The following example demonstrates setting the multipart form boundary.
             <code language="cs">
             // Populate form with data
             Form form = previousResponse.ExtractForm("myForm");
             form.GetInputElement("input1").Value = "value1";
             form.GetFileElement("files-to-upload[]").AddFile("image.bmp", @"C:\dataFiles\image.bmp", "image/bmp");
             form.GetFileElement("files-to-upload[]").AddFile("image2.bmp", @"C:\dataFiles\image2.bmp", "image/bmp");
             
             // Set the multipart boundary for the form
             form.MultipartFormBoundary = "--multipart-form-boundary";
             
             // Send the POST request
             Request request = WebBrowser.CreateRequest(HttpMethod.POST, myUrl);
             request.SetMessageBody(form);
             Response response = request.Send();
             </code>
             </example>
             
             <example>
             The following example demonstrates the contents of the POST request sent in the previous example.
             <para>
             The Content-Type header sent to the server will be <c>Content-Type: multipart/form-data; boundary=multipart-form-boundary</c>
             </para>
             <code language="none">
             --multipart-form-boundary
             Content-Disposition: form-data; name="input1"
             
             value1
             <b>--multipart-form-boundary</b>
             Content-Disposition: form-data; name="files-to-upload[]"
             Content-Type: multipart/mixed; boundary=multipart-file-boundary
             
             --multipart-file-boundary
             Content-Disposition: file; filename="image.bmp"
             Content-Type: image/bmp
             
             <i>(binary image data)</i>
             --multipart-file-boundary
             Content-Disposition: file; filename="image2.bmp"
             Content-Type: image/bmp
             
             <i>(binary image data)</i>
             --multipart-file-boundary--
             <b>--multipart-form-boundary--</b>
             </code>
             </example>
             
             <example>
             The following example demonstrates getting the multipart form boundary.
             <code language="cs">
             form.getMultipartFormBoundary();
             // This will return "--multipart-form-boundary"
             </code>
             </example>
            
             <value>The string that will be used as the boundary between input elements (including the <c>--</c> prefix), when encoding this Form as multipart/form-data.</value>
             
             <seealso cref="P:Facilita.Web.Form.EncType"/>
        </member>
        <member name="P:Facilita.Web.Form.IsMultipartForm">
             <summary>
             Gets a value that indicates whether this is a multi-part form.
             </summary>
             
             <remarks>
             This property is equivalent to <c>EncType == "multipart/form-data";</c>
             </remarks>
            
             <value><b>true</b> if the enctype for this Form is <c>"multipart/form-data"</c>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Form.ExtractWasSuccessful">
             <summary>
             Gets a value that indicates whether this Form was
             successfully extracted from a <see cref="T:Facilita.Web.Response"/> using the <see cref="M:Facilita.Web.Response.ExtractForm(System.Int32)"/>
             method.
             </summary>
            
             <value><b>true</b> if this Form was successfully extracted from a Response; otherwise, <b>false</b>.</value>
             
             <seealso cref="M:Facilita.Web.Response.ExtractForm(System.Int32)"/>
        </member>
        <member name="T:Facilita.Web.HostFilteringMode">
            <summary>
            Describes the modes available for filtering hosts. 
            </summary>
            
            <remarks>
            See <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Web.HostFilteringMode.WHITELIST">
            <summary>
             Only follow requests to hosts that have been explicitly included by calls to 
             <see cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/> or <see cref="M:Facilita.Web.WebBrowser.IncludeHostRegexp(System.String)"/>. 
            </summary>
        </member>
        <member name="F:Facilita.Web.HostFilteringMode.BLACKLIST">
            <summary>
            Follow requests to all hosts, except those that have been explicitly excluded by calls to 
            <see cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/> or <see cref="M:Facilita.Web.WebBrowser.IgnoreHostRegexp(System.String)"/>
            </summary>
        </member>
        <member name="T:Facilita.Web.HttpMethod">
            <summary>
            Describes an HTTP method.
            </summary>
            
            <remarks>
            For more information about HTTP methods, refer to <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9">RFC 3986</a>.
            </remarks>
        </member>
        <member name="M:Facilita.Web.HttpMethod.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.HttpMethod.getCPtr(Facilita.Web.HttpMethod)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.HttpMethod.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.HttpMethod.Find(System.String)">
             <summary>
             Converts a string into an HttpMethod.
             </summary>
            
             <param name="name">The text to convert.</param>
             
             <returns>The matching HttpMethod.</returns>
             
             <exception cref="T:Facilita.Exception.BadValueException">No matching HttpMethod could be found.</exception>
        </member>
        <member name="P:Facilita.Web.HttpMethod.GET">
            <summary>
            Represents the HTTP GET method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.POST">
            <summary>
            Represents the HTTP POST method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.HEAD">
            <summary>
            Represents the HTTP HEAD method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.PUT">
            <summary>
            Represents the HTTP PUT method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.DELETE">
            <summary>
            Represents the HTTP DELETE method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.OPTIONS">
            <summary>
            Represents the HTTP OPTIONS method.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpMethod.PATCH">
            <summary>
            Represents the HTTP PATCH method.
            </summary>
        </member>
        <member name="T:Facilita.Web.HttpStatus">
            <summary>
            Represents an HTTP status code.
            </summary>
            
            <remarks>
            To find the HTTP status code of a <see cref="T:Facilita.Web.Response"/> object, use the <see cref="P:Facilita.Web.Response.Result"/> property.
            <para>
            HTTP status codes are defined by <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">RFC 2616</a>.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Web.HttpStatus.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">A pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.HttpStatus.getCPtr(Facilita.Web.HttpStatus)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.HttpStatus.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.HttpStatus.Find(System.Int32)">
             <summary>
             Finds the HttpStatus with the specified <paramref name="code"/>.
             </summary>
            
             <param name="code">The code to look for.</param>
             
             <returns>An HttpStatus object with the specified <paramref name="code"/>.</returns>
        </member>
        <member name="M:Facilita.Web.HttpStatus.Find(System.String)">
             <summary>
             Finds the HttpStatus with the specified <paramref name="code"/>.
             </summary>
            
             <param name="code">The code to look for.</param>
             
             <returns>An HttpStatus object with the specified <paramref name="code"/>.</returns>
        </member>
        <member name="M:Facilita.Web.HttpStatus.IsInRange(Facilita.Web.HttpStatus,Facilita.Web.HttpStatus)">
             <summary>
             Determines whether this HttpStatus is ordered between the specified pair of HttpStatus objects.
             </summary>
             
             <remarks>
             The HttpStatus objects are ordered by their <see cref="P:Facilita.Web.HttpStatus.Code"/> and the range is inclusive of both of the specified
             HttpStatus objects. No order is assumed for the from and to objects. 
             </remarks>
             
             <example>
             The following example demonstrates checking to see if an HttpStatus refers to a client error (a code in the <c>400s</c>).
             <code language="cs">
             if (response.Result.IsInRange(HttpStatus.BAD_REQUEST, HttpStatus.UNSUPPORTED_MEDIA))
             {
                 Error("A client error occurred");
             }
             </code>
             </example>
            
             <param name="from">The start of the range.</param>
             <param name="to">The end of the range.</param>
             
             <returns><b>true</b> if this HttpStatus is ordered between the specified pair of HttpStatus objects; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Web.HttpStatus.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NOT_SET">
            <summary>
            No HTTP status code was received from the server.
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.CONTINUE">
            <summary>
            100 Continue
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.SWITCH_PROTOCOLS">
            <summary>
            101 Switching Protocols
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.OK">
            <summary>
            200 OK
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.CREATED">
            <summary>
            201 Created
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.ACCEPTED">
            <summary>
            202 Accepted
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NONAUTHORITATIVE_INFO">
            <summary>
            203 Non-Authoritative Information
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NO_CONTENT">
            <summary>
            204 No Content
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.RESET_CONTENT">
            <summary>
            205 Reset Content
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.PARTIAL_CONTENT">
            <summary>
            206 Partial Content
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.AMBIGUOUS">
            <summary>
            300 Multiple Choices
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.MOVED_PERMANENTLY">
            <summary>
            301 Moved Permanently
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.REDIRECT">
            <summary>
            302 Found
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.REDIRECT_METHOD">
            <summary>
            303 See Other
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NOT_MODIFIED">
            <summary>
            304 Not Modified
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.USE_PROXY">
            <summary>
            305 Use Proxy
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.REDIRECT_KEEP_VERB">
            <summary>
            307 Temporary Redirect
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.BAD_REQUEST">
            <summary>
            400 Bad Request
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.DENIED">
            <summary>
            401 Unauthorized
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.PAYMENT_REQUIRED">
            <summary>
            402 Payment Required
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.FORBIDDEN">
            <summary>
            403 Forbidden
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NOT_FOUND">
            <summary>
            404 Not Found
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.METHOD_NOT_ALLOWED">
            <summary>
            405 Method Not Allowed
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NOT_ACCEPTABLE">
            <summary>
            406 Not Acceptable
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.PROXY_AUTH_REQUIRED">
            <summary>
            407 Proxy Authentication Required
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.REQUEST_TIMEOUT">
            <summary>
            408 Request Timeout
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.CONFLICT">
            <summary>
            409 Conflict
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.GONE">
            <summary>
            410 Gone
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.LENGTH_REQUIRED">
            <summary>
            411 Length Required
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.PRECOND_FAILED">
            <summary>
            412 Precondition Failed
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.REQUEST_TOO_LARGE">
            <summary>
            413 Request Entity Too Large
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.URI_TOO_LONG">
            <summary>
            414 Request-URI Too Long
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.UNSUPPORTED_MEDIA">
            <summary>
            415 Unsupported Media Type
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.RETRY_WITH">
            <summary>
            449 Retry With
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.SERVER_ERROR">
            <summary>
            500 Internal Server Error
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.NOT_SUPPORTED">
            <summary>
            501 Not Implemented
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.BAD_GATEWAY">
            <summary>
            502 Bad Gateway
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.SERVICE_UNAVAILABLE">
            <summary>
            503 Service Unavailable
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.GATEWAY_TIMEOUT">
            <summary>
            504 Gateway Timeout
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.VERSION_NOT_SUPPORTED">
            <summary>
            505 HTTP Version Not Supported
            </summary>
        </member>
        <member name="P:Facilita.Web.HttpStatus.Code">
             <summary>
             Gets the numeric code for this HttpStatus.
             </summary>
            
             <value>The numeric code for this HttpStatus.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.Name">
             <summary>
             Gets the recommended text that is to be displayed next to the numeric code at the top of the response.
             </summary>
            
             <value>The recommended text that is to be displayed next to the numeric code at the top of the response.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.Description">
             <summary>
             Gets the text that describes the status.
             </summary>
            
             <value>The text that describes the status.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsValid">
             <summary>
             Gets a value that indicates whether this HttpStatus represents a known standard response status.
             </summary>
            
             <value><b>true</b> if this HttpStatus represents a known standard response status; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsPossibleToCache">
             <summary>
             Gets a value that indicates whether this HttpStatus could cause the state of the cache to change.
             </summary>
             
             <remarks>
             <note type="note">This could mean removing data from the cache as well as putting data into the cache.</note>
             </remarks>
            
             <value><b>true</b> if this HttpStatus could cause the state of the cache to change; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsAuthenticationRequired">
             <summary>
             Gets a value that indicates whether this HttpStatus represents a request from the server for the caller to authenticate themselves.
             </summary>
            
             <value><b>true</b> if the status represents a request from the server for the caller to authenticate themselves; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsInformational">
             <summary>
             Gets a value that indicates whether this HttpStatus has a code in the <c>100s</c>.
             </summary>
            
             <value><b>true</b> if the status has a code in the <c>100s</c>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsSuccess">
             <summary>
             Gets a value that indicates whether this HttpStatus has a code in the <c>200s</c>.
             </summary>
            
             <value><b>true</b> if the status has a code in the <c>200s</c>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsRedirection">
             <summary>
             Gets a value that indicates whether this HttpStatus has a code in the <c>300s</c>.
             </summary>
            
             <value><b>true</b> if the status has a code in the <c>300s</c>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsError">
             <summary>
             Gets a value that indicates whether this HttpStatus has a code of <c>400</c> or above
             </summary>
            
             <value><b>true</b> if the status has a code of <c>400</c> or above; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.HttpStatus.IsFullfilled">
             <summary>
             Gets a value that indicates whether the request has been generally satisfied.
             </summary>
             
             <remarks>
             This means that the call was successful (<c>200s</c> code) or lead to a redirection (<c>300s</c>).
             </remarks>
            
             <value><b>true</b> if the request has been generally satisfied; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.ImageButtonElement">
             <summary>
             Represents an <see cref="T:Facilita.Web.InputElement"/> which is an image.
             </summary>
             
             <remarks>
             When an image element on a form is submitted, the x and y coordinates that the user clicked will be sent to the server.
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
        </member>
        <member name="M:Facilita.Web.ImageButtonElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.ImageButtonElement.getCPtr(Facilita.Web.ImageButtonElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.ImageButtonElement.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Facilita.Web.ImageButtonElement.Clone">
             <summary>
             Initialises a new instance of the ImageButtonElement class, which is a copy of the specified ImageButtonElement.
             </summary>
            
             <returns>A new ImageButtonElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.ImageButtonElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this ImageButtonElement represents a successful control.
             </summary>
             
             <remarks>
             A successful control is <i>valid for submission</i>. Every successful control has 
             its control name and current value submitted when the form is sent to the web server.
             </remarks>
            
             <value><b>true</b> if this ImageButtonElement represents a successful control; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.ImageButtonElement.X">
            <summary>
            Get/set the value of the X coordinate that will be sent to the server
            </summary>
        </member>
        <member name="P:Facilita.Web.ImageButtonElement.Y">
            <summary>
            Get/set the value of the Y coordinate that will be sent to the server
            </summary>
        </member>
        <member name="T:Facilita.Web.NameValuePair">
            <summary>
            Represents a name/value pair of string objects.
            </summary>
            
            <remarks>
            This class is used to store name/value pairs in
            <see cref="T:Facilita.Web.QueryData"/> objects, which can be used in
            conjunction with <see cref="T:Facilita.Web.Url"/> objects to send data
            to a web server via <see cref="P:Facilita.Web.HttpMethod.GET"/> requests.
            </remarks>
        </member>
        <member name="M:Facilita.Web.NameValuePair.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.NameValuePair.getCPtr(Facilita.Web.NameValuePair)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.NameValuePair.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.NameValuePair.#ctor(System.String,System.String)">
             <summary>
             Initialises a new instance of the NameValuePair class.
             </summary>
            
             <param name="name">A name.</param>
             <param name="value">A value.</param>
        </member>
        <member name="P:Facilita.Web.NameValuePair.Value">
             <summary>
             Gets the value stored in this name/value pair.
             </summary>
            
             <value>The value.</value>
        </member>
        <member name="P:Facilita.Web.NameValuePair.Name">
             <summary>
             Gets the name stored in this name/value pair.
             </summary>
            
             <value>The name.</value>
        </member>
        <member name="T:Facilita.Web.OffsetEditSequence">
            <summary>
            Objects of this class contains a sequence of one or more <i>edit instructions</i>.
            Each instruction in turn replaces data at a particular offset in a string.
            </summary>
            
            <remarks>
            A number of bytes is removed from the string at the offset point, and the replacement string inserted. The replacement string can be a different length to the bytes removed.
            <para>
            An OffsetEditSequence object is often used with the <see cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/> method to edit the contents 
            of a data file used as post data in a POST request.
            It is useful when the POST data is very large or contains binary data, and must be edited
            dynamically during the test run.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.getCPtr(Facilita.Web.OffsetEditSequence)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.#ctor">
            <summary>
            Initialises a new instance of the OffsetEditSequence class, with no edit instructions.
            </summary>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.Add(System.Int32,System.Int32,System.String)">
             <summary>
             Appends an edit instruction to replace <paramref name="length"/> bytes, 
             starting at position <paramref name="offset"/>,
             with the bytes contained in <paramref name="newValue"/>.
             </summary>
            
             <param name="offset">The offset in bytes from the beginning of the target string.</param>
             <param name="length">The number of bytes to replace.</param>
             <param name="newValue">The new string to insert.</param>
        </member>
        <member name="M:Facilita.Web.OffsetEditSequence.Clear">
            <summary>
            Removes all of the edits in the sequence.
            </summary>
        </member>
        <member name="P:Facilita.Web.OffsetEditSequence.Size">
             <summary>
             Gets the number of edits in the sequence.
             </summary>
            
             <value>The number of edits in the sequence.</value>
        </member>
        <member name="T:Facilita.Web.OptionElement">
             <summary>
             Represents an HTML option element within an HTML form. 
             </summary>
             
             <remarks>
             An HTML element is everything from the start tag to the end tag.
             <para>
             An OptionElement is used to define an available option in a drop-down list
             represented by a <see cref="T:Facilita.Web.SelectElement"/>.
             </para>
             <para>
             e.g.
             <code language="none">
             <![CDATA[<select name="drink">]]><br/>
             <![CDATA[    <option value="lemonade">Lemonade</option>]]><br/>
             <![CDATA[    <option value="coke">Coke</option>]]><br/>
             <![CDATA[    <option value="pepsi">Pepsi</option>]]><br/>
             <![CDATA[    <option value="tango">Tango</option>]]><br/>
             <![CDATA[</select>]]>
             </code>
             </para>
             <para>
             When the containing <see cref="T:Facilita.Web.Form"/> is sent to the web server,
             a name/value pair will be sent which uses the name of the 
             SelectElement and the value of the currently
             selected OptionElement.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
             <seealso cref="T:Facilita.Web.SelectElement"/>
             <seealso cref="M:Facilita.Web.SelectElement.SetSelectedOption(Facilita.Web.OptionElement)"/>
        </member>
        <member name="M:Facilita.Web.OptionElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.OptionElement.getCPtr(Facilita.Web.OptionElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.OptionElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.OptionElement.#ctor(System.String)">
             <summary>
             Initialises a new instance of the OptionElement class, with the specified <paramref name="value"/>.
             </summary>
            
             <param name="value">The value of the option.</param>
        </member>
        <member name="M:Facilita.Web.OptionElement.Clone">
             <summary>
             Initialises a new instance of the OptionElement class, which is a copy of the specified OptionElement.
             </summary>
            
             <returns>A new OptionElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.OptionElement.Selected">
             <summary>
             Gets or sets a value that indicates whether this OptionElement has been selected.
             </summary>
             
             <remarks>
             An OptionElement is selected if it has a <c>"selected"</c> attribute, i.e. if <c>HasAttribute("selected")</c> returns <b>true</b>.
             <para>
             <c>Selected = true</c> is equivalent to <c>SetAttribute("selected")</c>.
             </para>
             <para>
             <c>Selected = false</c> is equivalent to <c>RemoveAttribute("selected")</c>.
             </para>
             </remarks>
             
             <value><b>true</b> if this element has the <c>"selected"</c> attribute; otherwise, <b>false</b>.</value>
            
             <seealso cref="P:Facilita.Web.OptionElement.IsSuccessfulControl"/>
        </member>
        <member name="P:Facilita.Web.OptionElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this OptionElement currently represents a successful control.
             </summary>
             
             <remarks>
             A successful control is one that is <i>valid for submission</i>, i.e. one that will be sent to the 
             web server when the form is submitted.
             <para>
             An OptionElement is successful if it has been <see cref="P:Facilita.Web.OptionElement.Selected"/>.
             </para>
             </remarks>
            
             <value><b>true</b> if this OptionElement represents a successful control; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.OptionElement.Selected"/>
        </member>
        <member name="T:Facilita.Web.Protocol">
            <summary>
            Represents an internet protocol.
            </summary>
        </member>
        <member name="M:Facilita.Web.Protocol.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.Protocol.getCPtr(Facilita.Web.Protocol)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A HandleRef containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.Protocol.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Protocol.Find(System.String)">
             <summary>
             Finds the Protocol object with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The protocol name to look for.</param>
             
             <returns>A Protocol object with the specified <paramref name="name"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">No Protocol object with the specified <paramref name="name"/> could be found.</exception>
        </member>
        <member name="P:Facilita.Web.Protocol.HTTP">
            <summary>
            Represents the Hypertext Transfer Protocol.
            </summary>
        </member>
        <member name="P:Facilita.Web.Protocol.HTTPS">
            <summary>
            Represents the Hypertext Transfer Protocol Secure.
            </summary>
        </member>
        <member name="P:Facilita.Web.Protocol.NOT_DEFINED">
            <summary>
            Represents an undefined Protocol.
            </summary>
        </member>
        <member name="P:Facilita.Web.Protocol.Name">
            <summary>
            Gets the name of this Protocol.
            </summary>
            
            <value>The name of this Protocol.</value>
        </member>
        <member name="P:Facilita.Web.Protocol.Port">
             <summary>
             Gets the port number for this Protocol.
             </summary>
            
             <value>The port number for this Protocol.</value>
        </member>
        <member name="T:Facilita.Web.QueryData">
            <summary>
            Represents the query string of a <see cref="T:Facilita.Web.Url"/> as a sequence of name/value pairs.
            </summary>
            
            <remarks>
            The syntax of a URL is: <c>scheme://domain:port/path?<b>query_string</b>#fragment_id</c>
            <para>
            Often, the query string consists of a list of name/value pairs, separated by an ampersand.
            </para>
            <para>
            e.g. <c>key1=value1&amp;key2=value2&amp;key3=value2</c>
            </para>
            It is convenient to use the QueryData class to define your query string as a series of name/value pairs.
            </remarks>
            
            <example>
            The following example demonstrates creating a URL with a query string using a QueryData object.
            <code language="cs">
            // Construct the url "http://localhost/?key1=value1&amp;key2=value2&amp;key3=value3
            Url url = new Url("http://localhost/");
            QueryData queryData = new QueryData();
            queryData.Add("key1", "value1");
            queryData.Add("key2", "value2");
            queryData.Add("key3", "value3");
            url = url.WithQuery(queryData);
            </code>
            </example>
        </member>
        <member name="M:Facilita.Web.QueryData.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.getCPtr(Facilita.Web.QueryData)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.QueryData.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.QueryData.#ctor">
            <summary>
            Initialises a new instance of the QueryData class, with no name/value pairs.
            </summary>
        </member>
        <member name="M:Facilita.Web.QueryData.Add(System.String,System.String)">
             <summary>
             Adds a name/value pair to the end of the list.
             </summary>
            
             <param name="name">The name to add.</param>
             <param name="value">The value to add.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.Add(System.String,Facilita.Web.QueryData)">
             <summary>
             Adds a name/value pair to the end of the list,
             using a value extracted from another QueryData object.
             </summary>
             
             <remarks>
             The name used to find the name/value pair in the other object is the same as the <paramref name="name"/> parameter passed.
             <para>
             This is equivalent to <c>Add(name, queryData.GetValue(name))</c>.
             </para>
             </remarks>
            
             <param name="name">The name to add.</param>
             <param name="queryData">The QueryData object from which to extract the value to add.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.Insert(System.String,Facilita.Web.QueryData,System.Int32)">
             <summary>
             Inserts a name/value pair into the list at the specified <paramref name="index"/>,
             using a value extracted from another QueryData object.
             </summary>
             
             <remarks>
             The name used to find the name/value pair in the other object is the same as the <paramref name="name"/> parameter passed.
             <para>
             This is equivalent to <c>Insert(name, queryData.GetValue(name), index)</c>.
             </para>
             </remarks>
            
             <param name="name">The name to insert.</param>
             <param name="queryData">The QueryData object from which to extract the value to add.</param>
             <param name="index">The zero-based position at which to insert the name/value pair in the list.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.Insert(System.String,System.String,System.Int32)">
             <summary>
             Inserts a name/value pair into the list at the specified <paramref name="index"/>.
             </summary>
            
             <param name="name">The name to insert.</param>
             <param name="value">The value to insert.</param>
             <param name="index">The zero-based position at which to insert the name/value pair in the list.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.GetNameCount(System.String)">
             <summary>
             Gets the number of name/value pairs in the list that have the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             
             <returns>The number of name/value pairs in the list that have the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Facilita.Web.QueryData.GetValue(System.String)">
             <summary>
             Gets the value of the first name/value pair in the list that has the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             
             <returns>The first value in the list that has the specified <paramref name="name"/>.</returns>
             
             <seealso cref="M:Facilita.Web.QueryData.GetValue(System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.QueryData.GetNameCount(System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.GetValue(System.String,System.Int32)">
             <summary>
             Gets the value of the <i>n<sup>th</sup></i> name/value pair in the list that has the specified <paramref name="name"/>.
             </summary>
             
             <example>
             The following example demonstrates finding all the values with the name "r"
             <code language="cs">
             for (int i = 0; i &lt; queryData.GetNameCount("r"); i++)
             {
                 string name = queryData.GetValue("r", i);
             }
             </code>
             </example>
            
             <param name="name">The name to look for.</param>
             <param name="index">The zero-based index of the value to return.</param>
             
             <returns>The <i>n<sup>th</sup></i> value in the list that has the specified <paramref name="name"/>.</returns>
             
             <seealso cref="M:Facilita.Web.QueryData.GetValue(System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.GetNameCount(System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.SetValue(System.String,System.String,System.Int32)">
             <summary>
             Sets the value of the <i>n<sup>th</sup></i> name/value pair in the list that has the specified <paramref name="name"/>.
             </summary>
             
             <remarks>
             <note type="note">If the list contains fewer than <i>n</i> items with the specified <paramref name="name"/>, then a new name/value pair is added to the end of the list.</note>
             </remarks>
            
             <param name="name">The name to look for.</param>
             <param name="value">The value to set.</param>
             <param name="index">The zero-based index of the item to change.</param>
             
             <returns><b>true</b> if the <i>n<sup>th</sup></i> item with the specified <paramref name="name"/> was set successfully, or <b>false</b> if a new name/value pair was added.</returns>
             
             <seealso cref="M:Facilita.Web.QueryData.SetValue(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.GetValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.SetValue(System.String,System.String)">
             <summary>
             Sets the value of the first name/value pair in the list that has the specified <paramref name="name"/>.
             </summary>
             
             <remarks>
             <note type="note">If the list does not contain an item with the specified <paramref name="name"/>, then a new name/value pair is added to the end of the list.</note>
             </remarks>
            
             <param name="name">The name to look for.</param>
             <param name="value">The value to set.</param>
             
             <returns><b>true</b> if the first item with the specified <paramref name="name"/> was set successfully, or <b>false</b> if a new name/value pair was added.</returns>
             
             <seealso cref="M:Facilita.Web.QueryData.SetValue(System.String,System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.QueryData.GetValue(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.Clear">
            <summary>
            Removes all of the name/value pairs from the list.
            </summary>
        </member>
        <member name="M:Facilita.Web.QueryData.Remove(System.String,System.Int32)">
             <summary>
             Removes the <i>n<sup>th</sup></i> item in the list with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             <param name="remove">The zero-based index of the item to remove.</param>
             
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.Add(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.Remove(System.String)">
             <summary>
             Removes the first item in the list with the specified <paramref name="name"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.Add(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.Remove(System.String,System.String,System.Int32)">
             <summary>
             Removes the <i>n<sup>th</sup></i> item in the list with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             <param name="value">The value to look for.</param>
             <param name="remove">The zero-based index of the item to remove.</param>
             
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.QueryData.Remove(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.QueryData.Add(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.QueryData.Remove(System.String,System.String)">
             <summary>
             Removes the first item in the list with the specified <paramref name="name"/> and <paramref name="value"/>.
             </summary>
            
             <param name="name">The name to look for.</param>
             <param name="value">The value to look for.</param>
        </member>
        <member name="M:Facilita.Web.QueryData.Get(System.Int32)">
             <summary>
             Gets the <see cref="T:Facilita.Web.NameValuePair"/> at the specified <paramref name="index"/> in the list.
             </summary>
             
             <example>
             The following example demonstrates listing all the name/value pairs in the queryData variable.
             <code language="cs">
             // List all the name/value pairs in queryData 
             for (int i = 0; i &lt; queryData.Count; i++)
             {
                 NameValuePair pair = queryData.Get(i);
                 WriteMessage(string.Format("{0}={1}", pair.Name, pair.Value));
             }
             </code>
             </example>
            
             <param name="index">The zero-based index of the name/value pair to get.</param>
             
             <returns>The <see cref="T:Facilita.Web.NameValuePair"/> at the specified <paramref name="index"/> in the list.</returns>
        </member>
        <member name="P:Facilita.Web.QueryData.Count">
             <summary>
             Gets the number of name/value pairs in the list.
             </summary>
            
             <value>The number of name/value pairs in the list.</value>
        </member>
        <member name="T:Facilita.Web.Request">
             <summary>
             Describes an HTTP request.
             </summary>
             
             <remarks>
             A Request object is created by calling <see cref="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url)"/>. 
             The request can then be sent to the web server using the <see cref="M:Facilita.Web.Request.Send"/> or
             <see cref="M:Facilita.Web.Request.SendTopLevel"/> methods.
             </remarks>
             
             <example>
             The following example demonstrates creating and sending a Request.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.com/"), 1); 
             Response response1 = request1.Send(); 
             </code>
             </example>
            
             <seealso cref="T:Facilita.Web.Response"/>
        </member>
        <member name="M:Facilita.Web.Request.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.Request.getCPtr(Facilita.Web.Request)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.Request.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Request.Send">
             <summary>
             Sends this request and any sub-requests to the web server, and waits for
             all the responses to be served.
             </summary>
             
             <remarks>
             The top-level request is sent first. Once the server has responded, a list of
             sub-requests is compiled. This list is made up of:
             <ul>
             <li>Any sub-requests that are identified by parsing the initial <see cref="T:Facilita.Web.Response"/></li>
             <li>The sub-requests explicitly defined by calls to <see cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/>, <see cref="P:Facilita.Web.Request.SubRequests"/></li>
             </ul>
             </remarks>
             
             <example>
             The following example demonstrates sending a Request.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             request1.AddSubRequest(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif");
             Response response1 = request1.Send();
             </code>
             
             In this example, eggPlant Performance will first make an HTTP GET request to the url specified by <c>url1</c> (<c>http://localhost/</c>).
             Once the server responds, eggPlant Performance will parse the HTML in the response, looking for additional resources that
             need to be downloaded (such as images, stylesheets or javascript files). These resources will be requested
             from the server. In addition, the sub-request that has been explicitly added using <see cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/> 
             (<c>http://localhost/Themes/TestPlant/Content/images/orange_button_bg.gif</c>) will also be requested from the server.
             </example>
            
             <returns>A <see cref="T:Facilita.Web.Response"/> object that describes the HTTP response from the server, including any sub-responses.</returns>
             
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
             <seealso cref="P:Facilita.Web.Request.SubRequests"/>
             <seealso cref="P:Facilita.Web.Request.IgnoredSubRequests"/>
             <seealso cref="M:Facilita.Web.Request.SendTopLevel"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="P:Facilita.Web.Request.SubRequestThreadCount"/>
        </member>
        <member name="M:Facilita.Web.Request.SendTopLevel">
             <summary>
             Sends this request to the web server, and waits for the response to be served, but doesn't send any sub-requests. This is unlike <see cref="M:Facilita.Web.Request.Send"/> which also sends sub-requests. You can
             send the sub-requests later by calling <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>.
             </summary>
             
             <example>
             The following example demonstrates sending the top-level request separately to the sub-requests.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             // Send the top-level request only 
             Response response1 = request1.SendTopLevel();
             // Now send the sub-requests 
             request1.SendSubRequests(response1);
             // We must call end() when we have finished with this request
             request1.End();
             </code>
             </example>
            
             <returns>The <see cref="T:Facilita.Web.Response"/> to the top-level request. Note that this will not contain any sub-responses.</returns>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.End"/>
        </member>
        <member name="M:Facilita.Web.Request.SetMessageBody(System.String)">
             <summary>
             Sets the body of the HTTP request that will be sent to the server.
             This method is normally used with a POST or PUT request.
             </summary>
             
             <remarks>
             <ul>
             <li>If the message body is a <see cref="T:Facilita.Web.Form"/>, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/> overload instead.</li>
             <li>If the message body consists of binary data, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/> overload.</li>
             <li>If the message body is very large, then it may be easier to store the data in a file and use the
             <see cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/> method instead.</li>
             </ul>
             </remarks>
            
             <example>
             The following example demonstrates setting the message body of a POST request.
             <code language="cs">
             Url url32 = new Url(protocol1, localhost, "/login");
             Request request32 = Browser.CreateRequest(HttpMethod.POST, url32, 32);
             request32.SetMessageBody("Email=user@testplant.com&amp;Password=password&amp;RememberMe=false");
             Response response32 = request32.Send();
             </code>
             </example>
            
             <param name="messageBody">The body of the message (e.g. the POST data).</param>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SetMessageBody(System.String,System.Text.Encoding)">
             <summary>
             Sets the body of the HTTP request that will be sent to the server, specifying the character encoding to 
             use to encode the post data.
             This method is normally used with a POST or PUT request.
             </summary>
             
             <remarks>
             <ul>
             <li>If the message body is a <see cref="T:Facilita.Web.Form"/>, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/> overload instead.</li>
             <li>If the message body consists of binary data, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/> overload.</li>
             <li>If the message body is very large, then it may be easier to store the data in a file and use the
             <see cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/> method instead.</li>
             </ul>
             </remarks>
             
             <example>
             The following example demonstrates setting the message body of a POST request.
             <code language="cs">
             Url url32 = new Url(protocol1, localhost, "/login");
             Request request32 = Browser.CreateRequest(HttpMethod.POST, url32, 32);
             request32.SetMessageBody("Email=user@testplant.com&amp;Password=password&amp;RememberMe=false", Encoding.UTF8);
             Response response32 = request32.Send();
             </code>
             </example>
            
             <param name="messageBody">The body of the message (e.g. the POST data).</param>
             <param name="encoding">The character encoding with which to encode the message body when it is sent as bytes.</param>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)">
             <summary>
             Sends the sub-requests for this request to the web server, and waits for the responses. 
             </summary>
             
             <remarks>
             The response parameter should be the <see cref="T:Facilita.Web.Response"/> object that was returned by a call to <see cref="M:Facilita.Web.Request.SendTopLevel"/>.
             <para>
             This method will compile a list of sub-requests to send to the web server. This list is made up of:
             <ul>
             <li>Any sub-requests that are identified by parsing the initial Response</li>
             <li>The sub-requests explicitly defined by calls to <see cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/>, <see cref="P:Facilita.Web.Request.SubRequests"/></li>
             </ul>
             </para>
             <para>
             The sub-responses will be attached to the Response object that is passed in,
             and can be accessed by using the <see cref="P:Facilita.Web.Response.SubResponses"/> property.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates sending sub-level requests separately to the top-level request.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             // Send the top-level request only 
             Response response1 = request1.SendTopLevel();
             // Now send the sub-requests 
             request1.SendSubRequests(response1);
             // We must call end() when we have finished with this request
             request1.End();
             </code>
             </example>
            
             <param name="response">The <see cref="T:Facilita.Web.Response"/> object returned by a call to <see cref="M:Facilita.Web.Request.SendTopLevel"/>.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendTopLevel"/>
             <seealso cref="M:Facilita.Web.Request.End"/>
             <seealso cref="P:Facilita.Web.Request.SubRequestThreadCount"/>
        </member>
        <member name="M:Facilita.Web.Request.End">
             <summary>
             Ends this request - this method should be called when either <see cref="M:Facilita.Web.Request.SendTopLevel"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             has been called. It tells eggPlant Performance that no more HTTP requests will be made as part of this Request object.
             </summary>
             
             <remarks>
             <note type="note">It is not necessary to call this method if you have called <see cref="M:Facilita.Web.Request.Send"/> 
             rather than <see cref="M:Facilita.Web.Request.SendTopLevel"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>.</note>
             </remarks>
             
             <example>
             The following example demonstrates calling the End() method after SendTopLevel() and SendSubRequests().
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             // Send the top-level request only 
             Response response1 = request1.SendTopLevel();
             // Now send the sub-requests 
             request1.SendSubRequests(response1);
             // We must call end() when we have finished with this request
             request1.End();
             </code>
             </example>
            
             <seealso cref="M:Facilita.Web.Request.SendTopLevel"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
        </member>
        <member name="M:Facilita.Web.Request.IgnoreSubRequest(Facilita.Web.Url)">
             <summary>
             Specifies a <see cref="T:Facilita.Web.Url"/> that will be ignored when fetching sub-requests from the web server.
             </summary>
             
             <remarks>
             This URL will not be downloaded, even if a reference to it is found in the HTML
             of the top-level request.
             </remarks>
             
             <example>
             The following example demonstrates ignoring sub-request URLs so that they will not be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Specify the sub-requests to ignore
             request1.IgnoreSubRequest(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif"));
             request1.IgnoreSubRequest(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/bg_maincolumn_3.gif"));
             request1.IgnoreSubRequest(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/logo-reflection.gif"));
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="url">The sub-request to ignore.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
             <seealso cref="P:Facilita.Web.Request.IgnoredSubRequests"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
             
        </member>
        <member name="M:Facilita.Web.Request.IgnoreSubRequest(System.String)">
             <summary>
             Specifies a URL that will be ignored when fetching sub-requests from the web server.
             </summary>
             
             <remarks>
             This URL will not be downloaded, even if a reference to it is found in the HTML
             of the top-level request.
             </remarks>
             
             <example>
             The following example demonstrates ignoring sub-request URLs so that they will not be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Specify the sub-request to ignore
             request1.IgnoreSubRequest("http://localhost/Themes/TestPlant/Content/images/orange_button_bg.gif");
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="resource">The sub-request to ignore.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(Facilita.Web.Url)"/>
             <seealso cref="P:Facilita.Web.Request.IgnoredSubRequests"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.IgnoreSubRequest(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String)">
             <summary>
             Specifies a URL that will be ignored when fetching sub-requests from the web server.
             </summary>
             
             <remarks>
             This URL will not be downloaded, even if a reference to it is found in the HTML
             of the top-level request.
             </remarks>
             
             <example>
             The following example demonstrates ignoring sub-request URLs so that they will not be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Specify the sub-requests to ignore
             request1.IgnoreSubRequest(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif");
             request1.IgnoreSubRequest(protocol1, localhost, "/Themes/TestPlant/Content/images/bg_maincolumn_3.gif");
             request1.IgnoreSubRequest(protocol1, localhost, "/Themes/TestPlant/Content/images/logo-reflection.gif");
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="protocol">The protocol of the sub-request to ignore.</param>
             <param name="ipEndPoint">The IpEndPoint of the sub-request to ignore.</param>
             <param name="path">The path of the sub-request to ignore.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(Facilita.Web.Url)"/>
             <seealso cref="P:Facilita.Web.Request.IgnoredSubRequests"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
             
        </member>
        <member name="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)">
             <summary>
             Adds a <see cref="T:Facilita.Web.Url"/> to the list of sub-requests that will be fetched from the web server
             when this Request is sent.
             </summary>
             
             <remarks>
             The sub-requests will be fetched when <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/> are called.
             </remarks>
             
             <example>
             The following example demonstrates adding a sub-request to be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Add a sub-request
             request1.AddSubRequest(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif"));
             // Send the top-level request to the server, followed by all of the sub-requests 
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="url">The url that should be fetched.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.AddSubRequest(System.String)">
             <summary>
             Adds a URL to the list of sub-requests that will be fetched from the web server
             when this Request is sent.
             </summary>
             
             <remarks>
             The sub-requests will be fetched when <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/> are called.
             </remarks>
             
             <example>
             The following example demonstrates adding a sub-request to be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Add a sub-request
             request1.AddSubRequest("http://localhost/Themes/TestPlant/Content/images/orange_button_bg.gif");
             // Send the top-level request to the server, followed by all of the sub-requests 
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="resource">The url that should be fetched.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String)">
             <summary>
             Adds a URL to the list of sub-requests that will be fetched from the web server
             when this Request is sent.
             </summary>
             
             <remarks>
             The sub-requests will be fetched when <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/> are called.
             </remarks>
             
             <example>
             The following example demonstrates adding a sub-request to be fetched.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Add a sub-request
             request1.AddSubRequest(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif");
             // Send the top-level request to the server, followed by all of the sub-requests 
             Response response1 = request1.Send();
             </code>
             </example>
            
             <param name="protocol">The <see cref="T:Facilita.Web.Protocol"/> of the url.</param>
             <param name="ipEndPoint">The <see cref="T:Facilita.Native.IpEndPoint"/> of the url.</param>
             <param name="path">The path of the url.</param>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SetKeepAlive(System.Boolean)">
             <summary>
             Sets the value of the <c>"Connection"</c> request header.
             </summary>
             
             <remarks>
             <ul>
             <li>If the parameter is set to <b>true</b>, then the <c>"Connection"</c> header will 
             be assigned the value "Keep-Alive".</li>
             <li>If the parameter is set to <b>false</b>, then the <c>"Connection"</c> header will
             be removed.</li>
             </ul>
             </remarks>
            
             <param name="f"><b>true</b> if the <c>"Connection: Keep-Alive"</c> request header should be set.</param>
        </member>
        <member name="M:Facilita.Web.Request.SetOffsetEdit(Facilita.Web.OffsetEditSequence)">
             <summary>
             Sets an <see cref="T:Facilita.Web.OffsetEditSequence"/> object to be applied to the message
             body of this Request object, immediately before the request is sent to
             the web server.
             </summary>
            
             <param name="edits">An <see cref="T:Facilita.Web.OffsetEditSequence"/> object, which can contain multiple edits.</param>
        </member>
        <member name="M:Facilita.Web.Request.SetMessageBody(System.Byte[])">
             <summary>
             Sets the body of the HTTP request that will be sent to the server.
             This method is normally used with a POST or PUT request.
             </summary>
             
             <remarks>
             <ul>
             <li>If the message body is a <see cref="T:Facilita.Web.Form"/>, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/> overload instead.</li>
             <li>If the message body consists of text, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/> overload.</li>
             <li>If the message body is very large, then it may be easier to store the data in a file and use the
             <see cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/> method instead.</li>
             </ul>
             </remarks>
             
             <example>
             The following example demonstrates setting individual bytes to send as POST data.
             <code language="cs">
             Url url32 = new Url(protocol1, localhost, "/login");
             Request request32 = Browser.CreateRequest(HttpMethod.POST, url32, 32);
             request32.SetMessageBody(new byte[] { 0x01, 0x02, 0x03});
             Response response32 = request32.Send();
             </code>
             </example>
            
             <param name="messageBody">The body of the message (e.g. the POST data).</param>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)">
             <summary>
             Sets the body of the HTTP request that will be sent to the server, by loading data
             from a data file.
             </summary>
             
             <remarks>
             This method is normally used with a POST or PUT request.
             <ul>
             <li>If the message body is a <see cref="T:Facilita.Web.Form"/>, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/> overload instead.</li>
             <li>If the message body is a short section of text or a few binary bytes, consider
             using the <see cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/> or <see cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/> overloads.</li>
             </ul>
             <para>
             <note type="note">If you are using this method in your script, make sure that the file containing the data is in the <c>data/Files</c>
             directory within your project.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates setting the message body of a POST request from the contents of a file.
             <code language="cs">
             Url url32 = new Url(protocol1, localhost, "/uploadFile");
             Request request32 = Browser.CreateRequest(HttpMethod.POST, url32, 32);
             request32.SetMessageBodyFromFile("myDoc.doc");
             Response response32 = request32.Send();
             </code>
             </example>
            
             <param name="fileName">The path of the filename, relative to the Virtual User's data directory.</param>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/>
        </member>
        <member name="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)">
             <summary>
             Sets the body of the HTTP request that will be sent to the server, as name/value pairs
             extracted from the specified <see cref="T:Facilita.Web.Form"/> object.
             </summary>
             
             <remarks>
             This method is normally used with a POST or PUT request.
             <ul>
             <li>If the message body consists of text, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/> overload instead.</li>
             <li>If the message body consists of binary data, then you should use the
             <see cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/> overload.</li>
             <li>If the message body is very large, then it may be easier to store the data in a file and use the
             <see cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/> method instead.</li>
             </ul>
             </remarks>
             
             <example>
             The following example demonstrates setting POST data on a Request from a Form object.
             <code language="cs">
             // Create a POST request
             Url url33 = new Url(protocol1, localhost, "/cart");
             Request request33 = Browser.CreateRequest(HttpMethod.POST, url33, 33);
             
             // Create a new form and populate it with some data 
             Form postData33 = new Form();
             postData33.setCharEncoding("utf-8");	
             postData33.AddElement(new InputElement("itemquantity82", "1"));
             postData33.AddElement(new InputElement("startcheckout", "startcheckout"));
             
             // attach the form to the POST request and send it
             request33.SetMessageBody(postData33);
             Response response33 = request33.Send();
             </code>
             </example>
            
             <param name="form">The body of the message (e.g. the POST data).</param>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.Byte[])"/>
             <seealso cref="M:Facilita.Web.Request.SetMessageBodyFromFile(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.GetMessageBody">
             <summary>
             Gets the body of the HTTP request that will be sent to the server.
             </summary>
            
             <returns>The body of the HTTP request.</returns>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SetHeader(System.String,System.String)">
             <summary>
             Sets an HTTP header for this Request, as a name/value pair.
             </summary>
             
             <remarks>
             The header will be sent to the web server when this Request is sent.
             </remarks>
             
             <example>
             The following example demonstrates setting the <c>"X-Requested-With"</c> header on the request.
             <code language="cs">
             request34.SetHeader("X-Requested-With", "XMLHttpRequest");
             </code>
             </example>
            
             <param name="header">The header to set.</param>
             <param name="value">The value to assign to the header.</param>
             
             <seealso cref="M:Facilita.Web.Request.RemoveHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.Request.SetHeader(System.String)">
             <summary>
             Sets an HTTP header for this Request, using the contents of the specified string.
             </summary>
             
             <remarks>
             The header will be sent to the web server when this Request is sent.
             </remarks>
             
             <example>
             The following example demonstrates setting the <c>"X-Requested-With"</c> header on the request.
             <code language="cs">
             request34.SetHeader("X-Requested-With: XMLHttpRequest");
             </code>
             </example>
            
             <param name="header">The header to set, including the value, which should be separated from the name with a colon.</param>
             
             <seealso cref="M:Facilita.Web.Request.RemoveHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.Request.RemoveHeader(System.String)">
             <summary>
             Removes an HTTP header from this Request.
             </summary>
            
             <param name="header">The header to remove.</param>
             
             <seealso cref="M:Facilita.Web.Request.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Request.ClearHeaders"/>
        </member>
        <member name="M:Facilita.Web.Request.ClearHeaders">
             <summary>
             Clears the list of HTTP headers for this Request.
             </summary>
            
             <seealso cref="M:Facilita.Web.Request.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Request.RemoveHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.ContainsHeader(System.String)">
             <summary>
             Determines whether this Request contains a particular HTTP header.
             </summary>
             
             <example>
             The following example demonstrates getting the <c>"Content-Type"</c> header of a request.
             <code language="cs">
             if (request.containsHeader("Content-Type"))
             {
                 WriteMessage(string.format("Content-Type=%s", request.GetHeaderValue("Content-Type")));
             }
             </code>
             </example>
            
             <param name="header">The HTTP header to check for.</param>
             
             <returns><b>true</b> if this Request contains the specified header; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Web.Request.GetHeaderValue(System.String)">
             <summary>
             Gets the value of the specified HTTP request header.
             </summary>
            
             <param name="header">The header to get the value of.</param>
             
             <returns>The value of the header.</returns>
             
             <seealso cref="M:Facilita.Web.Request.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Request.RemoveHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.SetReferer(Facilita.Web.Url)">
             <summary>
             Sets the value of the <c>"Referer"</c> HTTP header.
             </summary>
            
             <param name="url">The value to set.</param>
        </member>
        <member name="M:Facilita.Web.Request.UnsetReferer">
            <summary>
            Removes the <c>"Referer"</c> HTTP header.
            </summary>
        </member>
        <member name="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)">
             <summary>
             Adds a Content-Type fragment, so the content of sub-request responses that match
             the specified Content-Type fragment will be kept.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates keeping the content of any sub-requests that have a Content-Type starting with <c>"text"</c> (e.g. <c>text/html</c>, <c>text/xml</c>)
             <code language="cs">
             // Keep the content of any sub-requests that have a Content-Type starting with "text" (e.g. text/html, text/xml)
             request.AddKeepSubRequestContentType("text");
             </code>
             </example>
            
             <param name="typeFragment">Sub-request responses that have a Content-Type header containing this <paramref name="typeFragment"/> will be kept.</param>
             
             <seealso cref="P:Facilita.Web.Request.KeepContent"/>
             <seealso cref="P:Facilita.Web.Request.KeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.Request.RemoveKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)">
             <summary>
             Adds a URL, so the content of sub-request responses that match the specified URL 
             fragment will be kept.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates keeping the content of the sub-request with the url <c>http://localhost/images/magnifying-glass.png</c>
             <code language="cs">
             // Keep the content of the sub-request with the url http://localhost/images/magnifying-glass.png
             request.AddKeepSubRequestContentUrl("http://localhost/images/magnifying-glass.png");
             </code>
             </example>
            
             <param name="urlFragment">The responses from sub-requests that match this <paramref name="urlFragment"/> will be kept.</param>
             
             <seealso cref="P:Facilita.Web.Request.KeepContent"/>
             <seealso cref="P:Facilita.Web.Request.KeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.Request.RemoveKeepSubRequestContentUrl(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.RemoveKeepSubRequestContentType(System.String)">
             <summary>
             Removes a Content-Type fragment, so the content of sub-request responses that match
             the specified Content-Type fragment will no longer be kept.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates discarding the content of any sub-requests that have a Content-Type starting with <c>"text"</c> (e.g. <c>text/html</c>, <c>text/xml</c>)
             <code language="cs">
             // Don't keep the content of any sub-requests that have a Content-Type starting with "text" (e.g. text/html, text/xml)
             request.removeKeepSubRequestContentType("text");
             </code>
             </example>
            
             <param name="typeFragment">Sub-request responses that have a Content-Type header containing this <paramref name="typeFragment"/> will no longer be kept.</param>
             
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)"/>
             <seealso cref="P:Facilita.Web.Request.KeepAllSubRequestContent"/>
        </member>
        <member name="M:Facilita.Web.Request.RemoveKeepSubRequestContentUrl(System.String)">
             <summary>
             Removes a URL, so the content of sub-request responses that match the specified URL 
             fragment will no longer be kept.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of a particular sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates discarding the content of the sub-request with the url <c>http://localhost/images/magnifying-glass.png</c>
             <code language="cs">
             // Don't keep the content of the sub-request with the url http://localhost/images/magnifying-glass.png
             request.removeKeepSubRequestContentUrl("http://localhost/images/magnifying-glass.png");
             </code>
             </example>
            
             <param name="urlFragment">The responses from sub-requests that match this <paramref name="urlFragment"/> will no longer be kept.</param>
             
             <seealso cref="P:Facilita.Web.Request.KeepContent"/>
             <seealso cref="P:Facilita.Web.Request.KeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.GetContentUrlFragments">
             <summary>
             Gets a list of all the URL fragments for which the content of sub-request responses will be kept.
             </summary>
            
             <returns>A list of all the URL fragments for which the content of sub-request responses will be kept.</returns>
             
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.RemoveKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Request.GetContentTypeFragments">
             <summary>
             Gets a list of all the Content-Type fragments for which the content of sub-request responses will be kept.
             </summary>
            
             <returns>A list of all the Content-Type fragments for which the content of sub-request responses will be kept.</returns>
             
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.RemoveKeepSubRequestContentType(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Request.SubRequests">
             <summary>
             Gets or sets the list of sub-requests that will be fetched from the web server
             by this request. The sub-requests will be fetched when <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/> are called.
             </summary>
             
             <example>
             The following example demonstrates sending sub-requests in addition to the top-level request
             in a single call to the <see cref="M:Facilita.Web.Request.Send"/> method.
             <code language="cs">
             Url url1 = new Url(protocol1, localhost, "/");
             // Create a GET request
             Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
             
             // Create a list of sub-requests
             List&lt;Url&gt; subRequests = new ArrayList&lt;Url&gt;();
             subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif"));
             subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/bg_maincolumn_3.gif"));
             subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/logo-reflection.gif"));
             // Attach the list of sub-requests to the top-level request
             request1.SubRequests = subRequests;
             // Send the top-level request to the server, followed by all of the sub-requests 
             Response response1 = request1.Send();
             </code>
             </example>
            
             <value>The list of sub-requests that will be fetched from the web server by this request.</value>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
             <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Request.IgnoredSubRequests">
            <summary>
            Gets or sets the list of sub-requests that will be ignored when fetching sub-requests from the web server.
            </summary>
            
            <remarks>
            Any requests included in this list will not be downloaded, even if references to them are found in the HTML
            of the top-level request.
            </remarks>
            
            <example>
            The following example demonstrates ignoring sub-request URLs so that they will not be fetched.
            <code language="cs">
            Url url1 = new Url(protocol1, localhost, "/");
            // Create a GET request
            Request request1 = Browser.CreateRequest(HttpMethod.GET, url1, 1);
            
            // Create a list of sub-requests
            List&lt;Url&gt; subRequests = new ArrayList&lt;Url&gt;();
            subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/orange_button_bg.gif"));
            subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/bg_maincolumn_3.gif"));
            subRequests.Add(new Url(protocol1, localhost, "/Themes/TestPlant/Content/images/logo-reflection.gif"));
            // Specify that all requests on this list should be ignored when fetching sub-requests
            request1.setIgnoredSubRequests(subRequests);
            Response response1 = request1.Send();
            </code>
            </example>
            
            <value>The list of sub-requests that will be ignored when fetching sub-requests from the web server.</value>
            
            <seealso cref="M:Facilita.Web.Request.Send"/>
            <seealso cref="M:Facilita.Web.Request.SendSubRequests(Facilita.Web.Response)"/>
            <seealso cref="M:Facilita.Web.Request.IgnoreSubRequest(System.String)"/>
            <seealso cref="M:Facilita.Web.Request.AddSubRequest(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Request.Url">
             <summary>
             Gets or sets the <see cref="T:Facilita.Web.Url"/> that this Request is targeting.
             </summary>
            
             <value>The target <see cref="T:Facilita.Web.Url"/>.</value>
             
             <seealso cref="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url)"/>
        </member>
        <member name="P:Facilita.Web.Request.HeaderKeys">
             <summary>
             Gets a list of names of all the HTTP request headers set in this Request.
             </summary>
            
             <value>A list of names of all the HTTP request headers set in this Request.</value>
        </member>
        <member name="P:Facilita.Web.Request.KeepContent">
             <summary>
             Gets or sets a value that indicates whether the content of responses will be kept.
             </summary>
             
             <remarks>
             If the value of this is <b>false</b> then the content of every response to
             this Request will be discarded, 
             and it will not be possible to examine the <i>content</i> using the <see cref="T:Facilita.Web.Response"/> class
             (but other information will still be accessible in the <see cref="T:Facilita.Web.Response"/> objects).
             </remarks>
            
             <value><b>true</b> if the content of responses will be kept; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.Request.KeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Request.TimeEveryHttpRequest">
             <summary>
             Gets or sets a value that indicates whether sub-requests will be timed as well as top-level HTTP requests.
             </summary>
             
             <remarks>
             Top-level requests will always be timed, even if the value of this property is <b>false</b>.
             </remarks>
            
             <value><b>true</b> if sub-requests will be timed as well as top-level HTTP requests; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Request.RetrieveSubRequests">
            <summary>
            Gets or sets a value that indicates whether sub-requests will be retrieved for this Request.
            </summary>
            
            <remarks>
            <note type="note">By default, sub-requests are retrieved.</note>
            </remarks>
            
            <value><b>true</b> if sub-requests will be retrieved for this Request; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Request.SubRequestThreadCount">
             <summary>
             Gets or sets the number of threads that will be used to fetch sub-requests from the web server.
             </summary>
             
             <remarks>
             If this value is increased, then more sub-requests can be fetched in parallel. However, using
             more threads will increase the load on the injector machine.
             </remarks>
            
             <value>The number of threads that will be used to fetch sub-requests from the web server.</value>
        </member>
        <member name="P:Facilita.Web.Request.FollowRedirects">
             <summary>
             Gets or sets a value that indicates whether redirects will automatically be followed for this Request.
             </summary>
             
             <remarks>
             If the response to this request is an HTTP redirect code (e.g. <c>301</c>, <c>302</c>), 
             and this Request object is set to follow redirects,
             then the eggPlant Performance engine will automatically follow the redirect link.
             In this case, the <see cref="P:Facilita.Web.Response.WasRedirected"/> property value will be <b>true</b>
             for the <see cref="T:Facilita.Web.Response"/> object returned by <see cref="M:Facilita.Web.Request.Send"/>, and
             <see cref="P:Facilita.Web.Response.RedirectedFrom"/> will contain the Response object
             containing the HTTP redirect code.
             <para>
             Default behaviour for newly-created Request objects is to follow redirects,
             but this can be changed for individual Request objects using this property,
             or changed on all Request objects using <see cref="P:Facilita.Web.WebBrowser.DefaultFollowRedirects"/>.
             </para>
             </remarks>
            
             <value><b>true</b> if redirects will automatically be followed for this Request; otherwise, <b>false</b>.</value>
             
             <seealso cref="M:Facilita.Web.Request.Send"/>
             <seealso cref="P:Facilita.Web.Response.WasRedirected"/>
             <seealso cref="P:Facilita.Web.Response.RedirectedFrom"/>
        </member>
        <member name="P:Facilita.Web.Request.Version">
            <summary>
            Gets or sets the HTTP version as a string.
            </summary>
            
            <remarks>
            The version of HTTP in common use is currently 1.1.
            </remarks>
            
            <value>The HTTP version.</value>
        </member>
        <member name="P:Facilita.Web.Request.IncludeQueryDataInLabels">
             <summary>
             Gets or sets a value that indicates whether URLs with different query data should be considered different
             from each other for analysis purposes.
             </summary>
             
             <remarks>
             If the value of this property is <b>true</b>, then the query
             data will be included in the HTTP metric labels.
             <para>
             e.g.
             <ul>
             <li><c>http://localhost:32144/search?q=camera</c></li>
             <li><c>http://localhost:32144/search?q=laptop</c></li>
             </ul>
             </para>
             <para>
             It may be important to compare how the query data affects the performance timing data,
             or you may wish to consider both requests as accessing the same URL under the same label <c>http://localhost:32144/search</c>.
             </para>
             </remarks>
            
             <value><b>true</b> if URL query data will be included in the HTTP metric labels; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Request.KeepAllSubRequestContent">
             <summary>
             Gets or sets a value that indicates whether the content of responses to sub-requests will be kept.
             </summary>
             
             <remarks>
             If the value of this property is <b>false</b>, then all the responses to sub-requests will be discarded.
             <para>
             <note type="warning">There is a significant performance penalty to keep the sub-request content, so this property should
             only be set to <b>true</b> if it is necessary to examine the content of sub-responses.</note>
             </para>
             </remarks>
            
             <value><b>true</b> if the content of responses to sub-requests will be kept; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.Request.KeepContent"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.Request.AddKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Request.Method">
             <summary>
             Gets the HTTP method that this Request uses (e.g. <see cref="P:Facilita.Web.HttpMethod.GET">GET</see> or <see cref="P:Facilita.Web.HttpMethod.POST">POST</see>)
             </summary>
            
             <value>The HTTP method that this Request uses.</value>
             
             <seealso cref="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url)"/>
        </member>
        <member name="P:Facilita.Web.Request.Reference">
             <summary>
             Gets the reference id that was passed to the <see cref="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url,System.Int32)"/> method when this Request object was created.
             </summary>
            
             <value>The reference number of this Request.</value>
        </member>
        <member name="P:Facilita.Web.Request.HasReferer">
             <summary>
             Gets a value that indicates whether the <c>"Referer"</c> HTTP header has been set for this Request.
             </summary>
            
             <value><b>true</b> if the <c>"Referer"</c> header has been set; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Request.UserAgent">
             <summary>
             Gets or sets the value of the <c>"User-Agent"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"User-Agent"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.Request.ContentType">
             <summary>
             Gets or sets the value of the <c>"Content-Type"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"Content-Type"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.Request.ID">
             <summary>
             Gets the unique ID that has been assigned to this Request.
             </summary>
             
             <remarks>
             This ID number is created by the <see cref="T:Facilita.Web.WebBrowser"/>. It is the value that is displayed in the web log viewer.
             </remarks>
            
             <value>The unique ID assigned to this Request.</value>
        </member>
        <member name="P:Facilita.Web.Request.Referer">
             <summary>
             Gets or sets the value of the <c>"Referer"</c> HTTP header.
             </summary>
            
             <value>The value of the <c>"Referer"</c> HTTP header.</value>
        </member>
        <member name="P:Facilita.Web.Request.IsDynatraceIntegrationEnabled">
             <summary>
             Gets or sets a value that indicates whether dynaTrace integration is enabled.
             </summary>
             
             <remarks>
             When dynaTrace integration is enabled, a special dynaTrace HTTP header is sent 
             with each HTTP request.
             </remarks>
            
             <value><b>true</b> if dynaTrace integration is enabled; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Request.CharactersAllowedInPostedForm">
            <summary>
            Gets or sets the characters that will NOT be percent-encoded when a <see cref="T:Facilita.Web.Form"/> is sent to the web server using a POST request.
            </summary>
            
            <remarks>
            By default, a character will be percent-encoded within a form if it is:
            <ul>
            <li>Outside the ASCII range <b>OR</b></li>
            <li>Not an alpha-numeric character <b>AND</b> not in this list of allowed characters</li>
            </ul>
            <para>
            By default, the allowed list of characters is as follows:
            </para>
            <list type="table">
            <listheader><term>Character</term><description>Name</description></listheader>
            <item><term><c>' '</c></term><description>space</description></item>
            <item><term><c>'-'</c></term><description>hyphen</description></item>
            <item><term><c>'_'</c></term><description>underscore</description></item>
            <item><term><c>'.'</c></term><description>full stop</description></item>
            <item><term><c>'*'</c></term><description>asterisk</description></item>
            </list>
            </remarks>
            
            <value>The characters that will not be encoded.</value>
            
            <seealso cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/>
        </member>
        <member name="T:Facilita.Web.Response">
             <summary>
             Describes an HTTP response returned by a web server. When a <see cref="T:Facilita.Web.Request"/>
             is sent to the server, then a corresponding Response object will be generated.
             </summary>
             
             <remarks>
             The Response object contains information about the response from the web
             server, such as the HTTP status code, the HTTP response headers, and 
             the actual content of the response.
             The response may also contain sub-responses, such as images, CSS files, or
             javascript. These can be accessed using the <see cref="P:Facilita.Web.Response.SubResponses"/> property.
             </remarks>
             
             <example>
             The following example demonstrates sending a request and receiving a response.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.co.uk/"), 1);
             Response response1 = request1.Send();
             </code>
             </example>
            
             <seealso cref="T:Facilita.Web.Request"/>
        </member>
        <member name="M:Facilita.Web.Response.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.Response.getCPtr(Facilita.Web.Response)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.Response.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Response.ContainsHeader(System.String)">
             <summary>
             Determines whether this Response contains a particular HTTP
             response header.
             </summary>
             
             <example>
             The following example demonstrates checking for the <c>"Last-Modified"</c> header.
             <code language="cs">
             if (response.ContainsHeader("Last-Modified"))
             {
                 string lastModified = response.GetHeaderValue("Last-Modified");
                 ...
             }
             </code>
             </example>
            
             <param name="header">The header to check for.</param>
             
             <returns><b>true</b> if this Response contains the specified <paramref name="header"/>; otherwise, <b>false</b>.</returns>
             
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Response.GetHeaderValue(System.String)">
             <summary>
             Gets the value of an HTTP response header contained in this Response.
             </summary>
             
             <example>
             The following example demonstrates getting the value of the <c>"Last-Modified"</c> header.
             <code language="cs">
             if (response.ContainsHeader("Last-Modified"))
             {
                 string lastModified = response.GetHeaderValue("Last-Modified");
                 ...
             }
             </code>
             </example>
            
             <param name="header">The HTTP response header to look for.</param>
             
             <returns>The value of the header, or an empty string if the header does not exist.</returns>
             
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Web.Response.GetHeaderValue(System.String,System.Int32)">
             <summary>
             Gets the value of the <i>n<sup>th</sup></i> instance of an HTTP response header
             contained in this Response.
             </summary>
             
             <example>
             The following example demonstrates getting the value of the second <c>"Set-Cookie"</c> header.
             <code language="cs">
             if (response.ContainsHeader("Set-Cookie")) 
             { 
                 // Get the value of the 2nd Set-Cookie header in the response
                 string lastModified = response.GetHeaderValue("Set-Cookie", 1);
                 ... 
             } 
             </code>
             </example>
            
             <param name="header">The HTTP response header to look for.</param>
             <param name="index">The zero-based index of the response header to look for.</param>
             
             <returns>The value of the header, or an empty string if the header does not exist.</returns>
             
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Response.GetAnchor(System.Int32,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Gets the <i>n<sup>th</sup></i> anchor in this Response.
             </summary>
            
             <param name="n">The zero-based index of the anchor to find.</param>
             <param name="failAction">The action to take in the case that no anchor could be found.</param>
             
             <returns>The <i>n<sup>th</sup></i> anchor in this Response.</returns>
        </member>
        <member name="M:Facilita.Web.Response.ExtractForm(System.String)">
             <summary>
             Extracts an HTML <see cref="T:Facilita.Web.Form"/> with the specified <paramref name="formName"/> from the response content.
             </summary>
             
             <remarks>
             The usual reason for extracting a form is because some of the data on the
             form is needed in a subsequent request.
             </remarks>
             
             <example>
             The following example demonstrates extracting a Form from a Response,
             changing the Form values and sending it back as another Request.
             <code language="cs">
             Response response1 = request1.Send();
             // Find the loginForm in the response, and store it in a variable
             Form loginForm = response1.ExtractForm("loginForm");
             
             ...
             
             // Create a POST request that will send the modified loginForm back to the server
             Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
             
             // Fill in the form by specifying a username/password 
             loginForm.GetInputElement("username").Value = "Bob Jones";
             loginForm.GetInputElement("password").Value = "Pa55word";
             
             // Attach the form to the request and send it to the server
             request2.SetMessageBody(loginForm);
             Response response2 = request2.Send();
             </code>
             </example>
            
             <param name="formName">The name of the Form to look for in the response.</param>
             
             <returns>A Form with the specified <paramref name="formName"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Response.ExtractForm(System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts an HTML <see cref="T:Facilita.Web.Form"/> with the specified <paramref name="formName"/> from the response content,
             and take the specified <paramref name="failAction"/> if no matching form can be found.
             </summary>
             
             <remarks>
             The usual reason for extracting a form is because some of the data on the
             form is needed in a subsequent request.
             </remarks>
             
             <example>
             The following example demonstrates extracting a Form from a Response,
             changing the Form values and sending it back as another Request.
             If the Form cannot be found in <c>response1</c> then a warning will be
             issued in the Virtual User event log.
             <code language="cs">
             Response response1 = request1.Send();
             // Find the loginForm in the response, and store it in a variable
             Form loginForm = response1.ExtractForm("loginForm", ActionType.ACT_WARNING);
             
             ...
             
             // Create a POST request that will send the modified loginForm back to the server
             Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
             
             // Fill in the form by specifying a username/password 
             loginForm.GetInputElement("username").Value = "Bob Jones";
             loginForm.GetInputElement("password").Value = "Pa55word";
             
             // Attach the form to the request and send it to the server
             request2.SetMessageBody(loginForm);
             Response response2 = request2.Send();
             </code>
             </example>
            
             <param name="formName">The name of the Form to look for in the response.</param>
             <param name="failAction">The action to take if no matching form can be found.</param>
             
             <returns>A Form with the specified <paramref name="formName"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Response.ExtractForm(System.Int32)">
             <summary>
             Extracts the <i>n<sup>th</sup></i> HTML <see cref="T:Facilita.Web.Form"/> from the response content.
             </summary>
             
             <remarks>
             The usual reason for extracting a form is because some of the data on the
             form is needed in a subsequent request.
             </remarks>
             
             <example>
             The following example demonstrates extracting a Form from a Response,
             changing the Form values and sending it back as another Request.
             <code language="cs">
             Response response1 = request1.Send();
             // Find the first form in the response, and store it in a variable
             Form loginForm = response1.ExtractForm(0);
             
             ...
             
             // Create a POST request that will send the modified loginForm back to the server
             Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
             
             // Fill in the form by specifying a username/password 
             loginForm.GetInputElement("username").Value = "Bob Jones";
             loginForm.GetInputElement("password").Value = "Pa55word";
             
             // Attach the form to the request and send it to the server
             request2.SetMessageBody(loginForm);
             Response response2 = request2.Send();
             </code>
             </example>
            
             <param name="formIndex">The zero-based index of the Form to look for in the response.</param>
             
             <returns>The <i>n<sup>th</sup></i> Form in the response.</returns>
        </member>
        <member name="M:Facilita.Web.Response.ExtractForm(System.Int32,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts the <i>n<sup>th</sup></i> HTML <see cref="T:Facilita.Web.Form"/> from the response content,
             and take the specified <paramref name="failAction"/> if no matching form can be found.	
             </summary>
             
             <remarks>
             The usual reason for extracting a form is because some of the data on the
             form is needed in a subsequent request.
             </remarks>
             
             <example>
             The following example demonstrates extracting a Form from a Response,
             changing the Form values and sending it back as another Request.
             If the Form cannot be found in <c>response1</c> then a warning will be
             issued in the Virtual User event log.
             <code language="cs">
             Response response1 = request1.Send();
             // Find the first form in the response, and store it in a variable
             Form loginForm = response1.ExtractForm(0, ActionType.ACT_WARNING);
             
             ...
             
             // Create a POST request that will send the modified loginForm back to the server
             Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
             
             // Fill in the form by specifying a username/password 
             loginForm.GetInputElement("username").Value = "Bob Jones";
             loginForm.GetInputElement("password").Value = "Pa55word";
             
             // Attach the form to the request and send it to the server
             request2.SetMessageBody(loginForm);
             Response response2 = request2.Send();
             </code>
             </example>
            
             <param name="formIndex">The zero-based index of the Form to look for in the response.</param>
             <param name="failAction">The action to take if no matching form can be found.</param>
             
             <returns>The <i>n<sup>th</sup></i> Form in the response.</returns>
        </member>
        <member name="M:Facilita.Web.Response.VerifyTitle(System.String)">
             <summary>
             Verifies that the title of this Response page matches the specified <paramref name="title"/>.
             </summary>
             
             <remarks>
             The title of a Response object is extracted from between the
             <c><![CDATA[<title></title>]]></c> tags in the HTML page content. This method is a
             simple way to check that a Response object returned from 
             <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/> methods
             contains the page that you are expecting it to.
             <para>
             <note type="note">If the method returns <b>false</b>, likely causes may include a dropped
             network connection or an error page returned by the server.</note>
             </para>
             <para>
             When a script is generated from a trace, calls to VerifyTitle() are
             inserted after every <see cref="M:Facilita.Web.Request.Send"/> method call and the page titles from
             the recorded responses are automatically inserted as parameters.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates checking the title of a HTML page response.
             <code language="cs">
             Response response = request.Send(); 
             if (!response.VerifyTitle("Login successful")) 
             {
                 // Login failed - we didn't get the page title we expected 
                 NextIteration(); 
             }
             </code>
             </example>
            
             <param name="title">The title that this Response object is expected to contain.</param>
             
             <returns><b>true</b> if the title of this Response object matches the specified <paramref name="title"/>; otherwise, <b>false</b>.</returns>
             
             <seealso cref="P:Facilita.Web.Response.Title"/>
             <seealso cref="P:Facilita.Web.Response.HasTitle"/>
        </member>
        <member name="M:Facilita.Web.Response.VerifyTitle(System.String,Facilita.Fc.Runtime.ActionType)">
            <summary>
            Verifies that the title of this Response page matches the specified <paramref name="title"/>,
            and takes the specified <paramref name="action"/> if it does not.
            </summary>
            
            <remarks>
            The title of a Response object is extracted from between the
            <c><![CDATA[<title></title>]]></c> tags in the HTML page content. This method is a
            simple way to check that a Response object returned from 
            <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/> methods
            contains the page that you are expecting it to.
            <para>
            <note type="note">If the method returns <b>false</b>, likely causes may include a dropped
            network connection or an error page returned by the server.</note>
            </para>
            <para>
            When a script is generated from a trace, calls to VerifyTitle() are
            inserted after every <see cref="M:Facilita.Web.Request.Send"/> method call and the page titles from
            the recorded responses are automatically inserted as parameters.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates checking the title of a HTML page response,
            moving to the next iteration if the title isn't what's expected.
            <code language="cs">
            Response response = request.Send(); 
            // Check the title, and move to the next iteration if we detect that the login was unsuccessful
            response.VerifyTitle("Login successful", ActionType.ACT_NEXT_ITERATION);
            </code>
            </example>
            
            <param name="title">The title that this Response object is expected to contain.</param>
            <param name="action">The action to take if the expected <paramref name="title"/> is not found.</param>
            
            <returns><b>true</b> if the title of this Response object matches the specified <paramref name="title"/>; otherwise, <b>false</b>.</returns>
            
            <seealso cref="P:Facilita.Web.Response.Title"/>
            <seealso cref="P:Facilita.Web.Response.HasTitle"/>
        </member>
        <member name="M:Facilita.Web.Response.VerifyResult(Facilita.Web.HttpStatus)">
            <summary>
            Verify that the response code of this Response matches the specifed <paramref name="expectedResult"/>
            </summary>
            
            <remarks>
            When a script is generated from a trace, calls to VerifyResult() are
            inserted after every <see cref="M:Facilita.Web.Request.Send"/> method call and the result from
            the recorded responses are automatically inserted as parameters.
            </remarks>
            
            <param name="expectedResult">The HTTP status code that this response is expected to have.</param>
            
            <returns><b>true</b> if the HTTP status of this Response object matches the <paramref name="expectedResult"/>; otherwise, <b>false</b>.</returns>
            
            <seealso cref="P:Facilita.Web.Response.Result"/>
            
        </member>
        <member name="M:Facilita.Web.Response.VerifyResult(Facilita.Web.HttpStatus,Facilita.Fc.Runtime.ActionType)">
            <summary>
            Verify that the response code of this Response matches the specifed <paramref name="expectedResult"/>,
            and takes the specified <paramref name="action"/> if it does not.
            </summary>
            
            <remarks>
            When a script is generated from a trace, calls to VerifyResult() are
            inserted after every <see cref="M:Facilita.Web.Request.Send"/> method call and the result from
            the recorded responses are automatically inserted as parameters.
            </remarks>
            
            <param name="expectedResult">The HTTP status code that this response is expected to have.</param>
            <param name="action">The action to take if the HTTP status does not match the <paramref name="expectedResult"/>.</param>
            
            <returns><b>true</b> if the HTTP status of this Response object matches the <paramref name="expectedResult"/>; otherwise, <b>false</b>.</returns>
            
            <seealso cref="P:Facilita.Web.Response.Result"/>
            
        </member>
        <member name="M:Facilita.Web.Response.Find(Facilita.Native.ExtractionCursor,System.String,System.Boolean)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             if (!response.Find(cursor, "page loaded successfully", false))
             {
                 Warn("Page did not load successfully: " + cursor.ErrorMessage);
                 NextIteration();
             }
             
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Find(Facilita.Native.ExtractionCursor,System.String)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             if (!response.Find(cursor, "page loaded successfully"))
             {
                 Warn("Page did not load successfully: " + cursor.ErrorMessage);
                 NextIteration();
             }
             
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Rfind(Facilita.Native.ExtractionCursor,System.String,System.Boolean)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             starting from the end of the content,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             if (!response.Rfind(cursor, "page loaded successfully", false))
             {
                 Warn("Page did not load successfully: " + cursor.ErrorMessage);
                 NextIteration();
             }
             
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Rfind(Facilita.Native.ExtractionCursor,System.String)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             starting from the end of the content.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed. 
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             if (!response.Rfind(cursor, "page loaded successfully"))
             {
                 Warn("Page did not load successfully: " + cursor.ErrorMessage);
                 NextIteration();
             }
             
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text, defaulting to "Joe Jones" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"",
                                     "Joe Jones",
                                     true);
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed. 
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text, defaulting to "Joe Jones" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"",
                                     "Joe Jones");
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text, defaulting to "00000" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"",
                                     "00000",
                                     true);
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text, defaulting to "00000" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"",
                                     "00000");
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"",
                                     true);
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed. 
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"");
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"",
                                     true);
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"");
             
             if (cursor.Succeeded)
             {
                 WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             specifying whether the search will be case-sensitive,
             and specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response, and
             causing a warning to appear in the Virtual User event log if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"",
                                     ActionType.ACT_WARNING,
                                     true);
             
             WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response, and
             causing a warning to appear in the Virtual User event log if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     cursor,
                                     "value=\"",
                                     "\"",
                                     ActionType.ACT_WARNING);
             
             WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             specifying whether the search will be case-sensitive,
             and what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response, and causing a warning to appear in the Virtual User event log 
             if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"",
                                     ActionType.ACT_WARNING,
                                     true);
             
             WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.Collections.Generic.List{System.String},System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed. 
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response, and causing a warning to appear in the Virtual User event log 
             if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     cursor,
                                     before,
                                     "\"",
                                     ActionType.ACT_WARNING);
             
             WriteMessage(string.Format("The value {0} was found at position {1}", extractedText, cursor.Index));
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text, defaulting to "Joe Jones" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"",
                                     "Joe Jones",
                                     true);
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text, defaulting to "Joe Jones" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"",
                                     "Joe Jones");
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text, defaulting to "00000" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"",
                                     "00000",
                                     true);
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning the <paramref name="defaultValue"/> if they cannot be found.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text, defaulting to "00000" if the value cannot be found
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"",
                                     "00000");
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="defaultValue">The value to return if either the <paramref name="before"/> or <paramref name="after"/> text cannot be found.</param>
             
             <returns>The extracted text, or <paramref name="defaultValue"/> if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"",
                                     true);
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"");
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"",
                                     true);
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"");
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             specifying whether the search will be case-sensitive,
             and specifying what action to take in case of failure.
             </summary>
             
             <example>
             The following example demonstrates extracting text from a HTML Response, and
             causing a warning to appear in the Virtual User event log if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"",
                                     ActionType.ACT_WARNING,
                                     true);
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.String,System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             </remarks>
             
             <example>
             The following example demonstrates extracting text from a HTML Response, and
             causing a warning to appear in the Virtual User event log if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // extract the value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             string extractedText = response.Extract(
                                     "value=\"",
                                     "\"",
                                     ActionType.ACT_WARNING);
             </code>
             </example>
            
             <param name="before">This text is searched for in the response content, and the returned string starts immediately after this text occurs in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             specifying whether the search will be case-sensitive,
             and what action to take in case of failure.
             </summary>
             
             <remarks>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response, and causing a warning to appear in the Virtual User event log 
             if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"",
                                     ActionType.ACT_WARNING,
                                     true);
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Extract(System.Collections.Generic.List{System.String},System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Extracts text from the response content - everything between (but not including)
             the specified list of <paramref name="before"/> and <paramref name="after"/> string objects -
             returning an empty string if they cannot be found,
             and specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             <para>
             Supplying a List&lt;string&gt; of <paramref name="before"/> values enables you to express more
             complicated extraction patterns. eggPlant Performance searches for the first string
             in the list, and searches for the second string after the position at which
             the first string was found. This continues until the final string
             is matched, after which the extracted response content is returned until <paramref name="after"/>
             is matched. See the example below, in which a known unique name (<c>f_custid</c>)
             is used to narrow the search.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates using a list of strings to narrow down the search for text to extract
             from a HTML Response, and causing a warning to appear in the Virtual User event log 
             if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // extract the f_custid value from the HTML text
             // <![CDATA[<input type="text" name="f_customer" size="32" maxlength="32" value="Joe Smith">]]>
             // <![CDATA[<input type="text" name="f_custid" size="10" maxlength="10" value="12345">]]>
             // <![CDATA[<input type="text" name="f_account" size="10" maxlength="10" value="9876543">]]>
             
             List&lt;string&gt; before = new List&lt;string&gt;();
             before.Add("f_custid");
             before.Add("value=\"");
             
             string extractedText = response.Extract(
                                     before,
                                     "\"",
                                     ActionType.ACT_WARNING);
             </code>
             </example>
            
             <param name="before">Each string in this List is searched for sequentially in the response content, and the returned string starts immediately after all the string objects have been matched in the content.</param>
             <param name="after">This text is searched for in the response content after the <paramref name="before"/> text has been found, and the returned string ends immediately before this text occurs in the content.</param>
             <param name="failAction">The action to take if the text cannot be found.</param>
             
             <returns>The extracted text, or an empty string if the extract failed.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.ExtractForms">
             <summary>
             Extracts all the HTML <see cref="T:Facilita.Web.Form"/> objects from the response content.
             </summary>
             
             <remarks>
             The usual reason for extracting a form is because some of the data on the
             form is needed in a subsequent request.
             </remarks>
             
             <example>
             The following example demonstrates extracting multiple forms from a HTML Response.
             <code language="cs">
             Response response1 = request1.Send();
             // Find a form in the response, and store it in a variable
             List&lt;Form&gt; forms = response1.ExtractForms();
             
             // This is a dynamic page, sometimes the login form is the second on the page
             Form loginForm = null;
             if (forms.Count == 2)
             {
                 loginForm = forms[1];
             }
             else
             {
                 loginForm = forms[0];
             }
             
             ...
             
             // Create a POST request that will send the modified loginForm back to the server
             Request request2 = WebBrowser.CreateRequest(HttpMethod.POST, url2, 2);
             
             // Fill in the form by specifying a username/password 
             loginForm.GetInputElement("username").Value = "Bob Jones";
             loginForm.GetInputElement("password").Value = "Pa55word";
             
             // Attach the form to the request and send it to the server
             request2.SetMessageBody(loginForm);
             Response response2 = request2.Send();
             </code>
             </example>
            
             <returns>All the HTML <see cref="T:Facilita.Web.Form"/> objects in the response.</returns>
        </member>
        <member name="M:Facilita.Web.Response.ExtractRegExp(Facilita.Native.ExtractionCursor,System.String,System.Boolean)">
             <summary>
             Extracts multiple string objects from the response content,
             wherever the specified regular expression matches,
             and specifying whether the search will be case-sensitive.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates extracting HTML comments from an HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // write out the HTML comment lines in the current web page
             RegExpMatchList matches = response.ExtractRegExp(
                                     cursor,
                                     <![CDATA["<!--.*?-->"]]>,
                                     true);
             
             for (int i = 0; i &lt; matches.Count; i++)
             {
                 WriteMessage(matches[i].Match);
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="regExp">The regular expression to match.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>A <see cref="T:Facilita.Native.RegExpMatchList"/> containing the list of matches.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.ExtractRegExp(Facilita.Native.ExtractionCursor,System.String)">
             <summary>
             Extracts multiple string objects from the response content,
             wherever the specified regular expression matches.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates extracting HTML comments from an HTML Response.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // write out the HTML comment lines in the current web page
             RegExpMatchList matches = response.ExtractRegExp(
                                     cursor,
                                     <![CDATA["<!--.*?-->"]]>);
             
             for (int i = 0; i &lt; matches.Count; i++)
             {
                 WriteMessage(matches[i].Match);
             }
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="regExp">The regular expression to match.</param>
             
             <returns>A <see cref="T:Facilita.Native.RegExpMatchList"/> containing the list of matches.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.VerifyContains(System.String,System.Boolean)">
             <summary>
             Determines whether the content of this Response contains the specified <paramref name="text"/>,
             specifying whether the search will be case-sensitive.
             </summary>
             
             <example>
             The following example demonstrates verifying that a string appears within the content
             of an HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // Check that the login succeeded.
             if (!response.VerifyContains("Login successful", false))
             {
                 Error("Login failed");
                 NextIteration();
             }
             </code>
             </example>
            
             <param name="text">The text to look for.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the text was found; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.VerifyContains(System.String)">
             <summary>
             Determines whether the content of this Response contains the specified <paramref name="text"/>.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             </remarks>
             
             <example>
             The following example demonstrates verifying that a string appears within the content
             of an HTML Response.
             <code language="cs">
             Response response = request.Send();
             
             // Check that the login succeeded.
             if (!response.VerifyContains("Login successful"))
             {
                 Error("Login failed");
                 NextIteration();
             }
             </code>
             </example>
            
             <param name="text">The text to look for.</param>
             
             <returns><b>true</b> if the text was found; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Find(Facilita.Native.ExtractionCursor,System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             specifying whether the search will be case-sensitive,
             and what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response,
             moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // If the text below cannot be found in the the response, then move onto the next iteration
             response.Find(cursor, "page loaded successfully", ActionType.ACT_NEXT_ITERATION, false);
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Find(Facilita.Native.ExtractionCursor,System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response,
             moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // If the text below cannot be found in the the response, then move onto the next iteration
             response.Find(cursor, "page loaded successfully", ActionType.ACT_NEXT_ITERATION);
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Rfind(Facilita.Native.ExtractionCursor,System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             starting from the end of the content,
             specifying whether the search will be case-sensitive,
             and what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed.
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response,
             moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // If the text cannot be found, move onto the next iteration 
             response.Rfind(cursor, "page loaded successfully", ActionType.ACT_NEXT_ITERATION, false);
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.Rfind(Facilita.Native.ExtractionCursor,System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Finds the specified <paramref name="text"/> within this Response,
             starting from the end of the content,
             specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             Information about the success/failure of this method will be stored in
             the <see cref="T:Facilita.Native.ExtractionCursor"/> object passed. 
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates finding text within a HTML Response,
             moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             ExtractionCursor cursor = new ExtractionCursor();
             
             // If the text cannot be found, move onto the next iteration 
             response.Rfind(cursor, "page loaded successfully", ActionType.ACT_NEXT_ITERATION);
             WriteMessage(string.Format("Text found at position {0}", cursor.Index)); 
             </code>
             </example>
            
             <param name="cursor">An <see cref="T:Facilita.Native.ExtractionCursor"/> object to store the success/failure of the action, and the index in the response at which the match was found.</param>
             <param name="text">The text to search for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             
             <returns><b>true</b> if the specified <paramref name="text"/> was found in this Response; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.VerifyContains(System.String,Facilita.Fc.Runtime.ActionType,System.Boolean)">
             <summary>
             Determines whether the content of this Response contains the specified <paramref name="text"/>,
             specifying whether the search will be case-sensitive,
             and what action to take in case of failure.
             </summary>
             
             <example>
             The following example demonstrates verifying that a string appears within the content
             of an HTML Response, moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // Check that the login succeeded, and move onto the next iteration if it did not.
             response.VerifyContains("Login successful", ActionType.ACT_NEXT_ITERATION, false);
             </code>
             </example>
            
             <param name="text">The text to look for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns><b>true</b> if the text was found; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.VerifyContains(System.String,Facilita.Fc.Runtime.ActionType)">
             <summary>
             Determines whether the content of this Response contains the specified <paramref name="text"/>,
             specifying what action to take in case of failure.
             </summary>
             
             <remarks>
             <note type="note">The search is case-sensitive.</note>
             </remarks>
             
             <example>
             The following example demonstrates verifying that a string appears within the content
             of an HTML Response, moving to the next iteration if the text could not be found.
             <code language="cs">
             Response response = request.Send();
             
             // Check that the login succeeded, and move onto the next iteration if it did not.
             response.VerifyContains("Login successful", ActionType.ACT_NEXT_ITERATION);
             </code>
             </example>
            
             <param name="text">The text to look for.</param>
             <param name="failAction">The action to take if <paramref name="text"/> cannot be found.</param>
             
             <returns><b>true</b> if the text was found; otherwise, <b>false</b>.</returns>
             
        </member>
        <member name="M:Facilita.Web.Response.ExtractList(System.String,System.String,System.Boolean,System.Int32)">
             <summary>
             Extracts a list of items from this Response,
             specifying whether the search should be case-sensitive,
             and the maximum number of items to extract.
             </summary>
             
             <remarks>
             A search is made for multiple occurrences of the <paramref name="before"/> and <paramref name="after"/> markers. 
             The text between each occurrence of the markers is extracted and appended to the list.
             </remarks>
             
             <example>
             The following example demonstrates extracting multiple strings from a HTML Response.
             <code language="cs">
             // The response contains the following text within its body
             // <![CDATA[<select>]]>
             //   <![CDATA[<option value="volvo">Volvo</option>]]>
             //   <![CDATA[<option value="saab">Saab</option>]]>
             //   <![CDATA[<option value="mercedes">Mercedes</option>]]>
             //   <![CDATA[<option value="audi">Audi</option>]]>
             // <![CDATA[</select>]]>
             
             // Searching from the beginning of the web page extract at most 10 car model items
             List&lt;string&gt; matchedstrings = response.ExtractList("<![CDATA[<option value=\""]]>, "\"&gt;", true, 10);
             // contents of matchedstrings = ( volvo, saab, mercedes, audi )
             </code>
             </example>
            
             <param name="before">A string before an item to be extracted.</param>
             <param name="after">A string after an item to be extracted.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             <param name="maxItems">The maximum number of items to extract.</param>
             
             <returns>A list containing the extracted string objects.</returns>
             
             <seealso cref="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ExtractRegExp(Facilita.Native.ExtractionCursor,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Response.ExtractList(System.String,System.String,System.Boolean)">
             <summary>
             Extracts a list of items from this Response,
             specifying whether the search should be case-sensitive.
             </summary>
             
             <remarks>
             A search is made for multiple occurrences of the <paramref name="before"/> and <paramref name="after"/> markers. 
             The text between each occurrence of the markers is extracted and appended to the list.
             </remarks>
             
             <example>
             The following example demonstrates extracting multiple strings from a HTML Response.
             <code language="cs">
             // The response contains the following text within its body
             // <![CDATA[<select>]]>
             //   <![CDATA[<option value="volvo">Volvo</option>]]>
             //   <![CDATA[<option value="saab">Saab</option>]]>
             //   <![CDATA[<option value="mercedes">Mercedes</option>]]>
             //   <![CDATA[<option value="audi">Audi</option>]]>
             // <![CDATA[</select>]]>
             
             // Searching from the beginning of the web page extract all car model items
             List&lt;string&gt; matchedstrings = response.ExtractList("<![CDATA[<option value=\"]]>", "\"&gt;", true);
             // contents of matchedstrings = ( volvo, saab, mercedes, audi )
             </code>
             </example>
            
             <param name="before">A string occurring immediately before an item to be extracted.</param>
             <param name="after">A string occurring immediately after an item to be extracted.</param>
             <param name="caseSensitive"><b>true</b> if the search should be case-sensitive.</param>
             
             <returns>A list containing the extracted string objects.</returns>
             
             <seealso cref="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ExtractRegExp(Facilita.Native.ExtractionCursor,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Response.ExtractList(System.String,System.String)">
             <summary>
             Extracts a list of items from this Response.
             </summary>
             
             <remarks>
             A search is made for multiple occurrences of the <paramref name="before"/> and <paramref name="after"/> markers. 
             The text between each occurrence of the markers is extracted and appended to the list.
             <para>
             <note type="note">The search is case-sensitive.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates extracting multiple strings from a HTML Response.
             <code language="cs">
             // The response contains the following text within its body
             // <![CDATA[<select>]]>
             //   <![CDATA[<option value="volvo">Volvo</option>]]>
             //   <![CDATA[<option value="saab">Saab</option>]]>
             //   <![CDATA[<option value="mercedes">Mercedes</option>]]>
             //   <![CDATA[<option value="audi">Audi</option>]]>
             // <![CDATA[</select>]]>
             
             // Searching from the beginning of the web page extract all car model items
             List&lt;string&gt; matchedstrings = response.ExtractList("<![CDATA[<option value=\""]]>, "\"&gt;");
             // contents of matchedstrings = ( volvo, saab, mercedes, audi )
             </code>
             </example>
            
             <param name="before">A string occurring immediately before an item to be extracted.</param>
             <param name="after">A string occurring immediately after an item to be extracted.</param>
             
             <returns>A list containing the extracted string objects.</returns>
             
             <seealso cref="M:Facilita.Web.Response.Extract(Facilita.Native.ExtractionCursor,System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ExtractRegExp(Facilita.Native.ExtractionCursor,System.String)"/>
        </member>
        <member name="M:Facilita.Web.Response.SetCharEncoding(System.String)">
             <summary>
             Sets the character encoding that is used to decode the data contained
             in this Response.
             </summary>
             
             <remarks>
             Usually, the character encoding will be determined automatically by: 
             <ul>
             <li>looking for a charset in the response headers (e.g. <c>Content-Type: text/html; charset=utf-8</c>)</li>
             <li>looking for a meta-tag in the HTML (e.g. <c><![CDATA[<meta http-equiv="Content-Type" content="text/html; charset=utf-8">]]></c></li>
             <li>looking for a Byte Order Mark at the beginning of the response data</li>
             <li>defaulting to ISO-8859-1 (latin-1) if none of the above could be found</li>
             </ul>
             <para>
             Therefore, it is not usually necessary to call this method explicitly. However, if some of
             the information above is incorrect/missing, then you can override the encoding by calling this method.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates setting the character encoding.
             <code language="cs">
             Response response = request.Send(); 
             
             // Use the utf-8 character set to interpret the data in this response
             response.SetCharEncoding("utf-8"); 
             
             // The utf-8 character set will be used to decode the HTML and determine what the title is 
             response.VerifyTitle("我是中国人", ActionType.ACT_NEXT_ITERATION);
             </code>
             </example>
            
             <param name="charEncoding">The character encoding that should be used to decode the data in this Response.</param>
             
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
             <seealso cref="M:Facilita.Web.Response.ResetCharEncoding"/>
        </member>
        <member name="M:Facilita.Web.Response.ResetCharEncoding">
             <summary>
             Resets the character encoding that is used to decode the data contained
             in this Response. This will force the character encoding to be re-calculated, using
             the methods described in <see cref="M:Facilita.Web.Response.SetCharEncoding(System.String)"/>.
             </summary>
            
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
             <seealso cref="M:Facilita.Web.Response.SetCharEncoding(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.Url">
             <summary>
             Gets the <see cref="T:Facilita.Web.Url"/> that was used in the corresponding <see cref="T:Facilita.Web.Request"/>.
             </summary>
             
             <example>
             The following example demonstrates getting the Url of a Response.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
             Response response1 = request1.Send();
             
             Url url2 = response1.Url; // url2 == url1
             </code>
             </example>
            
             <value>The Url used in the corresponding Request.</value>
             
             <seealso cref="P:Facilita.Web.Response.UrlString"/>
        </member>
        <member name="P:Facilita.Web.Response.RedirectedFrom">
             <summary>
             Gets the Response from which this Response has been redirected.
             </summary>
             
             <remarks>
             If a request returns a <i>redirect response code</i> (e.g. <c>301</c> or <c>302</c>), then
             eggPlant Performance will automatically follow the redirect, and the Response
             object returned from <see cref="M:Facilita.Web.Request.Send"/> will be the final destination
             (assuming <see cref="P:Facilita.Web.Request.FollowRedirects"/> has been set to <b>true</b>). In
             this situation, this method can be used to examine the earlier responses
             in the redirect chain.
             <para>
             If the request was not redirected, then this method returns <b>null</b>.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates finding where a Response was redirected from.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
             Response response1 = request1.Send();
             
             if (response1.WasRedirected)
             {
                 Response redirectedResponse = response1.RedirectedFrom;
                 ...
             }
             </code>
             </example>
            
             <value>The Response which this Response has been redirected from, or <b>null</b> if no redirection occurred.</value>
             
             <seealso cref="P:Facilita.Web.Response.WasRedirected"/>
             <seealso cref="P:Facilita.Web.Request.FollowRedirects"/>
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultFollowRedirects"/>
        </member>
        <member name="P:Facilita.Web.Response.CharEncoding">
             <summary>
             Gets or sets the character encoding that is used to decode the data contained
             in this Response, for example <c>"UTF-8"</c>.
             </summary>
             
             <remarks>
             Usually, the character encoding will be determined
             automatically by: 
             <ul>
             <li>looking for a charset in the response headers (e.g. <c>Content-Type: text/html; charset=utf-8</c>)</li>
             <li>looking for a meta-tag in the HTML (e.g. <c><![CDATA[<meta http-equiv="Content-Type" content="text/html; charset=utf-8">]]></c></li>
             <li>looking for a Byte Order Mark at the beginning of the response data</li>
             <li>defaulting to ISO-8859-1 (latin-1) if none of the above could be found</li>
             </ul>
             <para>
             Therefore, it is not usually necessary to call this method explicitly. However, if some of
             the information above is incorrect/missing, then you can override the encoding by calling this method.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates setting the character encoding before the
             call to VerifyTitle().
             e.g.
             <code language="cs">
             Response response = request.Send(); 
             
             // Use the utf-8 character set to interpret the data in this response
             response.CharEncoding = Encoding.UTF8;
             
             // The utf-8 character set will be used to decode the HTML and determine what the title is 
             response.VerifyTitle("我是中国人", ActionType.ACT_NEXT_ITERATION);
             </code>
             </example>
             
             <value>The character encoding.</value>
             
             <seealso cref="M:Facilita.Web.Response.SetCharEncoding(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ResetCharEncoding"/>
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
             <seealso cref="M:Facilita.Web.Response.ResetCharEncoding"/>
        </member>
        <member name="P:Facilita.Web.Response.SubResponses">
             <summary>
             Gets a list of Response objects that describe HTTP responses
             to sub-requests associated with the top-level <see cref="T:Facilita.Web.Request"/> sent to the web server.
             </summary>
             
             <remarks>
             Once a server responds to a Request, eggPlant Performance will parse the HTML in the response, looking for additional resources that
             need to be downloaded (such as images, stylesheets or javascript files). These resources will be requested
             from the server. In addition, sub-requests that have been explicitly added using <see cref="M:Facilita.Web.Request.AddSubRequest(Facilita.Web.Url)"/> will also be requested from the server.
             </remarks>
            
             <value>A List of Response objects corresponding to sub-requests
             sent to the server, in the order in which the responses were received.</value>
        </member>
        <member name="P:Facilita.Web.Response.HeaderKeys">
             <summary>
             Gets a list of names of all the HTTP response headers set in this Response.
             </summary>
            
             <value>A list of names of all the HTTP response headers set in this Response.</value>
        </member>
        <member name="P:Facilita.Web.Response.RawContent">
             <summary>
             Gets the raw content of this Response. If the content is expected to be text, then
             you should use <see cref="P:Facilita.Web.Response.Content"/> instead of this property.
             </summary>
            
             <value>The content of this Response as a byte array.</value>
             
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
             <seealso cref="P:Facilita.Web.Response.Content"/>
        </member>
        <member name="P:Facilita.Web.Response.Content">
             <summary>
             Gets the content of this Response, using the
             current encoding (as defined by <see cref="P:Facilita.Web.Response.CharEncoding"/>) to decode the data.
             </summary>
             
             <example>
             The following example demonstrates getting the Response content.
             <code language="cs">
             // Interpret the content of the Response object as a utf-8 string  
             response.CharEncoding = Encoding.UTF8;
             string decodedUtf8Content = response.Content;
             </code>
             </example>
            
             <value>The decoded content of this Response.</value>
             
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
             <seealso cref="P:Facilita.Web.Response.RawContent"/>
             <seealso cref="P:Facilita.Web.Response.ContentAsXml"/>
        </member>
        <member name="P:Facilita.Web.Response.ContentAsXml">
             <summary>
             Gets an XML DOM representation of this Response.
             </summary>
             
             <example>
             The following example demonstrates getting the values of <c>&lt;option&gt;</c> elements from the XML content of a Response.
             The code uses <a href="http://www.w3.org/TR/xpath/">XPath</a> to retrieve <c>&lt;option&gt;</c> elements from the <c>myForm</c> form and <c>mySelect</c> select element in the HTML.
             <para>
             The content of the HTTP Response object:
             </para>
             <code language="none">
             <![CDATA[<html>]]><br/>
                 <![CDATA[<body>]]><br/>
                     <![CDATA[<form name="myForm">]]><br/>
                         <![CDATA[Select:]]><br/>
                         <![CDATA[<select name="mySelect">]]><br/>
                             <![CDATA[<option value="1">1</option>]]><br/>
                             <![CDATA[<option value="2">2</option>]]><br/>
                         <![CDATA[</select>]]><br/>
                     <![CDATA[</form>]]><br/>
                 <![CDATA[</body>]]><br/>
             <![CDATA[</html>]]>
             </code>
             <code language="cs">
             System.Xml.XmlNodeList optionList = response.ContentAsXml.SelectNodes("//form[@name='myForm']/select[@name='mySelect']/option");
            
             // This outputs "1", "2"
             foreach (System.Xml.XmlNode optionNode in optionList)
             {
                 WriteMessage(optionNode.Attributes["value"].InnerText);
             }
             </code>
             </example>
            
             <value>An XML DOM representation of this Response.</value>
             
             <exception cref="T:System.Exception">Unable to represent this Response as an XML document, possibly because it is not valid XML.</exception>
             
             <seealso cref="P:Facilita.Web.Response.Content"/>
             <seealso cref="P:Facilita.Web.Response.RawContent"/>
        </member>
        <member name="P:Facilita.Web.Response.Referer">
             <summary>
             Gets the value of the <c>"Referer"</c> HTTP response header.
             </summary>
            
             <value>The value of the <c>"Referer"</c> HTTP response header, or an empty string if no such response header exists.</value>
             
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
             <seealso cref="P:Facilita.Web.Response.HasReferer"/>
        </member>
        <member name="P:Facilita.Web.Response.UserAgent">
             <summary>
             Gets the value of the <c>"User-Agent"</c> HTTP response header.
             </summary>
            
             <value>The value of the <c>"User-Agent"</c> HTTP response header, or an empty string if no such response header exists.</value>
             
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.ResultString">
             <summary>
             Gets the HTTP result returned by the server, e.g. <c>HTTP/1.1 200 OK</c>
             </summary>
            
             <value>The HTTP result.</value>
             
             <seealso cref="P:Facilita.Web.Response.Result"/>
        </member>
        <member name="P:Facilita.Web.Response.ContentType">
             <summary>
             Gets the value of the <c>"Content-Type"</c> HTTP response header.
             </summary>
            
             <value>The value of the <c>"Content-Type"</c> HTTP response header, or an empty string if no such response header exists.</value>
             
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
             <seealso cref="P:Facilita.Web.Response.CharSet"/>
        </member>
        <member name="P:Facilita.Web.Response.MessageBody">
             <summary>
             Gets the body of the message from the corresponding <see cref="T:Facilita.Web.Request"/>.
             </summary>
             
             <remarks>
             For example, if this object is a response to a POST request, then this
             method will return the POST data that was sent.
             </remarks>
             
             <example>
             The following example demonstrates getting the POST data message body from a Response
             <code language="cs">
             request.SetMessageBody("my post data");
             Response response = request.Send();
             string postData = response.MessageBody; // postData == "my post data"
             </code>
             </example>
            
             <value>The body of the message.</value>
             
             <seealso cref="M:Facilita.Web.Request.SetMessageBody(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.Result">
            <summary>
            Gets the HTTP status code received from the server when this Response was
            served.
            </summary>
            
            <remarks>
            The most common status code is <c>200 OK</c>, although other codes
            between <c>200</c> and <c>299</c> also indicate success.
            </remarks>
            
            <example>
            The following example demonstrates checking whether the HTTP status code indicates
            that the page was retrieved successfully.
            <code language="cs">
            if (!response.Result.IsSuccess)
            {
                Error(response.ResultString);
            }
            </code>
            </example>
            
            <value>The HTTP status code received from the server.</value>
        </member>
        <member name="P:Facilita.Web.Response.Method">
             <summary>
             Gets the <see cref="T:Facilita.Web.HttpMethod"/> that was used to send the <see cref="T:Facilita.Web.Request"/>.
             </summary>
             
             <example>
             The following example demonstrates getting the HTTP method.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
             Response response1 = request1.Send();
             
             HttpMethod method = response1.Method; // method will be HttpMethod.GET
             </code>
             </example>
            
             <value>The <see cref="T:Facilita.Web.HttpMethod"/> that was used in the Request.</value>
        </member>
        <member name="P:Facilita.Web.Response.SendTime">
             <summary>
             Gets the time at which the request was sent to the server 
             (measured in milliseconds since the start of the test).
             </summary>
            
             <value>The time at which the request was sent to the server, in milliseconds since the start of the test.</value>
        </member>
        <member name="P:Facilita.Web.Response.ContentLength">
             <summary>
             Gets the length in bytes of the response content.
             </summary>
             
             <remarks>
             <note type="warning">This method returns the actual length of the content, not the
             value specified by the <c>"Content-Length"</c> HTTP header. In many cases the
             values will be the same, but not always (e.g. if the content was
             compressed).</note>
             </remarks>
            
             <value>The length in bytes of the response content.</value>
             
             <seealso cref="P:Facilita.Web.Response.Content"/>
             <seealso cref="P:Facilita.Web.Response.RawContent"/>
             <seealso cref="P:Facilita.Web.Response.BytesDownloaded"/>
        </member>
        <member name="P:Facilita.Web.Response.BytesDownloaded">
            <summary>
            Gets the number of bytes downloaded from the server.
            </summary>
            
            <remarks>Note that this method returns the actual number of bytes downloaded from the server. 
            If the content was compressed then this will be less than the length of the content.</remarks>
            
            <value>the number of bytes downloaded from the server.</value>
            
            <seealso cref="P:Facilita.Web.Response.Content"/>
            <seealso cref="P:Facilita.Web.Response.RawContent"/>
            <seealso cref="P:Facilita.Web.Response.ContentLength"/>
        </member>
        <member name="P:Facilita.Web.Response.ReceiveTime">
             <summary>
             Gets the time at which the response was received from the server
             (measured in milliseconds since the start of the test).
             </summary>
            
             <value>The time at which the response was received from the server, in milliseconds since the start of the test.</value>
        </member>
        <member name="P:Facilita.Web.Response.ContentEncoding">
             <summary>
             Gets the value of the <c>"Content-Encoding"</c> HTTP response header.
             </summary>
            
             <value>The value of the <c>"Content-Encoding"</c> HTTP response header, or an empty string if no such response header exists.</value>
             
             <seealso cref="M:Facilita.Web.Response.GetHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.Response.ContainsHeader(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.HasTitle">
             <summary>
             Gets a value that indicates whether this Response contains an HTML title.
             </summary>
             
             <remarks>
             An HTML title is defined as the text between the HTML <c><![CDATA[<title>]]></c> tags.
             <para>
             e.g. in the HTML <c><![CDATA[<title>My Page Title</title>]]></c> the title is <c>My Page Title</c>
             </para>
             </remarks>
            
             <value><b>true</b> if this Response contains an HTML title; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.Response.Title"/>
             <seealso cref="M:Facilita.Web.Response.VerifyTitle(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.Title">
             <summary>
             Gets the HTML title of this Response.  Gets a value that determines whether this Response contains an HTML title.
             </summary>
             
             <remarks>
             An HTML title is defined as the text between the HTML <c><![CDATA[<title>]]></c> tags.
             <para>
             e.g. in the HTML <c><![CDATA[<title>My Page Title</title>]]></c> the title is <c>My Page Title</c>
             </para>
             <para>
             If the response does not contain HTML, or does not contain an HTML title, then this method returns an empty string. 
             The HTML is interpreted using the current character encoding (as defined by <see cref="P:Facilita.Web.Response.CharEncoding"/>).
             </para>
             </remarks>
            
             <value>The HTML title of the response, or an empty string if no title was found.</value>
             
             <seealso cref="P:Facilita.Web.Response.HasTitle"/>
             <seealso cref="M:Facilita.Web.Response.VerifyTitle(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Response.CharSet">
             <summary>
             Gets the value of the <c>"charset"</c> parameter specified in the 
             <c>"Content-Type"</c> HTTP response header.
             </summary>
             
             <example>
             The following example demonstrates the case where the <c>"Content-Type"</c> header is as follows:
             <code language="none">
             Content-Type: text/html; charset=utf-8
             </code>
             This property would have the value <c>"utf-8"</c>. If no charset is specifed, or if
             there is no <c>"Content-Type"</c> header, then the value of this property would be an empty string.
             </example>
            
             <value>The charset extracted from the <c>"Content-Type"</c> header, or an empty string if none was found.</value>
             
             <seealso cref="P:Facilita.Web.Response.ContentType"/>
             <seealso cref="P:Facilita.Web.Response.CharEncoding"/>
        </member>
        <member name="P:Facilita.Web.Response.UrlString">
             <summary>
             Gets the URL that was used in the corresponding <see cref="T:Facilita.Web.Request"/>, as a string.
             </summary>
             
             <example>
             The following example demonstrates getting the URL from the Request as a string.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
             Response response1 = request1.Send();
             
             string urlstring = response1.UrlString; // urlstring == url1.ToString()
             </code>
             </example>
            
             <value>The URL used in the corresponding Request.</value>
             
             <seealso cref="T:Facilita.Web.Url"/>
        </member>
        <member name="P:Facilita.Web.Response.HasReferer">
             <summary>
             Gets a value that indicates whether this Response contains an HTTP <c>"Referer"</c> response header.
             </summary>
            
             <value><b>true</b> if this Response contains an HTTP <c>"Referer"</c> response header; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Response.WasRedirected">
             <summary>
             Gets a value that indicates whether this Response was the result of a
             redirected request.
             </summary>
             
             <remarks>
             If the value of this property is <b>true</b>, then 
             the <see cref="P:Facilita.Web.Response.RedirectedFrom"/> property will contain
             a Response object.
             </remarks>
             
             <example>
             The following example demonstrates finding where a Response was redirected from.
             <code language="cs">
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, url1, 1);
             Response response1 = request1.Send();
             
             if (response1.WasRedirected)
             {
                 Response redirectedResponse = response1.RedirectedFrom;
                 ...
             }
             </code>
             </example>
            
             <value><b>true</b> if the request was redirected; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.Response.RedirectedFrom"/>
        </member>
        <member name="T:Facilita.Web.SelectElement">
             <summary>
             Represents an HTML select element within an HTML form.
             </summary>
             
             <remarks>
             An HTML element is everything from the start tag to the end tag.
             <para>
             A SelectElement is used to create a drop-down list.
             <see cref="T:Facilita.Web.OptionElement"/> objects are used to define the 
             available options in the list.
             </para>
             <para>
             e.g.
             <code language="none">
             <![CDATA[<select name="drink">]]><br/>
             <![CDATA[    <option value="lemonade">Lemonade</option>]]><br/>
             <![CDATA[    <option value="coke">Coke</option>]]><br/>
             <![CDATA[    <option value="pepsi">Pepsi</option>]]><br/>
             <![CDATA[    <option value="tango">Tango</option>]]><br/>
             <![CDATA[</select>]]>
             </code>
             </para>
             <para>
             When the containing <see cref="T:Facilita.Web.Form"/> is sent to the web server,
             a name/value pair will be sent which uses the name of the 
             SelectElement and the value of the currently
             selected OptionElement.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
             <seealso cref="T:Facilita.Web.OptionElement"/>
        </member>
        <member name="M:Facilita.Web.SelectElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.SelectElement.getCPtr(Facilita.Web.SelectElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.SelectElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.SelectElement.SetSelectedOption(System.String)">
            <summary>
            Sets the selected option from the list of available <see cref="T:Facilita.Web.OptionElement"/> objects.
            </summary>
            
            <remarks>
            This is the option that will be sent to the web server when 
            the form is submitted.
            </remarks>
            
            <param name="value">The value to choose.</param>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">No <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="value"/> exists in this SelectElement.</exception>
            
            <seealso cref="M:Facilita.Web.SelectElement.SetSelectedOption(Facilita.Web.OptionElement)"/>
            <seealso cref="M:Facilita.Web.SelectElement.GetSelectedOption"/>
        </member>
        <member name="M:Facilita.Web.SelectElement.GetOptionElement(System.String)">
             <summary>
             Gets the <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="value"/>.
             </summary>
             
             <remarks>
             <note type="note"><c><![CDATA[<option>]]></c> tags don't contain a <c>"name"</c> attribute, they are
             distinguished by the text in their <c>"value"</c> attribute instead.</note>
             </remarks>
            
             <param name="value">The value to look for.</param>
             
             <returns>The OptionElement with the specified <paramref name="value"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">No <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="value"/> exists in this SelectElement.</exception>
        </member>
        <member name="M:Facilita.Web.SelectElement.RemoveOptionElement(System.String)">
             <summary>
             Removes the <see cref="T:Facilita.Web.OptionElement"/> with the specified <paramref name="value"/> from the list of available OptionElement objects.
             </summary>
            
             <param name="value">The value of the <see cref="T:Facilita.Web.OptionElement"/> to remove.</param>
        </member>
        <member name="M:Facilita.Web.SelectElement.GetOptionElement(System.Int32)">
             <summary>
             Gets the <see cref="T:Facilita.Web.OptionElement"/> at the specifed <paramref name="index"/>.
             </summary>
             
             <example>
             The following example demonstrates getting the OptionElement objects by index from a SelectElement object.
             <code language="cs">
             // iterate over the options within a SelectElement
             for (int i = 0; i &lt; selectElement.OptionCount; i++)
             {
                 OptionElement optionElement = selectElement.GetOptionElement(i);
             }
             </code>
             </example>
            
             <param name="index">The index of the OptionElement to retrieve.</param>
             
             <returns>The OptionElement at the specified <paramref name="index"/>.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The specified <paramref name="index"/> is outside the available range.</exception>
             
             <seealso cref="P:Facilita.Web.SelectElement.OptionCount"/>
        </member>
        <member name="M:Facilita.Web.SelectElement.GetSelectedOption">
             <summary>
             Gets the <see cref="T:Facilita.Web.OptionElement"/> that is currently selected.
             </summary>
             
             <remarks>
             This is the option that will be sent to the web server when 
             the form is submitted.
             </remarks>
            
             <returns>The <see cref="T:Facilita.Web.OptionElement"/> that is currently selected.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">No option has been selected.</exception>
             
             <seealso cref="M:Facilita.Web.SelectElement.SetSelectedOption(System.String)"/>
             <seealso cref="M:Facilita.Web.SelectElement.SetSelectedOption(Facilita.Web.OptionElement)"/>
        </member>
        <member name="M:Facilita.Web.SelectElement.SetSelectedOption(Facilita.Web.OptionElement)">
             <summary>
             Sets the selected option from the list of available <see cref="T:Facilita.Web.OptionElement"/> objects.
             </summary>
             
             <remarks>
             This is the option that will be sent to the web server when 
             the form is submitted.
             </remarks>
            
             <param name="element">The OptionElement to choose.</param>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">No such <see cref="T:Facilita.Web.OptionElement"/> exists in this SelectElement.</exception>
             
             <seealso cref="M:Facilita.Web.SelectElement.SetSelectedOption(System.String)"/>
             <seealso cref="M:Facilita.Web.SelectElement.GetSelectedOption"/>
        </member>
        <member name="M:Facilita.Web.SelectElement.AddOptionElement(Facilita.Web.OptionElement)">
             <summary>
             Adds an <see cref="T:Facilita.Web.OptionElement"/> to the list of available OptionElement objects.
             </summary>
             
             <remarks>
             The new option is added to the end of the list.
             </remarks>
            
             <param name="element">The <see cref="T:Facilita.Web.OptionElement"/> to add.</param>
        </member>
        <member name="M:Facilita.Web.SelectElement.InsertOptionElement(System.Int32,Facilita.Web.OptionElement)">
             <summary>
             Inserts an <see cref="T:Facilita.Web.OptionElement"/> into the list of available OptionElement objects.
             </summary>
            
             <param name="index">The index at which to insert the option.</param>
             <param name="element">The <see cref="T:Facilita.Web.OptionElement"/> to insert.</param>
        </member>
        <member name="M:Facilita.Web.SelectElement.RemoveOptionElement(System.Int32)">
             <summary>
             Removes the <see cref="T:Facilita.Web.OptionElement"/> at the specified <paramref name="index"/> from the list of available OptionElement objects.
             </summary>
            
             <param name="index">The index in the list of the <see cref="T:Facilita.Web.OptionElement"/> to remove.</param>
        </member>
        <member name="M:Facilita.Web.SelectElement.Makefrom(Facilita.Web.HtmlElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="htmlElement">An HtmlElement.</param>
             
             <returns>A new SelectElement.</returns>
        </member>
        <member name="M:Facilita.Web.SelectElement.Clone">
             <summary>
             Initialises a new instance of the SelectElement class, which is a copy of the specified SelectElement.
             </summary>
            
             <returns>A new SelectElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.SelectElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this SelectElement currently represents a successful control.
             </summary>
             
             <remarks>
             A successful control is one that is <i>valid for submission</i>, i.e. one that will be sent to the 
             web server when the form is submitted.
             <para>
             A SelectElement is successful if <see cref="M:Facilita.Web.SelectElement.GetSelectedOption"/> returns an <see cref="T:Facilita.Web.OptionElement"/>.
             </para>
             </remarks>
            
             <value><b>true</b> if this SelectElement represents a successful control; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.SelectElement.OptionCount">
             <summary>
             Gets the number of <see cref="T:Facilita.Web.OptionElement"/> objects in this SelectElement.
             </summary>
             
             <example>
             The following example demonstrates using the OptionCount property to iterate over all OptionElements in a SelectElement.
             <code language="cs">
             // iterate over the options within a SelectElement
             for (int i = 0; i &lt; selectElement.OptionCount; i++)
             {
                 OptionElement optionElement = selectElement.GetOptionElement(i);
             }
             </code>
             </example>
            
             <value>The number of options available in this SelectElement.</value>
             
             <seealso cref="M:Facilita.Web.SelectElement.GetOptionElement(System.Int32)"/>
        </member>
        <member name="P:Facilita.Web.SelectElement.IsMultiple">
             <summary>
             Gets a value that indicates whether it is possible to select multiple options at once.
             </summary>
             
             <remarks>
             Getting the value of this property is equivalent to checking <c>if (GetAttribute("multiple") == "multiple")</c>.
             </remarks>
            
             <value><b>true</b> if multiple options can be selected at once; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.TextAreaElement">
             <summary>
             Represents an HTML textarea element within an HTML form.
             </summary>
             
             <remarks>
             An HTML element is everything from the start tag to the end tag.
             <para>
             A TextAreaElement is used to define a multi-line text input control.
             </para>
             <para>
             e.g.
             <code language="none">
             <![CDATA[<textarea name="userMessage" rows="4" cols="50">]]><br/>
             Some lines of text.<br/>
             <![CDATA[</textarea>]]>
             </code>
             </para>
             <para>
             A TextAreaElement is submitted as a key/value pair
             when the containing <see cref="T:Facilita.Web.Form"/> is sent to the web server.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.Form"/>
        </member>
        <member name="M:Facilita.Web.TextAreaElement.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.TextAreaElement.getCPtr(Facilita.Web.TextAreaElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.TextAreaElement.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.TextAreaElement.Makefrom(Facilita.Web.HtmlElement)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="htmlElement">An HtmlElement.</param>
             
             <returns>A new TextAreaElement.</returns>
        </member>
        <member name="M:Facilita.Web.TextAreaElement.Clone">
             <summary>
             Initialises a new instance of the TextAreaElement class, which is a copy of the specified TextAreaElement.
             </summary>
            
             <returns>A new TextAreaElement object which is an exact copy of this HTML element.</returns>
        </member>
        <member name="P:Facilita.Web.TextAreaElement.RowCount">
            <summary>
            Gets the number of rows of text that this TextAreaElement has space for.
            </summary>
            
            <remarks>
            <note type="note">Getting the value of this property
            is equivalent to calling <c>GetAttribute("rows")</c>, and is unlikely to be the same
            as the number of actual lines of text in the TextAreaElement.</note>
            </remarks>
            
            <value>The number of rows in this TextAreaElement.</value>
        </member>
        <member name="P:Facilita.Web.TextAreaElement.ColumnCount">
            <summary>
            Gets the number of columns that this TextAreaElement has space for.
            </summary>
            
            <remarks>
            <note type="note">Getting the value of this property
            is equivalent to calling <c>GetAttribute("cols")</c>, and is unlikely to be the same
            as the number of actual characters of text in the TextAreaElement.</note>
            </remarks>
            
            <value>The number of columns in this TextAreaElement.</value>
        </member>
        <member name="P:Facilita.Web.TextAreaElement.IsSuccessfulControl">
             <summary>
             Gets a value that indicates whether this TextAreaElement currently represents a successful control.
             </summary>
             
             <remarks>
             A successful control is one that is <i>valid for submission</i>, i.e. one that will be sent to the 
             web server when the form is submitted.
             <para>
             A TextAreaElement is successful if it contains text.
             </para>
             </remarks>
            
             <value><b>true</b> if this TextAreaElement represents a successful control; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.Url">
            <summary>
            Represents a URL, specified by a <i>protocol</i>, optional <i>credentials</i>, <i>host</i>, <i>port</i>, <i>path</i>, optional <i>query data</i>, and optional <i>reference</i>.
            </summary>
            
            <remarks>
            e.g. <c>protocol://user:password@host:port/path?query_data#reference</c>
            <para>
            <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
            To modify a URL, various With*() methods can be used on an existing Url object to create
            a copy of the object with different attributes.</note>
            </para>
            <para>
            <note type="warning">A Url object may not necessarily represent a valid URL.</note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.Url.getCPtr(Facilita.Web.Url)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.Url.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(System.String)">
             <summary>
             Initialises a new instance of the Url class, from the specified <paramref name="urlText"/>.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a string.
             <code language="cs">
             // This will have the default HTTP port (80)
             Url url = new Url("http://www.myCompany.co.uk/index.php");
             </code>
             </example>
            
             <param name="urlText">A string representation of a URL.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,System.String)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/> and <paramref name="host"/>.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i> and <i>host</i>.
             <code language="cs">
             // These will have the default HTTP port (80)
             Url url1 = new Url(Protocol.HTTP, "www.myCompany.co.uk");
             Url url2 = new Url(Protocol.HTTP, "192.168.01.123");
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="host">A dotted IP address or host name.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,Facilita.Native.IpEndPoint)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/> and <paramref name="ipEndPoint"/> (host/port).
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i> and IpEndPoint (<i>host</i> and <i>port</i>).
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer);
             // This refers to http://www.myCompany.co.uk:8080
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="ipEndPoint">The hostname/IP address and port.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/>, <paramref name="ipEndPoint"/> (host/port) and <paramref name="path"/>.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i>, IpEndPoint (<i>host</i> and <i>port</i>) and <i>path</i>.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
             // This refers to http://www.myCompany.co.uk:8080/index.php
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="ipEndPoint">The hostname/IP address and port.</param>
             <param name="path">The <i>path</i> to be appended to the URL.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,System.String,System.String)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/>, <paramref name="host"/> and <paramref name="path"/>.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i>, <i>host</i> and <i>path</i>.
             <code language="cs">
             // This will have the default HTTP port (80)
             Url url = new Url(Protocol.HTTP, "www.myCompany.co.uk", "index.php");
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="host">A dotted IP address or host name.</param>
             <param name="path">The <i>path</i> to be appended to the URL.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String,Facilita.Web.QueryData)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/>, <paramref name="ipEndPoint"/> (host/port), <paramref name="path"/> and <see cref="T:Facilita.Web.QueryData"/> object.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i>, IpEndPoint (<i>host</i> and <i>port</i>),
             <i>path</i> and <i>queryData</i> from a <see cref="T:Facilita.Web.QueryData"/> object.
             <code language="cs">
             QueryData queryData = new QueryData();
             queryData.Add("sessionID", "12345");
             
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php", queryData);
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="ipEndPoint">The hostname/IP address and port.</param>
             <param name="path">The <i>path</i> to be appended to the URL.</param>
             <param name="queryData">A collection of key/value pairs to be appended to the URL.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String,Facilita.Web.QueryData,System.String)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/>, <paramref name="ipEndPoint"/> (host/port), <paramref name="path"/> and <see cref="T:Facilita.Web.QueryData"/> object.
             The <paramref name="queryData"/> object will be percent-encoded using the supplied list of <paramref name="unsafeCharacters"/>.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i>, IpEndPoint (<i>host</i> and <i>port</i>),
             <i>path</i> and <i>queryData</i> from a <see cref="T:Facilita.Web.QueryData"/> object.
             <code language="cs">
             QueryData queryData = new QueryData();
             queryData.Add("sessionID", "12345");
             
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php", queryData, "&lt;&gt;\"%{}|\\^[]` \n\t\r&amp;");
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="ipEndPoint">The hostname/IP address and port.</param>
             <param name="path">The <i>path</i> to be appended to the URL.</param>
             <param name="queryData">A collection of key/value pairs to be appended to the URL.</param>
             <param name="unsafeCharacters">A list of unsafe characters that will be percent-encoded in the query data of the URL.</param>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Protocol,Facilita.Native.IpEndPoint,System.String,System.String)">
             <summary>
             Initialises a new instance of the Url class, with the specified <paramref name="protocol"/>, <paramref name="ipEndPoint"/> (host/port), <paramref name="path"/> and <paramref name="queryText"/> string.
             </summary>
             
             <example>
             The following example demonstrates creating a Url from a <i>protocol</i>, IpEndPoint (<i>host</i> and <i>port</i>),
             <i>path</i> and <i>queryData</i>.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php", "sessionID=12345");
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="protocol">The <i>protocol</i> to use.</param>
             <param name="ipEndPoint">The hostname/IP address and port.</param>
             <param name="path">The <i>path</i> to be appended to the URL.</param>
             <param name="queryText">A percent-encoded string of key/value pairs to be appended to the URL, separated by the <c>&amp;</c> character.</param>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Url.#ctor(Facilita.Web.Url,System.String,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="url">A Url.</param>
             <param name="relativeUrlText">The relative URL text.</param>
             <param name="checkSlash"><b>true</b> if slashes should be checked.</param>
        </member>
        <member name="M:Facilita.Web.Url.AppendPath(System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <paramref name="path"/> appended to the existing <i>path</i>.
             </summary>
            
             <param name="path">The <i>path</i> to append.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="path"/> appended to the existing <i>path</i>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithPort(System.Int32)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <paramref name="port"/> (replacing the existing <i>port</i> if present).
             </summary>
            
             <param name="port">The <i>port</i> to add.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="port"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithPath(System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <paramref name="path"/> (replacing the existing <i>path</i> if present).
             </summary>
            
             <param name="path">The <i>path</i> to add.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithCredentials(System.String,System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <paramref name="user"/> and <paramref name="password"/> (replacing the existing <i>credentials</i> if present).
             </summary>
             
             <remarks>
             If a <i>username</i> and <i>password</i> are present in a URL, they appear before the <i>host</i>.
             <para>
             e.g.
             <c>http://username:password@www.myCompany.co.uk</c>
             </para>
             </remarks>
            
             <param name="user">A <i>username</i>.</param>
             <param name="password">A <i>password</i>.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="user"/> and <paramref name="password"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithQuery(System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <paramref name="queryText"/> string (replacing the existing <i>query data</i> if present).
             </summary>
             
             <example>
             The following example demonstrates adding query data to an existing Url.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
            
             Url url2 = url.WithQuery("sessionID=12345");
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="queryText">A percent-encoded string of key/value pairs to be appended to the URL, separated by the <c>&amp;</c> character.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <i>query data</i>.</returns>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)">For percent-encoding</seealso>
        </member>
        <member name="M:Facilita.Web.Url.WithQuery(Facilita.Web.QueryData)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <see cref="T:Facilita.Web.QueryData"/> object (replacing the existing <i>query data</i> if present).
             </summary>
            
             <example>
             The following example demonstrates adding a <see cref="T:Facilita.Web.QueryData"/> object to an existing Url.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
            
             QueryData queryData = new QueryData();
             queryData.Add("sessionID", "12345");
            
             Url url2 = url.WithQuery(queryData);
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
             
             <param name="queryData">A collection of key/value pairs to be appended to the URL.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="queryData"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithQuery(Facilita.Web.QueryData,System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with the specified <see cref="T:Facilita.Web.QueryData"/> object 
             percent-encoded using the supplied list of <paramref name="unsafeCharacters"/>
             (replacing the existing <i>query data</i> if present).
             </summary>
             
             <remarks>
             The <paramref name="queryData"/> object will be percent-encoded using the supplied list of <paramref name="unsafeCharacters"/>.
             See <see cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/> for more information about percent-encoding.
             </remarks>
            
             <example>
             The following example demonstrates adding a <see cref="T:Facilita.Web.QueryData"/> object to an existing Url,
             encoding the <c>~</c> character as <c>%7E</c>.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
            
             QueryData queryData = new QueryData();
             queryData.Add("sessionID", "~12345");
            
             Url url2 = url.WithQuery(queryData, Coder.DefaultUnsafeCharacters + "~");
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="queryData">A collection of key/value pairs to be appended to the URL.</param>
             <param name="unsafeCharacters">A list of unsafe characters that will be percent-encoded in the query data of the URL.</param>
             
             <returns>A new Url object which is the same as this Url
             but with the specified <paramref name="queryData"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithQuery(Facilita.Web.Form)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with query data from the specified <see cref="T:Facilita.Web.Form"/> object (replacing the existing <i>query data</i> if present).
             </summary>
            
             <example>
             The following example demonstrates adding a <see cref="T:Facilita.Web.Form"/> object to an existing Url.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
            
             Form form = response.ExtractForm("contactForm");
             form.GetInputElement("sessionID").Value = "12345";
            
             Url url2 = url.WithQuery(form);
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
             
             <param name="form">A collection of key/value pairs represented as a HTML form.</param>
             
             <returns>A new Url object which is the same as this Url
             but with query data from the specified <paramref name="form"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithQuery(Facilita.Web.Form,System.String)">
             <summary>
             Initialises a new instance of the Url class using the attributes of this Url,
             but with query data from the specified <see cref="T:Facilita.Web.Form"/> object 
             percent-encoded using the supplied list of <paramref name="unsafeCharacters"/>
             (replacing the existing <i>query data</i> if present).
             </summary>
             
             <remarks>
             The <paramref name="form"/> object will be percent-encoded using the supplied list of <paramref name="unsafeCharacters"/>.
             See <see cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/> for more information about percent-encoding.
             </remarks>
             
             <example>
             The following example demonstrates adding a <see cref="T:Facilita.Web.Form"/> object to an existing Url,
             encoding the <c>~</c> character as <c>%7E</c>.
             <code language="cs">
             IpEndPoint myServer = new IpEndPoint("www.myCompany.co.uk", 8080);
             Url url = new Url(Protocol.HTTP, myServer, "index.php");
            
             Form form = response.ExtractForm("contactForm");
             form.GetInputElement("sessionID").Value = "~12345";
            
             Url url2 = url.WithQuery(form, Coder.DefaultUnsafeCharacters + "~");
             // This refers to http://www.myCompany.co.uk:8080/index.php?sessionID=12345
             </code>
             </example>
            
             <param name="form">A collection of key/value pairs represented as a HTML form.</param>
             <param name="unsafeCharacters">A list of unsafe characters that will be percent-encoded in the query data of the URL.</param>
             
             <returns>A new Url object which is the same as this Url
             but with query data from the specified <paramref name="form"/>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.WithReference(System.String)">
            <summary>
            Initialises a new instance of the Url class using the attributes of this Url,
            but with the specified <paramref name="reference"/> (replacing the existing <i>reference</i>,
            also known as the <i>fragment ID</i>, if present).
            </summary>
            
            <remarks>
            The <i>reference</i> follows a <c>#</c> at the end of a URL, and is often used
            to refer to a specific location in a HTML document.
            <para>
            e.g. <c>http://www.myCompany.co.uk/index.php#chapter3</c>
            </para>
            </remarks>
            
            <param name="reference">The new <i>reference</i>.</param>
            
            <returns>A new Url object which is the same as this Url
            but with the specified <i>reference</i>.</returns>
        </member>
        <member name="M:Facilita.Web.Url.ToString(System.Boolean,System.Boolean)">
             <summary>
             Returns a string representation of this Url, specifying whether to
             percent-encode the <i>path</i> and include the <i>port</i> component of the URL if it
             is a standard port.
             </summary>
            
             <param name="encodedPath"><b>true</b> if the <i>path</i> component of the URL should be percent-encoded.</param>
             <param name="outputStandardPorts"><b>true</b> if the <i>port</i> component of the URL should be included
             even if it is a standard port for this Url object's <i>protocol</i>.</param>
             
             <returns>A string representation of this Url.</returns>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Url.ToString(System.Boolean)">
             <summary>
             Returns a string representation of this Url, specifying whether to
             percent-encode the <i>path</i>.
             </summary>
            
             <param name="encodedPath"><b>true</b> if the <i>path</i> component of the URL should be percent-encoded.</param>
             
             <returns>A string representation of this Url.</returns>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
        </member>
        <member name="M:Facilita.Web.Url.ToString">
             <summary>
             Returns a string representation of this Url.
             </summary>
            
             <returns>A string representation of this Url.</returns>
        </member>
        <member name="P:Facilita.Web.Url.Protocol">
            <summary>
            Gets the <see cref="T:Facilita.Web.Protocol"/> used for this Url. This appears before the <c>://</c> at the
            start of a URL, and is also known as the <i>scheme</i>.
            </summary>
            
            <value>The <i>protocol</i> used for this Url.</value>
        </member>
        <member name="P:Facilita.Web.Url.IpEndPoint">
             <summary>
             Gets the <see cref="T:Facilita.Native.IpEndPoint"/> pointed to by this Url.
             </summary>
            
             <value>The <i>host</i>/<i>port</i> combination pointed to by this Url.</value>
             
             <seealso cref="M:Facilita.Web.Url.WithPort(System.Int32)"/>
        </member>
        <member name="P:Facilita.Web.Url.EncodedPathAndQuery">
             <summary>
             Gets the section of the URL used in an HTTP request.
             </summary>
            
             <value>The section of the URL used in an HTTP request.</value>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
             <seealso cref="M:Facilita.Web.Url.WithPath(System.String)"/>
             <seealso cref="M:Facilita.Web.Url.WithQuery(Facilita.Web.QueryData)"/>
        </member>
        <member name="P:Facilita.Web.Url.Query">
             <summary>
             Gets the percent-encoded <i>query data</i> section of this Url.
             </summary>
            
             <remarks>
             <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
             To modify the <i>query data</i>, call <see cref="M:Facilita.Web.Url.WithQuery(Facilita.Web.QueryData)"/> to get a new Url object with the required modification.</note>
             </remarks>
             
             <value>The percent-encoded <i>query data</i> section of this Url.</value>
             
             <seealso cref="M:Facilita.Web.Coder.UrlEncode(System.String)"/>
             <seealso cref="M:Facilita.Web.Url.WithQuery(Facilita.Web.QueryData)"/>
        </member>
        <member name="P:Facilita.Web.Url.Reference">
             <summary>
             Gets the <i>reference</i> (also known as the <i>fragment ID</i>) of this Url.
             </summary>
             
             <remarks>
             The <i>reference</i> follows a <c>#</c> at the end of a URL, and is often used
             to refer to a specific location in a HTML document.
             <para>
             e.g. <c>http://www.myCompany.co.uk/index.php#chapter3</c>
             </para>
             <para>
             <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
             To modify the <i>reference</i>, call <see cref="M:Facilita.Web.Url.WithReference(System.String)"/> to get a new Url object with the required modification.</note>
             </para>
             </remarks>
            
             <value>The reference of this Url.</value>
             
             <seealso cref="M:Facilita.Web.Url.WithReference(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Url.User">
             <summary>
             Gets the <i>username</i> specified in this Url.
             </summary>
             
             <remarks>
             If a <i>username</i> and <i>password</i> are present in a URL, they appear before the <i>host</i>.
             <para>
             e.g.
             <c>http://username:password@www.myCompany.co.uk</c>
             </para>
             <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
             To modify the <i>username</i>, call <see cref="M:Facilita.Web.Url.WithCredentials(System.String,System.String)"/> to get a new Url object with the required modification.</note>
             </remarks>
            
             <value>The <i>username</i> specified in this Url,
             or an empty string if no <i>username</i> is specified.</value>
             
             <seealso cref="M:Facilita.Web.Url.WithCredentials(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.Url.Password">
             <summary>
             Gets the <i>password</i> specified in this Url.
             </summary>
             
             <remarks>
             If a <i>username</i> and <i>password</i> are present in a URL, they appear before the <i>host</i>.
             <para>
             e.g.
             <c>http://username:password@www.myCompany.co.uk</c>
             </para>
             <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
             To modify the <i>password</i>, call <see cref="M:Facilita.Web.Url.WithCredentials(System.String,System.String)"/> to get a new Url object with the required modification.</note>
             </remarks>
            
             <value>The <i>password</i> specified in this Url,
             or an empty string if no <i>password</i> is specified.</value>
             
             <seealso cref="M:Facilita.Web.Url.WithCredentials(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.Url.Path">
             <summary>
             Gets the <i>path</i> component of this Url, 
             excluding the first <c>/</c> after the hostname.
             </summary>
             
             <remarks>
             <note type="note">A Url object is immutable - that is, it cannot be changed after it has been created.
             To modify the <i>path</i>, call <see cref="M:Facilita.Web.Url.WithPath(System.String)"/> to get a new Url object with the required modification.</note>
             </remarks>
            
             <value>The <i>path</i> component of this Url,
             or an empty string if no <i>path</i> is present.</value>
             
             <seealso cref="P:Facilita.Web.Url.DirectoryPath"/>
             <seealso cref="P:Facilita.Web.Url.FileName"/>
             <seealso cref="M:Facilita.Web.Url.WithPath(System.String)"/>
        </member>
        <member name="P:Facilita.Web.Url.FileName">
             <summary>
             Gets the name of the file at the end of the <i>path</i> in this Url.
             </summary>
             
             <example>
             The following example demonstrates getting the file name of different Url objects.
             <code language="cs">
             new Url("http://www.myCompany.co.uk/").FileName);  // returns ""
             new Url("http://www.myCompany.co.uk/index.php").FileName);  // returns "index.php"
             new Url("http://www.myCompany.co.uk/directory/subdirectory/").FileName);  // returns ""
             </code>
             </example>
            
             <value>The name of the file at the end of the <i>path</i> in this Url,
             or an empty string if this Url has no <i>path</i> component or the <i>path</i> ends
             with a <c>/</c> character.</value>
             
             <seealso cref="P:Facilita.Web.Url.Path"/>
             <seealso cref="P:Facilita.Web.Url.DirectoryPath"/>
        </member>
        <member name="P:Facilita.Web.Url.DirectoryPath">
             <summary>
             Gets the directory components of the <i>path</i> in this Url, excluding the filename.
             </summary>
             
             <example>
             The following example demonstrates getting the directory path of different Url objects.
             <code language="cs">
             new Url("http://www.myCompany.co.uk/").DirectoryPath;  // returns "/"
             new Url("http://www.myCompany.co.uk/directory/index.php").DirectoryPath;  // returns "/directory"
             new Url("http://www.myCompany.co.uk/directory/subdirectory/").DirectoryPath;  // returns "/directory/subdirectory"
             </code>
             </example>
            
             <value>The directory components of the <i>path</i> in this Url, excluding the filename,
             or an empty string if this Url has no <i>path</i> component.</value>
             
             <seealso cref="P:Facilita.Web.Url.Path"/>
             <seealso cref="P:Facilita.Web.Url.FileName"/>
        </member>
        <member name="P:Facilita.Web.Url.IsRelativePath">
             <summary>
             Gets a value that indicates whether the return value of <see cref="P:Facilita.Web.Url.Path"/> doesn't begin with <c>/</c>.
             </summary>
            
             <value><b>true</b> if the return value of <see cref="P:Facilita.Web.Url.Path"/> doesn't begin with <c>/</c>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.Url.IsStandardPortForProtocol">
             <summary>
             Gets a value that indicates whether a standard <i>port</i> is being used.
             </summary>
             
             <remarks>
             <ul>
             <li>For <see cref="P:Facilita.Web.Protocol.HTTP"/> the standard port is 80</li>
             <li>For <see cref="P:Facilita.Web.Protocol.HTTPS"/> the standard port is 443</li>
             </ul>
             </remarks>
            
             <value><b>true</b> if a standard <i>port</i> is being used; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.WebBrowser">
            <summary>
            The WebBrowser class is the starting point for sending web requests.  
            It can be used to create <see cref="T:Facilita.Web.Request"/> objects to send
            to a web server (using the <see cref="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url)"/> method).
            </summary>
            
            <remarks>
            The WebBrowser class manages HTTP caching and cookies. It also provides many options 
            for controlling how the various HTTP requests are handled.
            <para>
            Each Web Virtual User has a separate WebBrowser object associated with it,
            which can be accessed by calling <see cref="P:Facilita.Web.WebBrowserScript.WebBrowser"/>.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates creating a Request object using the Browser property.
            <code language="cs">
            Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.co.uk/"), 1); 
            Response response1 = request1.Send(); 
            </code>
            </example>
        </member>
        <member name="M:Facilita.Web.WebBrowser.#ctor(System.IntPtr,System.Boolean)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="cPtr">Pointer to the CPP wrapped object.</param>
             <param name="cMemoryOwn">Indicates if this object is responsible for memory management of the CPP object.</param>
        </member>
        <member name="M:Facilita.Web.WebBrowser.getCPtr(Facilita.Web.WebBrowser)">
             <summary>
             For internal use only. Of no interest to the user.
             </summary>
            
             <param name="obj">A reference to an object of this class.</param>
             
             <returns>A long containing the address of the CPP wrapped object.</returns>
        </member>
        <member name="M:Facilita.Web.WebBrowser.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url,System.Int32)">
             <summary>
             Creates a <see cref="T:Facilita.Web.Request"/> object that can be used to send an HTTP request to the web server,
             specifying a unique identifier that can be used to track the request.
             </summary>
             
             <remarks>
             <note type="note">The HTTP request is not sent until the <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/>
             method is called.</note>
             </remarks>
             
             <example>
             The following example demonstrates creating a Request and sending it.
             <code language="cs">
             // Send a GET request to http://www.testplant.co.uk/
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.co.uk/"), 1); 
             Response response1 = request1.Send(); 
             </code>
             </example>
            
             <param name="method">The <see cref="T:Facilita.Web.HttpMethod"/> to use when sending the <see cref="T:Facilita.Web.Request"/> to the web server.</param>
             <param name="url">The <see cref="T:Facilita.Web.Url"/> that this request should be sent to.</param>
             <param name="reference">A unique identifier that can be used to track this Request.</param>
             
             <returns>The new <see cref="T:Facilita.Web.Request"/> object.</returns>
        </member>
        <member name="M:Facilita.Web.WebBrowser.CreateRequest(Facilita.Web.HttpMethod,Facilita.Web.Url)">
             <summary>
             Creates a <see cref="T:Facilita.Web.Request"/> object that can be used to send an HTTP request to the web server.
             </summary>
             
             <remarks>
             <note type="note">The HTTP request is not sent until the <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/>
             method is called.</note>
             </remarks>
             
             <example>
             The following example demonstrates creating a Request and sending it.
             <code language="cs">
             // Send a GET request to http://www.testplant.co.uk/
             Request request1 = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.co.uk/")); 
             Response response1 = request1.Send(); 
             </code>
             </example>
            
             <param name="method">The <see cref="T:Facilita.Web.HttpMethod"/> to use when sending the <see cref="T:Facilita.Web.Request"/> to the web server.</param>
             <param name="url">The <see cref="T:Facilita.Web.Url"/> that this request should be sent to.</param>
             
             <returns>The new <see cref="T:Facilita.Web.Request"/> object.</returns>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String,System.String)">
             <summary>
             Sets a default HTTP request header for every subsequent <see cref="T:Facilita.Web.Request"/>
             object created by this WebBrowser, as a name/value pair.
             </summary>
             
             <remarks>
             This method is useful if there is a particular HTTP header that is required in every HTTP
             request by a particular application.
             </remarks>
             
             <example>
             The following example demonstrates setting the <c>"Accept-Language: en-GB"</c> HTTP header
             for <b>every</b> subsequent request created.
             <code language="cs">
             // Set the "Accept-Language: en-GB" HTTP header for EVERY subsequent request 
             WebBrowser.SetDefaultHeader("Accept-Language", "en-GB");
             
             // Create a request
             Request request = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.facilita.co.uk/"));
             
             // Override the "Accept-Language" header for this request ONLY
             request.SetHeader("Accept-Language", "en-US"); 
             
             Response response = request.Send(); 
             
             // Subsequent requests will still use the "Accept-Language: en-GB" HTTP header
             </code>
             </example>
            
             <param name="header">The header to set.</param>
             <param name="value">The default value of the header.</param>
             
             <seealso cref="M:Facilita.Web.Request.SetHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetDefaultHeaderValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String)">
             <summary>
             Sets a default HTTP request header for every subsequent <see cref="T:Facilita.Web.Request"/>
             object created by this WebBrowser, using the contents of the specified string.
             </summary>
             
             <remarks>
             This method is useful if there is a particular HTTP header that is required in every HTTP
             request by a particular application.
             </remarks>
             
             <example>
             The following example demonstrates setting the <c>"Accept-Language: en-GB"</c> HTTP header
             for <b>every</b> subsequent request created.
             <code language="cs">
             // Set the "Accept-Language: en-GB" HTTP header for EVERY subsequent request 
             WebBrowser.SetDefaultHeader("Accept-Language: en-GB");
             
             // Create a request
             Request request = WebBrowser.CreateRequest(HttpMethod.GET, new Url("http://www.testplant.co.uk/"));
             
             // Override the "Accept-Language" header for this request ONLY
             request.SetHeader("Accept-Language: en-US"); 
             
             Response response = request.Send(); 
             
             // Subsequent requests will still use the "Accept-Language: en-GB" HTTP header
             </code>
             </example>
            
             <param name="header">The full header to set.</param>
             
             <seealso cref="M:Facilita.Web.Request.SetHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetDefaultHeaderValue(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.RemoveDefaultHeader(System.String)">
             <summary>
             Removes the specified default HTTP header.
             </summary>
             
             <remarks>
             <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser will no
             longer have this header set by default.
             </remarks>
            
             <param name="header">The name of the header to remove.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ClearDefaultHeaders">
             <summary>
             Removes all of the default HTTP headers.
             </summary>
             
             <remarks>
             <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser will no
             longer have default headers set.
             </remarks>
            
             <seealso cref="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ContainsDefaultHeader(System.String)">
             <summary>
             Determines whether the specified HTTP header is set by default
             on <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
            
             <param name="header">The header to check for.</param>
             
             <returns><b>true</b> if the specified <paramref name="header"/> has been set as a default HTTP header; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetDefaultHeaderValue(System.String)">
             <summary>
             Gets the value of the specified default HTTP header.
             </summary>
             
             <remarks>
             <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser will have
             the specified HTTP <paramref name="header"/> set with the value returned by this method.
             </remarks>
            
             <param name="header">The header to look for.</param>
             
             <returns>The value of the specified default <paramref name="header"/>, or an empty string if this header is not set by default.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultHeader(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ClearDefaultHeaders"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetDefaultHeaderKeys">
             <summary>
             Gets a list of names of all the default HTTP request headers that will be
             set for every subsequent <see cref="T:Facilita.Web.Request"/> object created by this WebBrowser.
             </summary>
            
             <returns>A list of names of all the default HTTP request headers.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)">
             <summary>
             Adds a Content-Type fragment, so the content of sub-request responses that match
             the specified Content-Type fragment will be kept by default
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates keeping the content of any sub-requests
             that have a Content-Type starting with <c>"text"</c> (e.g. <c>text/html</c>, <c>text/xml</c>).
             <code language="cs">
             // Keep the content of any sub-requests that have a Content-Type starting with "text" (e.g. text/html, text/xml)
             WebBrowser.AddDefaultKeepSubRequestContentType("text");
             </code>
             </example>
            
             <param name="typeFragment">Sub-request responses that have a Content-Type header containing this <paramref name="typeFragment"/> will be kept by default.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepContent"/>
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)">
             <summary>
             Adds a URL, so the content of sub-request responses that match the specified URL 
             fragment will be kept by default
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates keeping the content of the sub-request
             with the url <c>http://localhost/images/magnifying-glass.png</c>
             <code language="cs">
             // Keep the content of the sub-request with the url http://localhost/images/magnifying-glass.png
             WebBrowser.AddDefaultKeepSubRequestContentUrl("http://localhost/images/magnifying-glass.png");
             </code>
             </example>
            
             <param name="urlFragment">The responses from sub-requests that match this <paramref name="urlFragment"/> will be kept by default.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepContent"/>
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentUrl(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentType(System.String)">
             <summary>
             Removes a Content-Type fragment, so the content of sub-request responses that match
             the specified Content-Type fragment will no longer be kept by default
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of certain sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates discarding the content of any sub-requests
             that have a Content-Type starting with <c>"text"</c> (e.g. <c>text/html</c>, <c>text/xml</c>).
             <code language="cs">
             // Don't keep the content of any sub-requests that have a Content-Type starting with "text" (e.g. text/html, text/xml)
             WebBrowser.RemoveDefaultKeepSubRequestContentType("text");
             </code>
             </example>
            
             <param name="typeFragment">Sub-request responses that have a Content-Type header containing this <paramref name="typeFragment"/> will no longer be kept by default.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentUrl(System.String)">
             <summary>
             Removes a URL, so the content of sub-request responses that match the specified URL 
             fragment will no longer be kept by default
             for any subsequent Request objects created by this WebBrowser.
             </summary>
             
             <remarks>
             In general, it is not necessary to retain content for sub-requests, and it will
             incur a performance penalty to do so. However, a situation may arise where it is
             necessary to check or extract a value from a sub-response. In this situation, you
             can specify that the content of a particular sub-responses should be retained.
             </remarks>
             
             <example>
             The following example demonstrates discarding the content of the sub-request
             with the url <c>http://localhost/images/magnifying-glass.png</c>
             <code language="cs">
             // Don't keep the content of the sub-request with the url http://localhost/images/magnifying-glass.png
             WebBrowser.RemoveDefaultKeepSubRequestContentUrl("http://localhost/images/magnifying-glass.png");
             </code>
             </example>
            
             <param name="urlFragment">The responses from sub-requests that match this <paramref name="urlFragment"/> will no longer be kept by default.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepContent"/>
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetDefaultContentUrlFragments">
             <summary>
             Gets a list of all the URL fragments for which the content of sub-request responses
             will be kept by default for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
            
             <returns>A list of all the URL fragments for which the content of sub-request responses
             will be kept by default.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetDefaultContentTypeFragments">
             <summary>
             Gets a list of all the Content-Type fragments for which the content of sub-request responses
             will be kept by default for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
            
             <returns>A list of all the Content-Type fragments for which the content of sub-request responses
             will be kept by default.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.RemoveDefaultKeepSubRequestContentType(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SaveCookie(System.String,System.String)">
             <summary>
             Saves cookie data for the specified <paramref name="host"/>.
             </summary>
             
             <remarks>
             The host must be a hostname or TCP/IP address.  Use this call to populate a browser with a 
             set of pre-defined cookies or to add a cookie to the browser cookie cache.
             <para>
             The cookie data is in the form of a <c>"Set-Cookie"</c> header as received from a server.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates saving a cookie, and example URLs at which the saved
             cookie value will be available.
             <code language="cs">
             WebBrowser.SaveCookie("www.mycookiesite.com", "SESSIONID=99; path=/cookies; expires=Mon, 01-Jan-2003 00:00:00 GMT");
             </code>
             A path may be specified in the <paramref name="data"/>, in which case the cookie
             value is only available at that path and any paths below it in the hierarchy.
             <code language="none">
             Set-Cookie: SESSIONID=99; path=/cookies; expires=Mon, 01-Jan-2003 00:00:00 GMT
             
             http://www.mycookiesite.com:8080/                   // No cookie available at this path
             http://www.mycookiesite.com:8080/cookies/           // Cookie SESSIONID=99 stored here
             http://www.mycookiesite.com:8080/cookies/howto      // SESSIONID=99 available here
             http://www.mycookiesite.com:8080/cookies/howto/bake // SESSIONID=99 available here
             </code>
             If no path is specified, the path will default to <c>"/"</c>.
             This causes the cookie to be sent on all requests to the domain.
             </example>
            
             <param name="host">The target domain.</param>
             <param name="data">The cookie name and value, in the form of a Set-Cookie header.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.GetCookieValue(System.String,System.String,System.String)"/>
             <seealso cref="P:Facilita.Web.WebBrowser.CookiesSupported"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetCookieValue(System.String,System.String,System.String)">
             <summary>
             Gets the value of the specified cookie, at the specified <paramref name="domain"/> and <paramref name="path"/>.
             </summary>
             
             <remarks>
             A cookie stored at a particular path is available to all paths below it in the hierarchy.
             </remarks>
             
             <example>
             The following example demonstrates getting the cookie value at different paths in the hierarchy.
             <code language="none">
             Set-Cookie: SESSIONID=99; path=/cookies; expires=Mon, 01-Jan-2003 00:00:00 GMT
             
             http://www.mycookiesite.com:8080/                   // No cookie stored at this path
             http://www.mycookiesite.com:8080/cookies/           // Cookie SESSIONID stored here
             http://www.mycookiesite.com:8080/cookies/howto      // SESSIONID available here
             http://www.mycookiesite.com:8080/cookies/howto/bake // SESSIONID available here
             </code>
             
             <code language="cs">
             // assuming the cookie has been set as above,
             // the following calls can be made to obtain the value of SESSIONID
             string cookie;
             cookie = WebBrowser.GetCookieValue("www.mycookiesite.com", "/cookies/", "SESSIONID");
             cookie = WebBrowser.GetCookieValue("www.mycookiesite.com", "/cookies/howto/", "SESSIONID");
             cookie = WebBrowser.GetCookieValue("www.mycookiesite.com", "/cookies/howto/bake/", "SESSIONID");
             
             // the following call will not return a value as the path "/"
             // is above the path at which the cookie is stored ("/cookies")
             cookie = WebBrowser.GetCookieValue("www.mycookiesite.com", "/", "SESSIONID");
             </code>
             </example>
            
             <param name="domain">The domain of the cookie.</param>
             <param name="path">The path within the domain of the cookie.</param>
             <param name="cookieName">The name of the cookie.</param>
             
             <returns>The value of the key/value pair stored as a cookie at the specified <paramref name="domain"/> and <paramref name="path"/>.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SaveCookie(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ClearCookies"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ClearCookies">
             <summary>
             Clears the cookie cache.
             </summary>
             
             <remarks>
             A WebBrowser object maintains its own cookie cache, and each Virtual User has its own instance of WebBrowser.
             <para>
             This method clears the cookie cache in a similar manner to the <b>Delete Cookies</b> option within Internet Explorer.
             </para>
             </remarks>
            
             <seealso cref="M:Facilita.Web.WebBrowser.SaveCookie(System.String,System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetCookieValue(System.String,System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetUserPassword(System.String,System.String)">
             <summary>
             Sets the username and password that will be used for HTTP authentication.
             </summary>
             
             <remarks>
             If the web server returns an HTTP <c>401 (Unauthorized)</c> response to 
             a request, then eggPlant Performance will automatically retry the request with an additional <c>"Authorization"</c> HTTP header,
             using this <paramref name="username"/> and <paramref name="password"/>.
             </remarks>
            
             <param name="username">The username that will be used for HTTP authentication.</param>
             <param name="password">The password that will be used for HTTP authentication.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.User"/>
             <seealso cref="P:Facilita.Web.WebBrowser.Password"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetProxyUserPassword(System.String,System.String)">
             <summary>
             Sets the username and password that will be used for proxy authentication.
             </summary>
             
             <remarks>
             If the web server returns an HTTP <c>407 (Proxy Authentication Required)</c> response to 
             a request, then eggPlant Performance will automatically retry the request with an additional <c>"Proxy-Authorization"</c> HTTP header,
             using this <paramref name="username"/> and <paramref name="password"/>.
             </remarks>
            
             <param name="username">The username that will be used for HTTP authentication.</param>
             <param name="password">The password that will be used for HTTP authentication.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.User"/>
             <seealso cref="P:Facilita.Web.WebBrowser.Password"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)">
             <summary>
             Prevents requests from being sent to the specified <paramref name="domain"/>.
             </summary>
             
             <remarks>
             This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.BLACKLIST"/>.
             No HTTP/HTTPS requests will be made to this host. Use this method to prevent all HTTP calls to servers 
             such as advertisement servers or servers that are offline.
             <para>
             <note type="warning">The test may not function correctly if server calls are not made that are 
             necessary for the correct operation of the test.</note>
             </para>
             </remarks>
            
             <param name="domain">The host name to be ignored.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnignoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.UnignoreHost(System.String)">
             <summary>
             Stops preventing requests from being sent to the specified <paramref name="domain"/>.
             </summary>
             
             <remarks>
             This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.BLACKLIST"/>.
             </remarks>
            
             <param name="domain">The host name to be removed from the list of ignored hosts.</param>
             
             <returns><b>true</b> if the host name was removed from the list of ignored hosts,
             or <b>false</b> if the host name did not exist in the list of ignored hosts.</returns>
             
             <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)">
             <summary>
             Determines whether the specified <paramref name="domain"/> is currently being ignored.
             </summary>
            
             <param name="domain">The host to check.</param>
             
             <returns><b>true</b> if the specified <paramref name="domain"/> is currently being ignored; otherwise, <b>false</b>.</returns>
             
             <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnignoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnincludeHost(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IgnoreHostRegexp(System.String)">
             <summary>
             Prevents requests from being sent to any domain that matches the specified regular expression.
             </summary>
             
             <remarks>
             This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.BLACKLIST"/>.
             No HTTP/HTTPS requests will be made to any of these domains. Use this method to prevent all HTTP calls to servers 
             such as advertisement servers or servers that are offline.
             <para>
             <note type="warning">The test may not function correctly if server calls are not made that are 
             necessary for the correct operation of the test.</note>
             </para>
             </remarks>
            
             <param name="regexp">The regular expression to use.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnignoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnignoreHostRegexp(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.UnignoreHostRegexp(System.String)">
             <summary>
             Stops preventing requests from being sent to the domains that match the specified regular expression.
             </summary>
             
             <remarks>
             This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.BLACKLIST"/>.
             </remarks>
            
             <param name="regexp">The regular expression to unignore.</param>
             
             <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHostRegexp(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnignoreHost(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IncludeHost(System.String)">
            <summary>
            Allows requests to be sent to the specified <c>domain</c>.
            </summary>
            
            <remarks>
            This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.WHITELIST"/>.
            <para>
            <note type="warning">The test may not function correctly if server calls are not made that are 
            necessary for the correct operation of the test.</note>
            </para>
            </remarks>
            
            <param name="domain">the host name to include</param>
            
            <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHostRegexp(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.UnincludeHost(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.UnincludeHost(System.String)">
            <summary>
            Stop sending requests to the specified <c>domain</c>.
            </summary>
            
            <remarks>
            This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.WHITELIST"/>.
            <para>
            <note type="warning">The test may not function correctly if server calls are not made that are 
            necessary for the correct operation of the test.</note>
            </para>
            </remarks>
            
            <param name="domain">the host that will no longer be included</param>
            
            <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHostRegexp(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IncludeHostRegexp(System.String)">
            <summary>
            Allow requests to be sent to any host that matches the given regular expression.
            </summary>
            
            <remarks>
            This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.WHITELIST"/>.
            <para>
            <note type="warning">The test may not function correctly if server calls are not made that are 
            necessary for the correct operation of the test.</note>
            </para>
            </remarks>
            
            <param name="regexp">the regular expression to match against</param>
            
            <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
            <seealso cref="M:Facilita.Web.WebBrowser.UnincludeHostRegexp(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.UnincludeHostRegexp(System.String)">
            <summary>
            Stop sending requests to hosts that match the given regular expression.
            </summary>
            
            <remarks>
            This method only has any effect if the <see cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/> is set to <see cref="F:Facilita.Web.HostFilteringMode.WHITELIST"/>.
            <para>
            <note type="warning">The test may not function correctly if server calls are not made that are 
            necessary for the correct operation of the test.</note>
            </para>
            </remarks>
            
            <param name="regexp">The regular expression to stop matching against</param>
            
            <seealso cref="P:Facilita.Web.WebBrowser.HostFilteringMode"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHostRegexp(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ClearCache">
             <summary>
             Clears the HTTP cache.
             </summary>
             
             <remarks>
             A WebBrowser object maintains its own HTTP cache, and each Virtual User has its own instance of WebBrowser.
             <para>
             This method clears the HTTP cache in a similar manner to the <b>Delete Files</b> option within Internet Explorer.
             </para>
             </remarks>
            
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetCachedContentTypeDirectories">
             <summary>
             Gets a list of all Content-Type <i>media types</i> for which cached content is stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             By default, eggPlant Performance will only store the content of resources with certain Content-Type <i>media types</i>:
             <ul>
             <li>application</li>
             <li>message</li>
             <li>model</li>
             <li>multipart</li>
             <li>text</li>
             </ul>
             </para>
             <para>
             So, for example, all content with Content-Type <c>"text/html"</c>, or <c>"application/pdf"</c> will be stored,
             but content with Content-Type <c>"image/png"</c> will be discarded. In most cases, there is no reason to 
             access the contents of image data, but this method can be used to store specific types.
             </para>
             <para>
             <note type="note">Images are still cached, in that they will not be requested again from the web server
             once they have been downloaded; it is just the image data that is discarded.</note>
             </para>
             </remarks>
            
             <returns>A list of all Content-Type <i>media types</i> for which cached content is stored.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String,System.Boolean)">
             <summary>
             Adds or removes a Content-Type <i>media type</i> for which cached content is stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             By default, eggPlant Performance will only store the content of resources with certain Content-Type <i>media types</i>:
             <ul>
             <li>application</li>
             <li>message</li>
             <li>model</li>
             <li>multipart</li>
             <li>text</li>
             </ul>
             </para>
             <para>
             So, for example, all content with Content-Type <c>"text/html"</c>, or <c>"application/pdf"</c> will be stored,
             but content with Content-Type <c>"image/png"</c> will be discarded. In most cases, there is no reason to 
             access the contents of image data, but this method can be used to store specific types.
             </para>
             <para>
             <note type="note">Images are still cached, in that they will not be requested again from the web server
             once they have been downloaded; it is just the image data that is discarded.</note>
             </para>
             </remarks>
            
             <param name="contentTypeDirectory">The Content-Type <i>media type</i> to add or remove e.g. <c>"text"</c>, <c>"application"</c>.</param>
             <param name="cache"><b>true</b> if content with the specified <i>media type</i> should be stored; otherwise, <b>false</b>.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.ClearCache"/>
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IncludeContentTypeInCache(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ExcludeContentTypeFromCache(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String)">
             <summary>
             Adds a Content-Type <i>media type</i> for which cached content is stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             By default, eggPlant Performance will only store the content of resources with certain Content-Type <i>media types</i>:
             <ul>
             <li>application</li>
             <li>message</li>
             <li>model</li>
             <li>multipart</li>
             <li>text</li>
             </ul>
             </para>
             <para>
             So, for example, all content with Content-Type <c>"text/html"</c>, or <c>"application/pdf"</c> will be stored,
             but content with Content-Type <c>"image/png"</c> will be discarded. In most cases, there is no reason to 
             access the contents of image data, but this method can be used to store specific types.
             </para>
             <para>
             <note type="note">Images are still cached, in that they will not be requested again from the web server
             once they have been downloaded; it is just the image data that is discarded.</note>
             </para>
             </remarks>
            
             <param name="contentTypeDirectory">The Content-Type <i>media type</i> to store e.g. <c>"text"</c>, <c>"application"</c>.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.ClearCache"/>
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IncludeContentTypeInCache(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ExcludeContentTypeFromCache(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetCachedContentTypeExclusions">
             <summary>
             Gets a list of all Content-Types for which cached <b>content</b> is not stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             By default, eggPlant Performance will only store the content of resources with certain Content-Type <i>media types</i>:
             <ul>
             <li>application</li>
             <li>message</li>
             <li>model</li>
             <li>multipart</li>
             <li>text</li>
             </ul>
             </para>
             <para>
             So, for example, all content with Content-Type <c>"text/html"</c>, or <c>"application/pdf"</c> will be stored,
             but content with Content-Type <c>"image/png"</c> will be discarded. In most cases, there is no reason to 
             access the contents of image data, but this method can be used to store specific types.
             </para>
             <para>
             <note type="note">Resources are still cached, in that they will not be requested again from the web server
             once they have been downloaded; it is just the data that is discarded.</note>
             </para>
             </remarks>
            
             <returns>A list of all Content-Types for which cached <b>content</b> is not stored.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.ExcludeContentTypeFromCache(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.IncludeContentTypeInCache(System.String)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ExcludeContentTypeFromCache(System.String)">
             <summary>
             Adds a Content-Type for which cached <b>content</b> is not stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             <note type="note">Resources are still cached, in that they will not be requested again from the web server
             once they have been downloaded; it is just the data that is discarded.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates discarding the content of <c>"application/pdf"</c> Content-Types.
             <code language="cs">
             // do not store the content of "application/pdf" Content-Types
             WebBrowser.ExcludeContentTypeFromCache("application/pdf");
             </code>
             </example>
            
             <param name="contentType">The Content-Type to exclude e.g. <c>"text/xml"</c>, <c>"application/pdf"</c>.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.IncludeContentTypeInCache(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String,System.Boolean)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ClearCache"/>
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.IncludeContentTypeInCache(System.String)">
             <summary>
             Adds a Content-Type for which cached <b>content</b> is stored.
             </summary>
             
             <remarks>
             <note type="note">There is a performance overhead incurred by storing resources in the cache.</note>
             <para>
             By default, eggPlant Performance will only store the content of resources with certain Content-Type <i>media types</i>:
             <ul>
             <li>application</li>
             <li>message</li>
             <li>model</li>
             <li>multipart</li>
             <li>text</li>
             </ul>
             </para>
             <para>
             So, for example, all content with Content-Type <c>"text/html"</c>, or <c>"application/pdf"</c> will be stored,
             but content with Content-Type <c>"image/png"</c> will be discarded. In most cases, there is no reason to 
             access the contents of image data, but this method can be used to store specific types.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates storing the content of <c>"image/png"</c> Content-Types.
             <code language="cs">
             // store the content of "image/png" Content-Types
             WebBrowser.IncludeContentTypeInCache("image/png");
             </code>
             </example>
            
             <param name="contentType">The Content-Type to include e.g. <c>"text/xml"</c>, <c>"application/pdf"</c>.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.CacheContentTypeDirectory(System.String,System.Boolean)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.ClearCache"/>
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.AddResponseToCache(Facilita.Web.CachedResponse)">
             <summary>
             Adds an entry to this WebBrowser object's cache.
             </summary>
             
             <remarks>
             This method can be used to pre-populate a WebBrowser object's cache, prior to sending any requests to the web server.
             </remarks>
             
             <example>
             The following example demonstrates adding a response to the cache, so a request to retrieve
             <c>http://myDomain/weather/images/symbols/57x57/3.gif</c> will not be sent to the web server.
             <code language="cs">
             CachedResponse cachedResponse = new CachedResponse("http://myDomain/weather/images/symbols/57x57/3.gif");
             cachedResponse.SetHeader("Expires", "Fri, 22 Aug 2008 16:23:24 GMT");
             cachedResponse.SetHeader("Last-Modified", "Tue, 18 Mar 2008 11:37:40 GMT");
             cachedResponse.SetHeader("ETag", "\"b23-905a6900\"");
             
             WebBrowser.AddResponseToCache(cachedResponse);
             </code>
             </example>
            
             <param name="response">A <see cref="T:Facilita.Web.CachedResponse"/> representing a URL and appropriate HTTP request headers.</param>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetProxy">
             <summary>
             Gets the address of the proxy server used by this WebBrowser.
             </summary>
            
             <returns>The address of the proxy server used by this WebBrowser.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetProxy(System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetProxyPort"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetProxyPort">
             <summary>
             Gets the port number used by the proxy server for this WebBrowser.
             </summary>
            
             <returns>The port number used by the proxy server for this WebBrowser.</returns>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetProxy(System.String,System.Int32)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetProxy"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetProxy(System.String,System.Int32)">
             <summary>
             Sets the proxy server address and port.
             </summary>
             
             <remarks>
             Browsers often access target web servers via a proxy server. 
             </remarks>
            
             <param name="proxy">The IP address or domain of the proxy server.</param>
             <param name="port">The port number of the proxy server.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowser.GetProxy"/>
             <seealso cref="M:Facilita.Web.WebBrowser.GetProxyPort"/>
             <seealso cref="M:Facilita.Web.WebBrowser.UnsetProxy"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.UnsetProxy">
             <summary>
             Unsets the proxy server address and port.
             </summary>
             
             <remarks>
             Once this method has been called, any subsequent requests will go directly
             to the target domain, rather than via a proxy server.
             </remarks>
            
             <seealso cref="M:Facilita.Web.WebBrowser.SetProxy(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.GetConnectionType(System.Boolean)">
             <summary>
             Gets the <see cref="T:Facilita.Web.ConnectionType"/> in use.
             </summary>
             
             <remarks>
             <note type="note">It is possible to use different connection types for HTTP and HTTPS
             traffic; the <paramref name="secure"/> parameter is used to distinguish between them.</note>
             </remarks>
            
             <param name="secure"><b>true</b> to return the <see cref="T:Facilita.Web.ConnectionType"/> used for secure (HTTPS) connections, or <b>false</b> for unsecure (HTTP) connections.</param>
             
             <returns>The <see cref="T:Facilita.Web.ConnectionType"/> in use.</returns>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)">
             <summary>
             Sets the <i>dwAccessType</i>, <i>lpszProxyName</i> and <i>lpszProxyBypass</i> parameters to be passed to InternetOpen() used by WinInet/WinHTTP.
             </summary>
            
             <param name="accessType">Possible values are documented at <a href="http://msdn.microsoft.com/en-us/library/aa385096%28VS.85%29.aspx">Microsoft MSDN InternetOpen function</a>.</param>
             <param name="proxyServer">The proxy server address when accessType is set to INTERNET_OPEN_TYPE_PROXY. This must not be an empty string.</param>
             <param name="proxyBypass">An optional list of host names or IP addresses, or both, that should not be routed through the proxy when accessType set to INTERNET_OPEN_TYPE_PROXY. This must not be an empty string.</param>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this method is not supported.</exception>
        </member>
        <member name="M:Facilita.Web.WebBrowser.CloseAllConnections">
            <summary>
            Closes all of the open TCP/IP connections to the web server.
            </summary>
        </member>
        <member name="M:Facilita.Web.WebBrowser.SuspendLogging">
            <summary>
            Suspends detailed HTTP logging for this Virtual User.
            </summary>
            
            <seealso cref="M:Facilita.Web.WebBrowser.ResumeLogging"/>
            <seealso cref="P:Facilita.Web.WebBrowser.IsLoggingSuspended"/>
        </member>
        <member name="M:Facilita.Web.WebBrowser.ResumeLogging">
            <summary>
            Resumes detailed HTTP logging for this Virtual User.
            </summary>
            
            <seealso cref="M:Facilita.Web.WebBrowser.SuspendLogging"/>
            <seealso cref="P:Facilita.Web.WebBrowser.IsLoggingSuspended"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.VirtualUser">
             <summary>
             Gets the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> instance that this WebBrowser is associated with.
             </summary>
            
             <value>The <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> instance that this WebBrowser is associated with.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.HostFilteringMode">
            <summary>
            Get/set the <see cref="T:Facilita.Web.HostFilteringMode"/>.
            </summary>
            <remarks>
            The default is <see cref="F:Facilita.Web.HostFilteringMode.BLACKLIST"/>.
            </remarks>
            <seealso cref="M:Facilita.Web.WebBrowser.IsHostIgnored(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IgnoreHost(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.IncludeHost(System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CacheInMemoryContentLimit">
             <summary>
             Gets or sets the maximum size of resources that can be cached in memory.
             </summary>
             
             <remarks>
             Any cached resource that is larger than this will be written to disk. The default value is 2048 bytes.
             This limit can prevent the memory footprint of a Virtual User from becoming too large.
             </remarks>
            
             <value>The maximum size in bytes.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.IsSetProxy">
             <summary>
             Gets a value that indicates whether a proxy server has been defined for this WebBrowser.
             </summary>
             
             <remarks>
             <note type="warning">This method indicates that a domain name and port for a proxy server have been set,
             not whether the proxy server is configured correctly or whether a proxy server
             exists at the specified domain name and port.</note>
             </remarks>
            
             <value><b>true</b> if a proxy server has been defined for this WebBrowser; otherwise, <b>false</b>.</value>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetProxy(System.String,System.Int32)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CookiesSupported">
             <summary>
             Gets or sets a value that indicates whether cookies are be handled automatically.
             </summary>
             
             <remarks>
             If cookies are handled automatically, then eggPlant Performance will automatically store any cookies that
             are set by the web server, and send them back to the web server in subsequent requests.
             </remarks>
            
             <value><b>true</b> if cookies will be handled automatically; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultUserAgent">
             <summary>
             Gets or sets the value that the <c>"User-Agent"</c> HTTP header defaults to
             in <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             Getting this propert is equivalent to calling <c>getDefaultHeaderValue("User-Agent")</c>.
             <para>
             <c>DefaultUserAgent = userAgent;</c> is equivalent to <c>setDefaultHeaderValue("User-Agent", userAgent)</c>.
             </para>
             </remarks>
            
             <value>The value of the <c>"User-Agent"</c> default HTTP header.</value>
             
             <seealso cref="M:Facilita.Web.WebBrowser.GetDefaultHeaderValue(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.SetDefaultHeader(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ProxyServer">
             <summary>
             Gets the <i>lpszProxyName</i> parameter to be passed to InternetOpen() used by WinInet/WinHTTP.
             </summary>
            
             <remarks>
             To set the <i>lpszProxyName</i> parameter, call the <see cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/> method.
             </remarks>
            
             <value>The <i>lpszProxyName</i> parameter.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ProxyBypass">
             <summary>
             Gets the <i>lpszProxyBypass</i> parameter to be passed to InternetOpen() used by WinInet/WinHTTP.
             </summary>
            
             <remarks>
             To set the <i>lpszProxyBypass</i> parameter, call the <see cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/> method.
             </remarks>
            
             <value>The <i>lpszProxyBypass</i> parameter.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CertificateSubject">
             <summary>
             Gets or sets the subject fragment of the certificate to select.
             </summary>
             
             <remarks>
             The first certificate in the store that contains this fragment will be selected.
             </remarks>
            
             <value>The subject fragment of the certificate to select.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CertificateStoreName">
             <summary>
             Gets or sets the name of the system certificate store.
             </summary>
            
             <value>The name of the system certificate store.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CertLocation">
            <summary>
            Gets or sets the location folder or file path for a client certificate.
            </summary>
            
            <remarks>
            This property enables a specific certificate file, or folder containing certificates, to be set. 
            It should be set before any requests to a server that requires a client certificate.
            <para>
            This property uses the OpenSSL method SSL_CTX_load_verify_locations(), see 
            <a href="http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html">http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html</a> 
            for details of usage.
            </para>
            <para>
            If the path is a folder, then the <i>CAfile</i> argument of SSL_CTX_load_verify_locations is 
            <b>NULL</b>. If it is a file, the <i>CApath</i> argument is set to <b>NULL</b>.
            </para>
            <para>
            <note type="note">Certificates must be in PEM format. See the examples below.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates converting a certificate exported from a browser
            in a different format, to PEM format using the OpenSSL utility.
            <code language="none">
            openssl pkcs12 -clcerts -nokeys -out hostcert.pem -in cert.p12
            </code>
            See <a href="http://www.openssl.org/">http://www.openssl.org/</a> for details.
            </example>
            
            <value>The location folder or file path for a client certificate.</value>
            
            <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CertificateDisplay">
             <summary>
             Gets or sets a value that indicates whether certificate names should be written to the event log.
             </summary>
            
             <value><b>true</b> if certificate names will be written to the event log; otherwise, <b>false</b>.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.IsSetCertLocation">
             <summary>
             Gets a value that indicates whether a certificate location has been set.
             </summary>
            
             <value><b>true</b> if a certificate location has been set; otherwise, <b>false</b>.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
             
             <seealso cref="P:Facilita.Web.WebBrowser.CertLocation"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultConnectionIdleTimeout">
             <summary>
             Gets or sets the time in milliseconds after which a TCP connection is considered to be idle, and automatically closed.
             </summary>
            
             <value>The time in milliseconds.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.SSLrenegotiateTime">
             <summary>
             Gets or sets the time in milliseconds after which the SSL connection must be renegotiated.
             </summary>
            
             <value>The time in milliseconds.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ReadRetries">
             <summary>
             Gets or sets the number of times to attempt to read data from the web server before reporting a failure.
             </summary>
            
             <value>The number of times to attempt to read data from the web server before reporting a failure.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.BufferSize">
             <summary>
             Gets or sets the size of the buffer used when reading TCP data from a socket.
             </summary>
            
             <value>The size of the buffer in bytes.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DnsTimeout">
             <summary>
             Gets or sets the time in milliseconds before a DNS lookup will time-out.
             </summary>
            
             <value>The time in milliseconds before a DNS lookup will time-out.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DnsRetries">
             <summary>
             Gets or sets the number of times that eggPlant Performance will retry a DNS lookup in the event of failure.
             </summary>
            
             <value>The number of times that eggPlant Performance will retry a DNS lookup in the event of failure.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ConnectRetries">
             <summary>
             Gets or sets the number of times to attempt to connect to a web server before reporting a failure.
             </summary>
            
             <value>The number of times to attempt to connect to a web server before reporting a failure.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ConnectTimeout">
             <summary>
             Gets or sets the time in milliseconds to wait for a TCP connection to be opened, before reporting a failure.
             </summary>
            
             <value>The time in milliseconds to wait for a TCP connection to be opened, before reporting a failure.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ReceiveTimeout">
             <summary>
             Gets or sets the time in milliseconds to wait for a web server to respond to a request before reporting a failure.
             </summary>
            
             <value>The time in milliseconds to wait for a web server to respond to a request before reporting a failure.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.SendTimeout">
             <summary>
             Gets or sets the time in milliseconds before a sent TCP packet will time-out.
             </summary>
            
             <value>The time in milliseconds before a sent TCP packet will time-out.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.LocalIpEndPoint">
             <summary>
             Gets or sets the local <see cref="T:Facilita.Native.IpEndPoint"/> to use when making a connection to a web server.
             </summary>
             
             <remarks>
             Usually, it is not necessary to set this property, and each Virtual User
             will use the same IP address.
             <para>
             IP Spoofing can be enabled by assigning Virtual Users different local IpEndPoint objects.
             <a href="../../UserGuide/ip_spoofing.htm">More information about IP Spoofing</a>
             </para>
             <para>
             <note type="note">This property only applies if you are using the Internal HTTP handler.</note>
             </para>
             </remarks>
            
             <value>The local <see cref="T:Facilita.Native.IpEndPoint"/> to use when making a connection to a web server.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CachingEnabled">
             <summary>
             Gets or sets a value that indicates whether HTTP caching is enabled.
             </summary>
             
             <remarks>
             If HTTP caching is disabled, then every HTTP request will always be requested from
             the web server, even if the requested resource has already been downloaded.
             </remarks>
            
             <value><b>true</b> if HTTP caching is enabled; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.CacheSecureData">
             <summary>
             Gets or sets a value that indicates whether secure (HTTPS) data will be cached.
             </summary>
            
             <value><b>true</b> if secure data will be cached (default); otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.WebBrowser.CachingEnabled"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultFollowRedirects">
            <summary>
            Gets or sets a value that indicates whether redirects will automatically be followed for any
            subsequent Request objects created by this WebBrowser.
            </summary>
            
            <remarks>
            If the response to a request is an HTTP redirect code (e.g. <c>301</c>, <c>302</c>), 
            and the Request object is set to follow redirects,
            then the eggPlant Performance engine will automatically follow the redirect link.
            <para>
            <note type="note">If you only want to change automatic redirecting for a single request, then it is better to call
            <see cref="P:Facilita.Web.Request.FollowRedirects"/> instead of this property.</note>
            </para>
            </remarks>
            
            <value><b>true</b> if redirects will automatically be followed for Request objects created; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Web.Request.FollowRedirects"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultRetrieveSubRequests">
            <summary>
            Gets or sets a value that indicates whether sub-requests will be retrieved for any
            subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
            </summary>
            
            <remarks>
            See the <see cref="M:Facilita.Web.Request.Send"/> method for more information.
            </remarks>
            
            <value><b>true</b> if sub-requests will be retrieved for <see cref="T:Facilita.Web.Request"/> objects by default; otherwise, <b>false</b>.</value>
            
            <seealso cref="M:Facilita.Web.Request.Send"/>
            <seealso cref="P:Facilita.Web.Request.RetrieveSubRequests"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultTimeEveryHttpRequest">
             <summary>
             Gets or sets a value that indicates whether sub-requests will be timed as well as top-level HTTP requests,
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             Top-level requests will always be timed, even if the value of this property is <b>false</b>.
             </remarks>
            
             <value><b>true</b> if sub-requests will be timed by default as well as top-level HTTP requests; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.Request.TimeEveryHttpRequest"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultSubRequestThreadCount">
             <summary>
             Gets or sets the number of threads that will be used to fetch sub-requests from the web server,
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             If this value is increased, then more sub-requests can be fetched in parallel.
             <para>
             <note type="note">Using more threads will increase the load on the injector machine.</note>
             </para>
             </remarks>
            
             <value>The number of threads that will be used by default to fetch sub-requests from the web server.</value>
             
             <seealso cref="P:Facilita.Web.Request.SubRequestThreadCount"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultIncludeQueryDataInLabels">
             <summary>
             Gets or sets a value that indicates whether URLs with different query data should be considered different
             from each other by default.
             </summary>
             
             <remarks>
             If the value of this property is <b>true</b>, then the query
             data will be included in the HTTP metric labels.
             <para>
             e.g.
             <ul>
             <li><c>http://localhost:32144/search?q=camera</c></li>
             <li><c>http://localhost:32144/search?q=laptop</c></li>
             </ul>
             </para>
             <para>
             It may be important to compare how the query data affects the performance timing data,
             or you may wish to consider both requests as accessing the same URL under the same label <c>http://localhost:32144/search</c>.
             </para>
             </remarks>
            
             <value><b>true</b> if URL query data will be included in the HTTP metric labels by default; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultVersion">
             <summary>
             Gets or sets the HTTP version as a string, as set by default
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             The version of HTTP in common use is currently 1.1.
             </remarks>
            
             <value>The HTTP version set by default.</value>
             
             <seealso cref="P:Facilita.Web.Request.Version"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultKeepContent">
             <summary>
             Gets or sets a value that indicates whether to keep the content of responses by default,
             for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
             </summary>
             
             <remarks>
             If this property is set to <b>false</b> then the content of every response to
             this <see cref="T:Facilita.Web.Request"/> will be discarded, 
             and it will not be possible to examine the <i>content</i> using the <see cref="T:Facilita.Web.Response"/> class
             (but other information will still be accessible in the <see cref="T:Facilita.Web.Response"/> objects).
             </remarks>
            
             <value><b>true</b> if the content of responses will be kept by default; otherwise, <b>false</b>.</value>
             
             <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent"/>
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
             <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultKeepAllSubRequestContent">
            <summary>
            Gets or sets a value that indicates whether the content of responses to sub-requests should be kept,
            for any subsequent <see cref="T:Facilita.Web.Request"/> objects created by this WebBrowser.
            </summary>
            
            <remarks>
            If this property is set to <b>false</b>, then all the responses to sub-requests will be discarded.
            <para>
            <note type="warning">There is a 
            significant performance penalty to keep the sub-request content, so this property should
            only be set to <b>true</b> if it is necessary to examine the content of sub-responses.</note>
            </para>
            </remarks>
            
            <value><b>true</b> if the content of responses to sub-requests will be kept by default; otherwise, <b>false</b>.</value>
            
            <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
            <seealso cref="P:Facilita.Web.WebBrowser.DefaultKeepContent"/>
            <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentType(System.String)"/>
            <seealso cref="M:Facilita.Web.WebBrowser.AddDefaultKeepSubRequestContentUrl(System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.IsLoggingEnabled">
             <summary>
             Gets a value that indicates whether detailed HTTP logging has been enabled for this Virtual User.
             </summary>
            
             <value><b>true</b> if detailed HTTP logging has been enabled for this Virtual User; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.MaxNetworkErrors">
             <summary>
             Gets or sets the maximum number of network errors to accept before the script is terminated.
             </summary>
            
             <value>The maximum number of network errors permitted.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ConnectionsPerServer">
             <summary>
             Gets or sets the maximum number of connections allowed per server for a WinHTTP handler.
             </summary>
             
             <remarks>
             The default value is INFINITE.
             </remarks>
            
             <value>The maximum number of connections allowed per server for a WinHTTP handler.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">This property is only supported if the WinHTTP handler is currently in use.</exception>
        </member>
        <member name="P:Facilita.Web.WebBrowser.AccessType">
             <summary>
             Gets the <i>dwAccessType</i> parameter to be passed to InternetOpen() used by WinInet/WinHTTP.
             </summary>
             
             <remarks>
             To set the <i>dwAccessType</i> parameter, call the <see cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/> method.
             </remarks>
            
             <value>The <i>dwAccessType</i> parameter.</value>
             
             <exception cref="T:Facilita.Exception.NotSupportedException">Either the WinInet or WinHTTP handler is currently in use, for which this property is not supported.</exception>
             
             <seealso cref="M:Facilita.Web.WebBrowser.SetAccess(System.Int32,System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.MinorVersion">
             <summary>
             Gets or sets the minor HTTP version number.
             </summary>
             
             <remarks>
             The minor version number follows the dot, so for example
             <c>HTTP 1.0</c> has a minor version number of <c>0</c>.
             <para>
             <note type="note">This property only applies to WinInet and WinHTTP connections.</note>
             </para>
             </remarks>
            
             <value>The minor HTTP version number.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.User">
             <summary>
             Gets or sets the username that will be used for HTTP authentication.
             </summary>
             
             <remarks>
             If the web server returns an HTTP <c>401 (Unauthorized)</c> or <c>407 (Proxy Authentication Required)</c> response to 
             a request, then eggPlant Performance will automatically retry the request with an additional <c>"Authorization"</c> HTTP header,
             using this username.
             </remarks>
            
             <value>The username that will be used for HTTP authentication.</value>
             
             <seealso cref="P:Facilita.Web.WebBrowser.Password"/>
             <seealso cref="M:Facilita.Web.WebBrowser.SetUserPassword(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.Password">
             <summary>
             Gets or sets the password that will be used for HTTP authentication.
             </summary>
             
             <remarks>
             If the web server returns an HTTP <c>401 (Unauthorized)</c> or <c>407 (Proxy Authentication Required)</c> response to 
             a request, then eggPlant Performance will automatically retry the request with an additional <c>"Authorization"</c> HTTP header,
             using this password.
             </remarks>
            
             <value>The password that will be used for HTTP authentication.</value>
             
             <seealso cref="P:Facilita.Web.WebBrowser.User"/>
             <seealso cref="M:Facilita.Web.WebBrowser.SetUserPassword(System.String,System.String)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.DefaultCharactersAllowedInPostedForm">
            <summary>
            Gets or sets the characters that, by default, will NOT be percent-encoded when a <see cref="T:Facilita.Web.Form"/> is sent to the web server using a POST request.
            </summary>
            
            <remarks>
            By default, a character will be percent-encoded within a form if it is:
            <ul>
            <li>Outside the ASCII range OR</li>
            <li>Not an alpha-numeric character AND not in this list of allowed characters</li>
            </ul>
            <para>
            By default, the allowed list of characters is as follows:
            </para>
            <list type="table">
            <listheader><term>Character</term><description>Name</description></listheader>
            <item><term><c>' '</c></term><description>space</description></item>
            <item><term><c>'-'</c></term><description>hyphen</description></item>
            <item><term><c>'_'</c></term><description>underscore</description></item>
            <item><term><c>'.'</c></term><description>full stop</description></item>
            <item><term><c>'*'</c></term><description>asterisk</description></item>
            </list>
            </remarks>
            
            <value>The characters that will not be encoded.</value>
            
            <seealso cref="P:Facilita.Web.Request.CharactersAllowedInPostedForm"/>
            <seealso cref="M:Facilita.Web.Request.SetMessageBody(Facilita.Web.Form)"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.IsLoggingSuspended">
            <summary>
            Gets a value that indicates whether detailed HTTP logging has been suspended for this Virtual User.
            </summary>
            
            <value><b>true</b> if detailed HTTP logging has been suspended for this Virtual User; otherwise, <b>false</b>.</value>
            
            <seealso cref="M:Facilita.Web.WebBrowser.SuspendLogging"/>
            <seealso cref="M:Facilita.Web.WebBrowser.ResumeLogging"/>
        </member>
        <member name="P:Facilita.Web.WebBrowser.IsDynatraceIntegrationEnabled">
             <summary>
             Gets or sets a value that indicates whether dynaTrace integration is enabled.
             </summary>
             
             <remarks>
             When dynaTrace integration is enabled, a special dynaTrace HTTP header is sent 
             with each HTTP request.
             </remarks>
            
             <value><b>true</b> if dynaTrace integration is enabled; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowser.ResponseWithNoExpiryInformationIsFresh">
            <summary>
            Gets or sets a value that indicates whether a response from a web server that does not contains any
            expiry information (such as an "Expires" or "Cache-Control, max-age" header) is treated as expired or not.
            </summary>
            
            <remarks>
            Usually, a response from a web server will have an "Expires" header, which gives the date/time after which the response
            is considered stale. However, if a response does not contain any expiry information, then it is up to the browser to
            decide whether or not a response should be considered fresh or not. Most browsers wil consider the response to be stale, and
            so will re-request it from the server. However, there may be cases where you want th opposite behaviour (i.e. consider the response
            to be fresh and so do not re-request it). This can be achieved by setting this property to <c>true</c>. 
            The default value for this property is <c>false</c>.
            </remarks>
            
            <value><b>true</b> if a response with no expiry information is considered to be fresh; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Web.WebBrowserScript">
             <summary>
             Represents a Web C# Virtual User Script.
             </summary>
             
             <remarks>
             When a test containing Web C# Virtual Users is run, a <see cref="T:Facilita.Web.WebBrowserVirtualUser"/> object is created
             by the eggPlant Performance engine for every Virtual User in the test. These WebBrowserVirtualUser objects
             runs scripts/workflows by creating instances of script classes (which are subclasses of this WebBrowserScript class)
             and calling the <b>Script()</b> method on them.
             <para>
             Whenever a Web C# Virtual User Script is created using eggPlant Performance Studio,
             either by recording a web trace and generating the script automatically
             or by creating a blank script,
             a template is used to fill in the basic structure of the script.
             </para>
             <para>
             <code language="cs">
             namespace com.testplant.testing
             {
                 public class MyNewWebCSScript : Facilita.Web.WebBrowserScript
                 {
                     public override void Pre()
                     {
                         base.Pre();
                         // Put any code that needs to execute at the start of the test here
                     }
             
                     public override void Script()
                     {
                         // Place your iterated script code here.
                     }
                 }
             }
             </code>
             </para>
             <para>
             The name you give your script in eggPlant Performance Studio will be used as the name
             of the class in the script file, and the class will be a subclass of WebBrowserScript.
             (If you have customised the Web C# Virtual User type as outlined in the description
             of the <see cref="T:Facilita.Web.WebBrowserVirtualUser"/> class, then the script class will be a subclass
             of the VU Script source class, which will be a subclass of WebBrowserScript.)
             </para>
             <para>
             In eggPlant Performance Studio you can define a test which includes a Virtual User Group 
             running your Web C# Virtual User Script (or a workflow containing your script).
             When the test is run in Test Controller, then code written in the <b>Script()</b>
             method will execute. The <b>Script()</b> method will be called a number of times,
             relating to the number of iterations that the VU Group is set to perform.
             This may be a fixed number per test, or a VU Group can be set to run continuously for a certain
             period of time.
             </para>
             </remarks>
            
             <seealso cref="T:Facilita.Web.WebBrowserVirtualUser"/>
        </member>
        <member name="M:Facilita.Web.WebBrowserScript.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Web.WebBrowserScript.GetProtocol(System.String,System.String)">
             <summary>
             Gets a <see cref="T:Facilita.Web.Protocol"/> by looking up a string in this Virtual User's data dictionary.
             </summary>
             
             <example>
             The following example demonstrates looking for a protocol in a Virtual User's data dictionary.
             <code language="cs">
             // Look in the data dictionary for the key "protocol1". If this key doesn't exist, then default to Protocol.HTTP
             Protocol protocol1 = GetProtocol("protocol1", "http");
             </code>
             </example>
            
             <param name="key">The key to look for in the data dictionary.</param>
             <param name="defaultValue">The default value to use if the specified key does not exist in this Virtual User's data dictionary.</param>
             
             <returns>The <see cref="T:Facilita.Web.Protocol"/>, or a <see cref="T:Facilita.Web.Protocol"/> relating to the <paramref name="defaultValue"/> parameter.</returns>
        </member>
        <member name="P:Facilita.Web.WebBrowserScript.WebBrowser">
             <summary>
             Gets the <see cref="T:Facilita.Web.WebBrowser"/> belonging to this Virtual User.
             </summary>
            
             <value>The <see cref="T:Facilita.Web.WebBrowser"/> belonging to this Virtual User.</value>
        </member>
        <member name="P:Facilita.Web.WebBrowserScript.VU">
             <summary>
             Gets the <see cref="T:Facilita.Web.WebBrowserVirtualUser"/> object that is executing this script.
             </summary>
            
             <value>The <see cref="T:Facilita.Web.WebBrowserVirtualUser"/> object that is executing this script.</value>
        </member>
        <member name="T:Facilita.Web.WebBrowserVirtualUser">
            <summary>
            Represents a Web C# Virtual User.
            </summary>
            
            <remarks>
            When a test containing Web C# Virtual Users is run, a WebBrowserVirtualUser object is created
            by the eggPlant Performance engine for every Virtual User in the test. These WebBrowserVirtualUser objects
            runs scripts/workflows by creating instances of your script classes (which are subclasses of <see cref="T:Facilita.Web.WebBrowserScript"/>)
            and calling the <b>Script()</b> method on them.
            <para>
            Each instance of WebBrowserVirtualUser has a separate <see cref="T:Facilita.Web.WebBrowser"/> object that can be used
            to send HTTP requests to a web server. This has two implications:
            <ul>
            <li>Each Virtual User has a different cache and WebBrowser settings</li>
            <li>If a Virtual User is running a workflow containing multiple scripts, then changes to
            the Virtual User's WebBrowser object in one script will affect the other scripts too</li>
            </ul>
            </para>
            <para>
            The WebBrowser object can be accessed from within your <b>Script()</b> method using the <see cref="P:Facilita.Web.WebBrowserScript.WebBrowser"/> property.
            </para>
            <para>
            When developing Web scripts, it is recommended to customise the Web C# Virtual User type,
            by performing the following actions in eggPlant Performance Studio:
            <ul>
            <li>Under <b>Workspace/Virtual Users</b>, right-click <b>Web C# Virtual User</b>, and then click <b>New VU Type</b></li>
            <li>Type a name (which will be used as the class name) and a description</li>
            <li>Expand the newly-created custom Virtual User type, and the <b>Source</b> folder</li>
            <li>Edit the VU source file (the class which extends WebBrowserVirtualUser) by adding methods
            that can be called from any script which is based on your custom Virtual User, and/or overriding the methods in WebBrowserVirtualUser.</li>
            </ul>
            </para>
            <para>
            The other source file created for the custom Virtual User type is a VU Script source file, which is a class that extends <see cref="T:Facilita.Web.WebBrowserScript"/> and will be the base class of any script files
            you create with the custom Virtual User type.
            </para>
            </remarks>
            
            <seealso cref="T:Facilita.Web.WebBrowserScript"/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.AtStartOfIteration">
            <inheritdoc/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.OnStartInitialSection">
            <inheritdoc/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.OnStartFinalSection">
            <inheritdoc/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.AttachLogMessageSender(Facilita.Fc.Runtime.IMessageSender)">
             <summary>
             For internal use only.
             </summary>
            
             <param name="messageSender">The message sender.</param>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.PrepareRequest(Facilita.Web.Request)">
             <summary>
             This method is called immediately before a <see cref="T:Facilita.Web.Request"/> object is sent to the web server.
             </summary>
             
             <remarks>
             If <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/> is called within a <b>Script()</b> method,
             this method will be called before the top-level request is sent to the web server.
             The <paramref name="request"/> parameter is a reference to the <see cref="T:Facilita.Web.Request"/> object on which
             Send() (or SendTopLevel()) was called. It can be modified prior to sending.
             <para>
             Override this method to modify every request (or a selection of requests based on criteria)
             before they are sent to the web server.
             </para>
             </remarks>
            
             <param name="request">A request that is about to be sent to the web server.</param>
             
             <seealso cref="M:Facilita.Web.WebBrowserVirtualUser.ProcessResponse(Facilita.Web.Response)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.ProcessResponse(Facilita.Web.Response)">
            <summary>
            This method is called immediately after a <see cref="T:Facilita.Web.Response"/> is returned from the web server.
            </summary>
            
            <remarks>
            If <see cref="M:Facilita.Web.Request.Send"/> or <see cref="M:Facilita.Web.Request.SendTopLevel"/> is called within a <b>Script()</b> method,
            this method will be called before the <see cref="T:Facilita.Web.Response"/> object is returned.
            The <paramref name="response"/> parameter is a reference to the Response object which is about to be returned by the 
            Send() (or SendTopLevel()) method. It can be modified prior to returning.
            <para>
            Override this method to modify every response (or a selection of responses based on criteria)
            after they are returned by the web server.
            </para>
            </remarks>
            
            <param name="response">The response that has just arrived from the web server.</param>
            
            <seealso cref="M:Facilita.Web.WebBrowserVirtualUser.PrepareRequest(Facilita.Web.Request)"/>
        </member>
        <member name="M:Facilita.Web.WebBrowserVirtualUser.GetProtocol(System.String,System.String)">
             <summary>
             Gets a <see cref="T:Facilita.Web.Protocol"/> by looking up a string in this Virtual User's data dictionary.
             </summary>
             
             <example>
             The following example demonstrates looking for a protocol in a Virtual User's data dictionary.
             <code language="cs">
             // Look in the data dictionary for the key "protocol1". If this key doesn't exist, then default to Protocol.HTTP
             Protocol protocol1 = GetProtocol("protocol1", "http");
             </code>
             </example>
            
             <param name="key">The key to look for in the data dictionary.</param>
             <param name="defaultValue">The default value to use if the specified key does not exist in this Virtual User's data dictionary.</param>
             
             <returns>The <see cref="T:Facilita.Web.Protocol"/>, or a <see cref="T:Facilita.Web.Protocol"/> relating to the <paramref name="defaultValue"/> parameter.</returns>
        </member>
        <member name="P:Facilita.Web.WebBrowserVirtualUser.WebBrowser">
             <summary>
             Gets the <see cref="T:Facilita.Web.WebBrowser"/> belonging to this Virtual User.
             </summary>
            
             <value>The <see cref="T:Facilita.Web.WebBrowser"/> belonging to this Virtual User.</value>
        </member>
    </members>
</doc>
