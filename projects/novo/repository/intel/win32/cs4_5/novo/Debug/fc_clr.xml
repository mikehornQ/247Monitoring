<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fc_clr</name>
    </assembly>
    <members>
        <member name="T:Facilita.Fc.Runtime.ConnectionPool">
            <summary>
            Provides a pool of MessageStreams (used by the SharedDataServer class)
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.ConnectionPool.GetNext(System.TimeSpan)">
            <summary>
            Get the next available connection
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.ConnectionPool.Free(Facilita.Fc.Runtime.ConnectionPool.Connection)">
            <summary>
            Marks a connection as free, so it can be used again by someone else
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Facilita.Fc.Runtime.ConnectionPool.Connection">
            <summary>
            Handles connecting/disconnecting a MessageStream
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.TransactionData">
            <summary>
            Provides data about a particular transaction.
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.TransactionData.Name">
            <summary>
            Get the name of the transaction
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.TransactionData.LastDuration">
            <summary>
            Get the duration (in milliseconds) of the last recorded instance of this transaction.
            </summary>
            
            <remarks>Note that this is the last duration recorded for the current <see cref="T:Facilita.Fc.Runtime.VirtualUser"/>, NOT for the entire test.</remarks>
        </member>
        <member name="P:Facilita.Fc.Runtime.TransactionData.MinimumDuration">
            <summary>
            Get the minimum recorded duration (in milliseconds) of this transaction.
            </summary>
            
            <remarks>Note that this is the minimum duration recorded for the current <see cref="T:Facilita.Fc.Runtime.VirtualUser"/>, NOT for the entire test.</remarks>
        </member>
        <member name="P:Facilita.Fc.Runtime.TransactionData.MaximumDuration">
            <summary>
            Get the maximum recorded duration (in milliseconds) of this transaction.
            </summary>
            
            <remarks>Note that this is the maximum duration recorded for the current <see cref="T:Facilita.Fc.Runtime.VirtualUser"/>, NOT for the entire test.</remarks>
        </member>
        <member name="P:Facilita.Fc.Runtime.TransactionData.MeanDuration">
            <summary>
            Get the mean duration (in milliseconds) of this transaction.
            </summary>
            
            <remarks>Note that this is the mean duration recorded for the current <see cref="T:Facilita.Fc.Runtime.VirtualUser"/>, NOT for the entire test.</remarks>
        </member>
        <member name="T:Facilita.Exception.FCException">
            <summary>
            An <see cref="T:System.Exception"/> thrown by the eggPlant Performance engine.
            All other eggPlant Performance exceptions are sub-classes of this type.
            </summary>
        </member>
        <member name="F:Facilita.Exception.FCException._code">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Exception.FCException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.FCException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="P:Facilita.Exception.FCException.Code">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Facilita.Exception.BadValueException">
            <summary>
            The exception that is thrown when an input value is incorrect.
            </summary>
        </member>
        <member name="M:Facilita.Exception.BadValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.BadValueException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="T:Facilita.Exception.ContextTerminationException">
            <summary>
            A special exception that is thrown by the eggPlant Performance engine when the current script needs to be terminated.
            You should never catch this exception in your script code.
            </summary>
            
            <remarks>
            For example, <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.ExitVU"/> throws this exception in order
            to terminate the current Virtual User.
            </remarks>
        </member>
        <member name="M:Facilita.Exception.ContextTerminationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.ContextTerminationException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="T:Facilita.Exception.NoSuchValueException">
            <summary>
            The exception that is thrown when a requested value does not exist.
            </summary>
        </member>
        <member name="M:Facilita.Exception.NoSuchValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.NoSuchValueException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="T:Facilita.Exception.NotAllowedException">
            <summary>
            The exception that is thrown when an operation is not allowed.
            </summary>
        </member>
        <member name="M:Facilita.Exception.NotAllowedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.NotAllowedException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="T:Facilita.Exception.ScriptContextTerminationException">
            <summary>
            A special exception that is thrown by the eggPlant Performance engine when the current script needs to be terminated.
            You should never catch this exception in your script code.
            </summary>
            
            <remarks>
            For example, <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.NextIteration"/> throws this exception in order
            to terminate the current iteration.
            </remarks>
        </member>
        <member name="M:Facilita.Exception.ScriptContextTerminationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Facilita.Exception.ScriptContextTerminationException"/> class with a specified error message.
            </summary>
            
            <param name="s">A string that describes the error.</param>
        </member>
        <member name="T:Facilita.Fc.Runtime.ActionType">
            <summary>
            Describes various actions that can be taken in the event of an error.
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_RAISE_EXCEPTION">
            <summary>
            Raises an exception.
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_EXIT_VU">
            <summary>
            Causes the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> to exit.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.ExitVU"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_FINISH_ITERATING">
            <summary>
            Causes the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> to finish iterating.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.FinishIterating"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_NEXT_SEQUENCE">
            <summary>
            Causes the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> to move onto the next sequence of scripts.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.NextSequence"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_NEXT_ITERATION">
            <summary>
            Causes the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> to move onto the next iteration.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.NextIteration"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_NEXT_SCRIPT">
            <summary>
            Causes the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> to move onto the next script.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.NextScript"/>.
            </remarks>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_WARNING">
            <summary>
            Generates a warning message.
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_ERROR">
            <summary>
            Generates an error message.
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.ActionType.ACT_NONE">
            <summary>
            Takes no action.
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.AlertSeverity">
            <summary>
            The possible severity levels of an alert
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.AlertSeverity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.AlertSeverity.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.AlertSeverity.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.AlertManager">
            <summary>
            Singleton that provides method for raising alerts.
            Alerts are logged in a file and are sent to the Test Controller via an asynchronous message stream
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.AlertManager.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)">
            <summary>
            Raise an alert
            </summary>
            <param name="severity"></param>
            <param name="description"></param>
        </member>
        <member name="M:Facilita.Fc.Runtime.AlertManager.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String,System.Int32,System.String,System.String)">
            <summary>
            Raise an alert on a specific group and VU
            </summary>
            <param name="severity"></param>
            <param name="group"></param>
            <param name="virtualUser"></param>
            <param name="script"></param>
            <param name="description"></param>
        </member>
        <member name="T:Facilita.Fc.Runtime.IDataDictionary">
            <summary>
            Represents a collection of name/value pairs.
            </summary>
            
            <remarks>
            The DataDictionary class is the base of all eggPlant Performance <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> classes and the <see cref="T:Facilita.Fc.Runtime.IDataTable"/> class.
            A Data Dictionary is a collection of key/value pairs where <i>key</i> is a keyword used to extract a value. Every <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> in a running test has a Data Dictionary. 
            Suppose a Data Dictionary contains a key <c>"counter"</c> whose value is <c>22</c>. To extract the value from the dictionary use the following code:
            <code>
            int count = GetInt("counter"); // count is now set to 22
            </code>
            <code>
            string count = GetString("counter"); // count is now set to "22"
            </code>
            A Data Dictionary can be populated from a Data Dictionary File. This is a text file containing lines of text in the form <c>key=value</c>.
            For example:
            <code>
            host = 192.168.2.7
            port = 1245
            user = Jane Smith
            password = myPassword
            </code>
            eggPlant Performance Studio enables you to associate Data Dictionary files with a <b>test</b> and multiple VU Groups.  The key/value pairs in the files 
            are loaded into each VU's data dictionary when the test is initialized.  Studio also allows you to add values using the Inline-Data form of 
            a test's Data properties.  You may also add values within your script code using the <see cref="M:Facilita.Fc.Runtime.IDataDictionary.Add(Facilita.Fc.Runtime.IDataDictionary)"/> or <see cref="M:Facilita.Fc.Runtime.IDataDictionary.Set(System.String,System.Object)"/> methods described in this reference.
            The methods and properties described in this reference can all be accessed directly from within the code of any script class as the base script class, <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> inherits IDataDictionary.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetString(System.String)">
            <summary>
            Returns a string value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A string value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetString(System.String,System.String)">
            <summary>
            Returns a string value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A string value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetInt(System.String)">
            <summary>
            Returns an integer value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An integer value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetInt(System.String,System.Int32)">
            <summary>
            Returns an integer value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An integer value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetLong(System.String)">
            <summary>
            Returns a long value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A long value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetLong(System.String,System.Int64)">
            <summary>
            Returns a long value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A long value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetFloat(System.String)">
            <summary>
            Returns a float value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A float value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetFloat(System.String,System.Single)">
            <summary>
            Returns a float value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A float value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetDouble(System.String)">
            <summary>
            Returns a double value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A double value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetDouble(System.String,System.Double)">
            <summary>
            Returns a double value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A double value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetBoolean(System.String)">
            <summary>
            Returns a boolean value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A boolean value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetBoolean(System.String,System.Boolean)">
             <summary>
             Returns a boolean value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
             </summary>
             
             <example>
             The following example demonstrates getting a boolean from the dictionary.
             <code language="cs">
             bool retry = GetBoolean("retryLogon", true);
             </code>
             </example>
            
             <param name="key">The key to be looked up in the dictionary.</param>
             <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
             
             <returns>A boolean value held in the dictionary, or <paramref name="defaultValue"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.Get(System.String)">
            <summary>
            Returns a reference to an object held in the dictionary.
            </summary>
            
            <remarks>
            The following example demonstrates getting an object from the dictionary.
            <code language="cs">
            object obj = Get("employee");
            </code>
            </remarks>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An object value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.Get(System.String,System.Object)">
            <summary>
            Returns a reference to an object held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <remarks>
            The following example demonstrates getting an object from the dictionary.
            <code language="cs">
            object obj = Get("employee", new Employee());
            </code>
            </remarks>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An object value held in the dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the key/value pairs in this dictionary.
            </summary>
            
            <returns>An enumerator for iterating over the key/value pairs in this dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.Add(Facilita.Fc.Runtime.IDataDictionary)">
            <summary>
            Merges another Data Dictionary into this one.
            </summary>
            
            <remarks>
            The referenced IDataDictionary is merged into this IDataDictionary. All keys and values are added to the IDataDictionary. Any existing keys will 
            have their values replaced.
            </remarks>
            
            <param name="d">The DataDictionary to be merged.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetString(System.String,System.String)">
            <summary>
            Sets a string value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a string value.
            <code language="cs">
            SetString("hostName", "www.testplant.com");
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.IDataDictionary.GetString(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetInt(System.String,System.Int32)">
            <summary>
            Sets an integer value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a integer value.
            <code language="cs">
            SetInt("port", 8080);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetLong(System.String,System.Int64)">
            <summary>
            Sets a long value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a long value.
            <code language="cs">
            SetLong("timestamp", 9156598231230);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetFloat(System.String,System.Single)">
            <summary>
            Sets a float value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a float value.
            <code language="cs">
            SetFloat("amount", 123.45);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetDouble(System.String,System.Double)">
            <summary>
            Sets a double value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a double value.
            <code language="cs">
            SetDouble("amount", 123.45);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets a boolean value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a boolean value.
            <code language="cs">
            SetBoolean("retryLogon", false);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.Set(System.String,System.Object)">
            <summary>
            Sets an object value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a DateTime object.
            <code language="cs">
            Set("today", DateTime.Now);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.SetList(System.String,System.Collections.ArrayList)">
            <summary>
            Sets a list value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. If the <paramref name="key"/> already exists in the dictionary then the old value is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a list.
            <code language="cs">
            ArrayList staff = new ArrayList();
            staff.AddRange(new string[] = {"Peter","Gordon","Ian"});
            SetList("directors", staff);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="list"/> in the dictionary.</param>
            <param name="list">The value to be associated with the <paramref name="key"/> in the dictionary.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.HasKey(System.String)">
            <summary>
            Determines whether the specified <paramref name="key"/> is contained within the dictionary.
            </summary>
            
            <example>
            The following example demonstrates checking if the dictionary contains a particular key.
            <code language="cs">
            if (myDictionary.HasKey("newHostName"))
            {
                // do something
            }
            else
            {
                // do something else
            }
            </code>
            </example>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns><b>true</b> if the dictionary contains the specified <paramref name="key"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetList(System.String)">
            <summary>
            Returns a list value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An ArrayList value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.IDataDictionary.GetList(System.String,System.Collections.ArrayList)">
            <summary>
            Returns a list held in the dictionary, or the <paramref name="defaultList"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultList">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An ArrayList value held in the dictionary, or <paramref name="defaultList"/> if the <paramref name="key"/> could not be found.</returns>
        </member>
        <member name="P:Facilita.Fc.Runtime.IDataDictionary.Name">
            <summary>
            Gets or sets the name of this dictionary.
            </summary>
            
            <value>The name of the Data Dictionary.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.IDataDictionary.ReadOnly">
            <summary>
            Gets a value that indicates whether this dictionary is read-only.
            </summary>
            
            <value><b>true</b> if this dictionary is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.IDataDictionary.Keys">
            <summary>
            Gets an enumerator that can be used to iterate over the keys in this dictionary.
            </summary>
            
            <value>An enumerator that can be used to iterate over the keys in this dictionary.</value>
        </member>
        <member name="T:Facilita.Fc.Runtime.IDataTable">
            <summary>
            The IDataTable interface provides script functionality to allow direct control over a named Data Table by a Virtual User.
            </summary>
            
            <remarks>
            In cases when a data table has multiple rows of data assigned to each Virtual User, it is set to automatically advance on each iteration. 
            Sometimes it can be useful for auto advance to be switched off.  This allows the Virtual User to directly control row advancement through 
            the assigned data rows (a section). A named Data Table allows such control.
            </remarks>
            
            <example>
            The following example demonstrates accessing all the rows in a named Data Table.
            <code language="cs">
            // obtain a named Data Table
            IDataTable dt = GetDataTable("actors.txt");
            // loop through all rows in the Data Table
            while (dt.MoveNext())
            {
                // write out to the event log the current value of the column 'surname'
                WriteMessage("Surname: " + dt.GetString("surname"));
            }
            
            WriteMessage("No more rows");
            </code>
            </example>
        </member>
        <member name="P:Facilita.Fc.Runtime.IDataTable.Controlled">
            <summary>
            Gets a value that indicates whether the Data Table is automatically advanced to the next row at the end of each iteration.
            </summary>
            
            <remarks>
            Data Table row advancement is determined by a runtime setting. If set to <b>Move to next row on each iteration</b> this method returns <b>true</b>.
            </remarks>
            
            <value><b>true</b> if the Data Table is under direct Virtual User control; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.IDataTable.Size">
            <summary>
            Gets the number of rows in the DataTable that are available to the Virtual User.
            </summary>
            
            <remarks>
            <note type="note">Note that this property returns the number of rows that have been assigned to the Virtual User, NOT the total number of rows in the table.</note>
            </remarks>
            
            <value>The number of rows in the DataTable that are available to the Virtual User.</value>
        </member>
        <member name="T:Facilita.Fc.Runtime.DataTableRowAllocator">
            <summary>
            Allocates rows in a data table to a VU index, according to the DataTableOptions that the user has selected
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.GroupSnapshot">
            <summary>
            Represents the state of a group at a point in time
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.Metric">
            <summary>
            Represents a user-defined metric that can be recorded by eggPlant Performance. 
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.Metric.#ctor(System.String,System.Int32,System.Boolean)">
             <summary>
             Initializes a new instance of the Metric class, specifying whether the metric passed or failed.
             </summary>
             
             <param name="name">The name of the metric.</param>
             <param name="value">The value associated with the metric.</param>
             <param name="pass">Whether the metric passed or failed.</param>
            
             <exception cref="T:Facilita.Exception.BadValueException">The name of the metric is not valid.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.Metric.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the Metric class.
             </summary>
             
             <param name="name">The name of the metric.</param>
             <param name="value">The value associated with the metric.</param>
            
             <exception cref="T:Facilita.Exception.BadValueException">The name of the metric is not valid.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.Metric.ToString">
            <summary>
            Returns a string that represents the current Metric.
            </summary>
            
            <remarks>
            The metric is represented as a <c>name=value</c> pair. For failed metrics <c>",F"</c> is appended.
            <para>
            Sample output: <c>myMetric=12,F</c>
            </para>
            </remarks>
            
            <returns>A string that represents the current Metric.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.Metric.FromString(System.String)">
            <summary>
            Initializes an instance of the Metric class, from the specified <paramref name="text"/>.
            </summary>
            
            <remarks>
            Takes a string in the following format and constructs a Metric instance.
            <para>
            <c>myMetric01=12,F</c>
            </para><para>
            For pass values of <b>true</b> omit the <c>",F"</c> from the string.
            </para><para>
            <c>myMetric02=34</c>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates constructing a Metric object from a string.
            <code language="cs">
            // construct a Metric instance
            string metricText = "myMetric01=12,F";
            Metric myMetric = Metric.FromString(metricText);
            </code>
            </example>
            
            <param name="text">A string that can converted into a Metric instance.</param>
            
            <returns>A metric instance.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.Metric.ToString"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.Metric.Name">
            <summary>
            Gets the name of the metric.
            </summary>
            
            <value>The name of the metric.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.Metric.Value">
            <summary>
            Gets the value of the metric.
            </summary>
            
            <value>The value of the metric.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.Metric.Pass">
            <summary>
            Gets a value that indicates whether the metric passed or failed.
            </summary>
            
            <value><b>true</b> if the metric passed; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Facilita.Fc.Runtime.MetricCollection">
            <summary>
            The MetricCollection class allows multiple metrics to be recorded as a single entry in the event log with a common timestamp. 
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.#ctor">
            <summary>
            Initializes a new instance of the MetricCollection class.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.#ctor(System.Collections.Generic.IEnumerable{Facilita.Fc.Runtime.Metric})">
            <summary>
            Initializes a new instance of the MetricCollection class, containing the specified <paramref name="metrics"/>.
            </summary>
            
            <param name="metrics">A collection of metrics to add to this collection.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.Add(System.String,System.Int32,System.Boolean)">
             <summary>
             Adds a metric value to this collection, specifying whether the metric passed or failed. 
             </summary>
             
             <param name="name">The name of the metric to record.</param>
             <param name="value">The value of the metric to record.</param>
             <param name="pass">Indicates whether the metric has passed or failed.</param>
            
             <exception cref="T:Facilita.Exception.BadValueException">A metric with the specified <paramref name="name"/> already exists in the collection.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.Add(System.String,System.Int32)">
             <summary>
             Adds a metric value to this collection.
             </summary>
             
             <param name="name">The name of the metric to record.</param>
             <param name="value">The value of the metric to record.</param>
            
             <exception cref="T:Facilita.Exception.BadValueException">A metric with the specified <paramref name="name"/> already exists in the collection.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.AddMany(System.Collections.Generic.IEnumerable{Facilita.Fc.Runtime.Metric})">
            <summary>
            Adds a collection of metrics to this collection.
            </summary>
            
            <param name="metrics">A collection of metrics to add to the collection.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.Get(System.String)">
            <summary>
            Retrieves a metric from this collection.
            </summary>
            
            <param name="metricName">The name of the metric to retrieve.</param>
            
            <returns>The requested metric.</returns>
            
            <exception cref="T:Facilita.Exception.BadValueException">No metric with the specified <paramref name="metricName"/> could be found in the collection.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.Contains(System.String)">
            <summary>
            Determines whether the specified metric is contained in this MetricCollection.
            </summary>
            
            <param name="metricName">The name of the metric to check.</param>
            
            <returns><b>true</b> if the collection contains <paramref name="metricName"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.ToString">
            <summary>
            Returns a string that represents the current MetricCollection.
            </summary>
            
            <returns>A string that represents all the elements in the current MetricCollection.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.FromString(System.String)">
             <summary>
             Initializes an instance of the MetricCollection class, from the specified <paramref name="text"/>.
             </summary>
             
             <remarks>
             Takes a string in the following format and constructs a MetricCollection instance.
             <para>
             <c>myMetric01=12,F;myMetric02=101,myMetric03=34</c>
             </para><para>
             For pass values of <b>true</b> omit the <c>",F"</c> from each successful metric.
             </para><para>
             <c>myMetric01=12;myMetric02=101,myMetric03=34</c>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates creating a MetricCollection object from a string.
             <code language="cs">
             // construct a MetricCollection instance
             string metricText = "myMetric01=12,F;myMetric02=101,myMetric03=34";
             MetricCollection myCollection = MetricCollection.FromString(metricText);
             </code>
             </example>
            
             <param name="text">A string that can converted into a MetricCollection instance.</param>
             
             <returns>A MetricCollection.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.Clear">
            <summary>
            Removes all metrics from this MetricCollection.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.MetricCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the collection.
            </summary>
            
            <returns>An enumerator that iterates over the collection.</returns>
        </member>
        <member name="P:Facilita.Fc.Runtime.MetricCollection.Count">
            <summary>
            Gets the number of metrics in the collection.
            </summary>
            
            <value>The number of metrics in the collection.</value>
        </member>
        <member name="T:Facilita.Fc.Runtime.VirtualUserScript">
            <summary>
            The VirtualUserScript class is the base class of all eggPlant Performance Script classes. All other Virtual User types are specializations of this class. 
            </summary>
            
            <remarks>
            The script wizards (recorders and generators) create <b>Virtual User Scripts</b> with source code files containing classes whose base class is VirtualUserScript
            or one of its specializations. Many of the operations (methods) of VirtualUserScript are delegated to the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> class. 
            Access to the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> instance can be obtained via the <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.VU"/> property.
            <para>
            <note type="note">
            All subclasses of VirtualUserScript must implement the <c>abstract</c> method <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/>, as this is the
            method which is called when the <b>Virtual User Script</b> is executed during a test. A blank <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> method is created
            when a <b>Virtual User Script</b> is created in eggPlant Performance Studio. 
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetGroupSize(System.String)">
            <summary>
            Gets the number of Virtual Users in the specified Virtual User group.
            </summary>
            
            <example>
            The following example demonstrates getting the number of Virtual Users in the group <b>G1</b>.
            <code language="cs">
            int groupSize = GetGroupSize("G1"); 
            </code>
            </example>
            
            <param name="groupName">A Virtual User group.</param>
            
            <returns>The size of the Virtual User group.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetUniqueID(System.String,System.Int32)">
            <summary>
            Gets a test-wide unique identifier for a specified Virtual User within a Virtual User group.
            </summary>
            
            <remarks>
            The first VU has identifier 1.
            </remarks>
            
            <example>
            The following example demonstrates getting the unique identifier for the 5<sup>th</sup> VU in the <b>Supervisors</b> Virtual User group.
            <code language="cs">
            int VuNum = GetUniqueID("Supervisors", 5);
            </code>
            </example>
            
            <param name="groupName">The group name.</param>
            <param name="index">The index of the Virtual User within the group.</param>
            
            <returns>The unique identifier of the Virtual User.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Script">
            <summary>
            This is the method which will be run by the <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> when it executes this script,
            and is where you should write your test script code.
            </summary>
            
            <remarks>
            <note type="note">This is an <c>abstract</c> method and must be overridden in subclasses of VirtualUserScript.
            In scripts created using eggPlant Performance Studio, a blank Script() method is automatically added.</note>
            <para>
            If this script is assigned to a Virtual User group in a test, or is part of a workflow that is
            assigned to a Virtual User group in a test, then the script will be executed when the test is run.
            </para>
            <para>
            If this Virtual User (along with any others in the group) is assigned a single script,
            then the Script() method of the VirtualUserScript object is called once per iteration.
            </para>
            <para>
            If this Virtual User (along with any others in the group) is assigned a workflow, then
            the point at which the Script() method is called depends on which section of the workflow the script is in.
            <ul>
            <li><b>initial</b> sequence of scripts: the Script() method of each VirtualUserScript object
            is called <b>once at the beginning of the test</b>, in the order in which the scripts appear in the sequence.</li> 
            <li><b>repeated</b> sequence of scripts: the Script() method of each VirtualUserScript object
            is called <b>once per iteration</b>, in the order in which the scripts appear in the sequence.</li> 
            <li><b>final</b> sequence of scripts: the Script() method of each VirtualUserScript object
            is called <b>once at the end of the test</b>, in the order in which the scripts appear in the sequence.</li>
            </ul>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Pre">
            <summary>
            This method is called just before this script is executed for the first time.
            </summary>
            
            <remarks>
            Override this method in your VirtualUserScript subclass if you have code which should be run 
            only once, before <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> is executed.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FlushEventLog">
            <summary>
            Flushes the event log to disk.
            </summary>
            
            <remarks>
            Any events still held in-memory are written to the Virtual User event log on disk. 
            This enables the event log file to be viewed before the test has completed.
            <para>
            <note type="note">
            Writing an error event also flushes the log.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetDataDictionary(System.String)">
            <summary>
            Gets the Data Dictionary named with the specified <paramref name="key"/> and assigned to the Virtual User in eggPlant Performance Studio.
            </summary>
            
            <param name="key">The name of the Data Dictionary as it appears in eggPlant Performance Studio.</param>
            
            <returns>The specified Data Dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetDataTable(System.String)">
            <summary>
            Gets the specified Data Table.
            </summary>
            
            <remarks>
            This method allows you to locate the existing Data Table by name. The dictionaries it contains can then be accessed by using the appropriate methods 
            of <see cref="T:Facilita.Fc.Runtime.IDataTable"/>.
            </remarks>
            
            <param name="key">The name of the <see cref="T:Facilita.Fc.Runtime.IDataTable"/>.</param>
            
            <returns>A reference to a named <see cref="T:Facilita.Fc.Runtime.IDataTable"/> object.</returns>
            
            <seealso cref="T:Facilita.Fc.Runtime.IDataTable"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteSystemLog(System.String,System.String)">
            <summary>
            Writes an alert of <b>Error</b> severity to the Alerts table in Test Controller, specifying a <paramref name="heading"/> to prefix to the <paramref name="message"/>.
            </summary>
            
            <remarks>
            This method was included for backwards compatibility with older eggPlant Performance scripts.
            The Test Controller Alerts table is made accessible from the script using WriteSystemLog. WriteSystemLog will add an alert of severity level <b>Error</b>. 
            Other table fields include the time into the test the error alert was raised (HH:MM:SS), the source of the alert (this will always be 'Engine' when 
            called from the script), the index of the VU who raised the alert and the injector that VU was deployed on, the group which that VU was a member of and 
            the script the VU was executing when the alert was raised.
            <para>
            <note type="warning">
            <b>WriteSystemLog must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>, 
            <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/> to output to the VU event log; this can be viewed 
            at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
            </note>
            </para>
            </remarks>
            
            <param name="heading">A string to be prefixed to the output <paramref name="message"/>.</param>
            <param name="message">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteSystemLog(System.String)">
            <summary>
            Writes an alert of <b>Error</b> severity to the Alerts table in Test Controller.
            </summary>
            
            <remarks>
            This method was included for backwards compatibility with older eggPlant Performance scripts.
            The Test Controller Alerts table is made accessible from the script using WriteSystemLog. WriteSystemLog will add an alert of severity level <b>Error</b>. 
            Other table fields include the time into the test the error alert was raised (HH:MM:SS), the source of the alert (this will always be 'Engine' when 
            called from the script), the index of the VU who raised the alert and the injector that VU was deployed on, the group which that VU was a member of and 
            the script the VU was executing when the alert was raised.
            <para>
            <note type="warning">
            <b>WriteSystemLog must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>, 
            <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/> to output to the VU event log; this can be viewed 
            at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
            </note>
            </para>
            </remarks>
            
            <param name="message">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)">
             <summary>
             Writes an alert of the specified <paramref name="severity"/> to the Alerts table in Test Controller.
             </summary>
             
             <remarks>
             <note type="warning">
             <b>RaiseAlert must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>, 
             <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/> to output to the VU event log; this can be viewed 
             at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
             </note>
             </remarks>
            
             <param name="severity">The severity of the alert.</param>
             <param name="message">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String,System.String)">
            <summary>
            Writes a warning message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <param name="id">The warning identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">A warning message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String)">
            <summary>
            Writes a warning message to the VU event log.
            </summary>
            
            <param name="info">A warning message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.Exception)">
            <summary>
            Writes a warning message to the VU event log, consisting of the specified exception
            </summary>
            <param name="e">The exception to write to the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Warn(System.String,System.String,System.String)">
            <summary>
            Writes a warning message and an image link to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            <remarks>
            A warning message is written to the VU event log, and then the event log is flushed.	
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>), and the path passed should be relative to this path.
            </remarks>
            <param name="id">the warning identifier, which appears in the <b>ID</b> column</param>
            <param name="info">an warning message which appears in the <b>Info</b> column</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String,System.String)">
            <summary>
            Writes an error message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="id">The error identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String,System.Exception)">
            <summary>
            Writes an error message to the VU event log, which will include the stack trace of the specified Exception.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
            <param name="e">The stack trace of this Exception will be recorded in the error message.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.Exception)">
            <summary>
            Writes an error message to the VU event log, which will consist of the details of the specified Exception.
            </summary>
            
            /// <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="e">The exception to record in the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String)">
            <summary>
            Writes an error message to the VU event log.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Error(System.String,System.String,System.String)">
            <summary>
            Writes an error message and an image link to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>, and the path passed should be relative to this path.
            </remarks>
            <param name="id">the error identifier, which appears in the <b>ID</b> column</param>
            <param name="info">an error message which appears in the <b>Info</b> column</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Pause(System.Int32)">
            <summary>
            Pauses the execution of the script for a specified <paramref name="interval"/> (modified by <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.PauseFactor"/>).
            </summary>
            
            <remarks>
            The specified <paramref name="interval"/> may be altered by the value of <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.PauseFactor"/>
            or by the runtime options set in eggPlant Performance Studio.
            </remarks>
            
            <param name="interval">The number of milliseconds to pause before executing the next statement.</param>
            
            <returns>The length of time that the script actually paused for, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Pause">
            <summary>
            Pauses the execution of the script.
            </summary>
            
            <remarks>
            The script pauses for a random number of milliseconds between the minimum and maximum values set in eggPlant Performance Studio. 
            The actual pause time may be altered by the value of <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.PauseFactor"/>
            or by the runtime options set in eggPlant Performance Studio.
            </remarks>
            
            <returns>The length of time that the script paused for, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.TimeToPause(System.Int32)">
             <summary>
             Gets the length of time that this Virtual User would pause for if <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Pause(System.Int32)"/>
             were called with the specified <paramref name="interval"/>.
             </summary>
             
             <remarks>
             When calling <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Pause(System.Int32)"/>, a length of time in milliseconds is passed as a parameter.
             The actual pause time may be different, depending on the value of <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.PauseFactor"/> or
             runtime options set in eggPlant Performance Studio. This method returns the actual time that the Virtual User would pause for,
             if <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Pause(System.Int32)"/> were called with the specified <paramref name="interval"/>.
             </remarks>
             
             <param name="interval">The interval, in milliseconds.</param>
            
             <returns>The actual length of the pause, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ClearProgressPoint">
            <summary>
            Clears the current progress point set for this Virtual User.
            </summary>
            
            <remarks>
            This has the effect of clearing the <b>Progress Point</b> column in Test Controller for this Virtual User.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String)">
            <summary>
            Sets a progress point in the VU event log.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String,System.Boolean)">
            <summary>
            Sets a progress point in the VU event log, specifying whether the progress point <i>passed</i>.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text, and whether it <i>passed</i> or <i>failed</i> will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a logon attempt has taken place, and whether it succeeded or failed.
            <code language="cs">
            SetProgressPoint("AtLogon");
            
            string response = ....   // the response from the server
            if (response.Contains("Invalid User or Password"))
            {
                SetProgressPoint("logon", false);   // logon failed
            }
            else
            {
                SetProgressPoint("logon", true);   // logon OK
            }
            </code>
            </example>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
            <param name="pass"><b>true</b> if the progress point should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String,System.String,System.Boolean)">
            <summary>
            Sets a progress point in the VU event log, specifying whether the progress point <i>passed</i>,
            and specifying extra information which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text, and whether it <i>passed</i> or <i>failed</i> will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a logon attempt has taken place, and whether it succeeded or failed.
            <code language="cs">
            SetProgressPoint("AtLogon");
            
            string response = ....   // the response from the server
            if (response.Contains("Invalid User or Password"))
            {
                SetProgressPoint("logon", response, false);   // logon failed
            }
            else
            {
                SetProgressPoint("logon", response, true);   // logon OK
            }
            </code>
            </example>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
            <param name="info">Extra information which appears in the <b>Info</b> column.</param>
            <param name="pass"><b>true</b> if the progress point should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ExitVU">
            <summary>
            Stops execution of this Virtual User.
            </summary>
            
            <remarks>
            The script processing for the Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts 
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log 
            is written. 
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ExitVU(System.Boolean)">
            <summary>
            Stops execution of this Virtual User, specifying whether the script completed successfully.
            </summary>
            
            <remarks>
            The script processing for this Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log
            is annotated with <b>Pass</b> or <b>Fail</b> in the <b>ID</b> column depending on the value of <paramref name="pass"/>. The Virtual User will also
            be counted in the <b>In Error</b> column in Test Controller if <paramref name="pass"/> is <b>false</b>.
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
            
            <param name="pass"><b>true</b> if the script should be considered to have completed successfully; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ExitVU(System.String,System.Boolean)">
            <summary>
            Stops execution of this Virtual User, specifying whether the script completed successfully and a message to display at the end of the event log.
            </summary>
            
            <remarks>
            The script processing for this Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log
            is annotated with <b>Pass</b> or <b>Fail</b> in the <b>ID</b> column depending on the value of <paramref name="pass"/>. The Virtual User will also
            be counted in the <b>In Error</b> column in Test Controller if <paramref name="pass"/> is <b>false</b>.
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
            
            <param name="msg">An information message which appears in the <b>Info</b> column of the <b>end</b> entry.</param>
            <param name="pass"><b>true</b> if the script should be considered to have completed successfully; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.NextIteration">
            <summary>
            Stops execution of the current script, and starts execution of the next iteration.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of the next iteration of scripts is begun. If the sequence of scripts being 
            executed is the <b>initial</b> or <b>final</b> sequence of scripts, then the execution of this sequence is curtailed. Otherwise, the execution of the <b>repeated</b>
            sequence of scripts begins again at the next iteration. 
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.NextSequence">
            <summary>
            Stops execution of the current script and any other scripts in the current sequence, and starts execution of the next sequence of scripts.
            </summary>
            
            <remarks>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FinalSequence">
            <summary>
            Stops execution of the current script and then executes the scripts in the <b>final</b> section of the current workflow.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of all further scripts in the current sequence is curtailed.
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.NextScript">
            <summary>
            Stops execution of the current script, and starts execution of the next script in the sequence.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of the next script in the sequence of scripts to be executed is begun. 
            This method and the return statement are not equivalent. This method should be used in preference to the return statement. 
            Remember that a <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> may have additional methods other than <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> and executing a return statement 
            from anywhere other than the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> method will not exit the execution of the <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> object.
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FinishIterating">
            <summary>
            Prevents further iterations of the <b>iterated</b> sequence of scripts for this Virtual User.
            </summary>
            
            <remarks>
            The current script will continue executing, and any subsequent scripts in the <b>iterated</b> sequence of scripts will also be executed.
            Once the end of the iteration is reached, the Virtual User will not start another iteration but will instead
            execute the scripts in the <b>final</b> sequence of scripts before exiting. 
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)">
            <summary>
            Writes a <b>start transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/> is called with the same <paramref name="id"/>, an <b>end transaction</b> 
            event is written to the VU event log. eggPlant Performance uses the time difference between the events to calculate 
            the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)">
            <summary>
            Writes a <b>start transaction</b> event to the VU event log,
            specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/> is called with the same <paramref name="id"/>, an <b>end transaction</b> 
            event is written to the VU event log. eggPlant Performance uses the time difference between the events to calculate 
            the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetTransactionElapsedTime(System.String)">
            <summary>
            Gets the current elapsed time of the transaction with the specified <paramref name="id"/>.
            </summary>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a transaction has lasted more than 5 seconds.
            <code language="cs">
            StartTransaction("Transaction1");
            
            // do activity
            
            if (GetTransactionElapsedTime("Transaction1") > 5000)
            {
                SetProgressPoint("Activity > 5 Seconds");
            }
            
            // do more activity
            
            EndTransaction("Transaction1", true);
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>The elapsed time of the transaction, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetTransactionElapsedTime(System.String,System.String)">
            <summary>
            Gets the current elapsed time of the transaction with the specified <paramref name="id"/> and <paramref name="tag"/>.
            </summary>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a transaction has lasted more than 5 seconds.
            <code language="cs">
            StartTransaction("Transaction1", "Tag1");
            
            // do activity
            
            StartTransaction("Transaction1", "Tag2");
            if (GetTransactionElapsedTime("Transaction1", "Tag1") > 5000)
            {
                SetProgressPoint("Activity > 5 Seconds");
            }
            
            EndTransaction("Transaction1", true, "Tag1");
            
            // do more activity
            
            EndTransaction("Transaction1", true, "Tag2");
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
            
            <returns>The elapsed time of the transaction, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetTimingElapsedTime">
            <summary>
            Gets the elapsed time of the current active timing.
            </summary>
            
            <remarks>
            Returns 0 (zero) if there is no current timing. A timing can be started using the 
            <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/> method.
            </remarks>
            <example>
            The following example demonstrates setting a progress point to indicate that a timing has lasted more than 5 seconds.
            <code language="cs">
            StartTiming("Timing1");
            
            // do activity
            
            if (GetTimingElapsedTime() &gt; 5000)
            {
                SetProgressPoint("Activity &gt; 5 Seconds");
            }
            
            // do more activity
            
            EndTiming("Timing1");
            </code>
            </example>
            
            <returns>The elapsed time of the timing, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)">
             <summary>
             Suspends the timing of the specified transaction.
             </summary>
             
             <remarks>
             Use <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/> to resume timing again afterwards.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String,System.String)">
             <summary>
             Suspends the timing of the specified transaction,
             identified by <paramref name="tag"/> as well as <paramref name="id"/>.
             </summary>
             
             <remarks>
             Use <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String,System.String)"/> to resume timing again afterwards.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login", "1");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login", "1");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login", "1");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login", true, "1");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="tag">The transaction tag.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String,System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)">
             <summary>
             Resumes the timing of the specified transaction.
             </summary>
             
             <remarks>
             Use this method after a call to <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String,System.String)">
            <summary>
            Resumes the timing of the specified transaction,
            identified by <paramref name="tag"/> as well as <paramref name="id"/>.
            </summary>
            
            <remarks>
            Use this method after a call to <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String,System.String)"/>.
            </remarks>
            
            <example>
            The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
            <code language="cs">
            StartTransaction("login", "1");
            
            // This should be included in the transaction time
            GoToLoginPage();
            
            SuspendTransaction("login", "1");
            
            // The time taken for this processing to be done will be
            // subtracted from the total "login" transaction time
            // because it isn't related to the performance of the SUT
            PrepareLoginDetails();
            
            ResumeTransaction("login", "1");
            
            // This should be included in the transaction time
            PerformLogin();
            
            EndTransaction("login", true, "1");
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log, specifying whether the transaction <i>passed</i>,
            and specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            <para>
            If the transaction <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log, specifying whether the transaction <i>passed</i>.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            <para>
            If the transaction <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FailTransaction(System.String)">
            <summary>
            Writes a <b>fail transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            This transaction will be interpreted as having <i>failed</i>, 
            so it will be counted separately in Test Controller and Analyzer.
            This is equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FailTransaction(System.String,System.String)">
            <summary>
            Writes a <b>fail transaction</b> event to the VU event log, specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            This transaction will be interpreted as having <i>failed</i>, 
            so it will be counted separately in Test Controller and Analyzer.
            This is equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)">
            <summary>
            Writes a <b>start timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String)"/> is called with the same <paramref name="id"/>, an <b>end timing</b>
            event is written to the VU event log. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String,System.Boolean)">
            <summary>
            Writes an <b>end timing</b> event to the VU event log, specifying whether the timing <i>passed</i>.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            <para>
            If the timing <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            <param name="pass"><b>true</b> if the timing should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String)">
            <summary>
            Writes an <b>end timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.FailTiming(System.String)">
            <summary>
            Writes a <b>fail timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            This timing will be interpreted as having <i>failed</i>,
            so it will be counted separately in Test Controller and Analyzer. This is equivalent to
            calling <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTiming(System.String,System.Boolean)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String)">
            <summary>
            Writes an information message to the VU event log.
            </summary>
            
            <param name="message">An information message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String,System.String)">
            <summary>
            Writes an information message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <param name="id">The message identifier, which appears in the <b>ID</b> column.</param>
            <param name="message">An information message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.Exception)">
            <summary>
            Write an information message to the VU event log, consisting of the exception specified.
            </summary>
            
            <param name="e">The exception to write to the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WriteMessage(System.String,System.String,System.String)">
            <summary>
            Writes an information message to the VU event log and also a link to an image, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <remarks>
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>), and the path passed should be relative to this path.
            </remarks>
            
            <param name="id">The message identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">An information message which appears in the <b>Info</b> column.</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetString(System.String)">
            <summary>
            Returns a <c>string</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>string</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetString(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetString(System.String,System.String)">
            <summary>
            Returns a <c>string</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>string</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetString(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetInt(System.String)">
            <summary>
            Returns an <c>int</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An <c>int</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetInt(System.String,System.Int32)">
            <summary>
            Returns an <c>int</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>int</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetLong(System.String)">
            <summary>
            Returns a <c>long</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>long</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetLong(System.String,System.Int64)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetLong(System.String,System.Int64)">
            <summary>
            Returns a <c>long</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>long</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetLong(System.String,System.Int64)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetFloat(System.String)">
            <summary>
            Returns a <c>float</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>float</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetFloat(System.String,System.Single)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetFloat(System.String,System.Single)">
            <summary>
            Returns a <c>float</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>float</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetFloat(System.String,System.Single)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetDouble(System.String)">
            <summary>
            Returns a <c>double</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>double</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetDouble(System.String,System.Double)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetDouble(System.String,System.Double)">
            <summary>
            Returns a <c>double</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>double</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetDouble(System.String,System.Double)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetBoolean(System.String)">
            <summary>
            Returns a <c>boolean</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>boolean</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetBoolean(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetBoolean(System.String,System.Boolean)">
            <summary>
            Returns a <c>boolean</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>boolean</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetBoolean(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Get(System.String)">
            <summary>
            Returns a reference to an <c>object</c> held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An <c>object</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Get``1(System.String)">
            <summary>
            Returns a reference to an <c>object</c> held in the dictionary.
            </summary>
            
            <typeparam name="T">The type of value to get</typeparam>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            <exception cref="T:Facilita.Exception.BadValueException">The <paramref name="key"/> is not of the correct type.</exception>
            
            <returns>An <c>object</c> value held in the dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Get(System.String,System.Object)">
            <summary>
            Returns an <c>object</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>object</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetString(System.String,System.String)">
            <summary>
            Sets a <c>string</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>string</c> in the data dictionary.
            <code language="cs">
            SetString("hostName", "www.testplant.com");
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>string</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetString(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetInt(System.String,System.Int32)">
            <summary>
            Sets an <c>int</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>int</c> in the data dictionary.
            <code language="cs">
            SetInt("port", 8080);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>int</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetInt(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetLong(System.String,System.Int64)">
            <summary>
            Sets a <c>long</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>long</c> in the data dictionary.
            <code language="cs">
            SetLong("timestamp", 9156598231230);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>long</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetLong(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetFloat(System.String,System.Single)">
            <summary>
            Sets a <c>float</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>float</c> in the data dictionary.
            <code language="cs">
            SetFloat("amount", 123.45f);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>float</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetFloat(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetDouble(System.String,System.Double)">
            <summary>
            Sets a <c>double</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>double</c> in the data dictionary.
            <code language="cs">
            SetDouble("amount", 123.45);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>double</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetDouble(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetBoolean(System.String,System.Boolean)">
             <summary>
             Sets a <c>boolean</c> value in the dictionary.
             </summary>
             
             <remarks>
             <paramref name="key"/> is associated with the value in the dictionary. 
             If the <paramref name="key"/> already exists in the dictionary then the old value 
             is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
             </remarks>
             
             <example>
             The following example demonstrates setting a <c>boolean</c> in the data dictionary.
             <code language="cs">
             SetBoolean("retryLogon", false);
             </code>
             </example>
            
             <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
             <param name="val">The <c>boolean</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
             
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetBoolean(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Set(System.String,System.Object)">
            <summary>
            Sets an <c>object</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>object</c> in the data dictionary.
            <code language="cs">
            Set("today", DateTime.Now);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>object</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Get(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Set``1(System.String,``0)">
            <summary>
            Sets an <c>object</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>Form</c> in the data dictionary.
            <code language="cs">
            Set%lt;Form&gt;("form_33_1_1", form_33_1_1);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>object</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetList(System.String,System.Collections.ArrayList)">
            <summary>
            Returns an <c>ArrayList</c> value held in the dictionary, or the <paramref name="defaultList"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultList">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>ArrayList</c> value held in the dictionary, or the <paramref name="defaultList"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetList(System.String,System.Collections.ArrayList)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetList(System.String)">
            <summary>
            Returns an <c>ArrayList</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An <c>ArrayList</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetList(System.String,System.Collections.ArrayList)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.SetList(System.String,System.Collections.ArrayList)">
            <summary>
            Sets an <c>ArrayList</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>ArrayList</c> in the dictionary.
            <code language="cs">
            ArrayList hostList = new ArrayList();
            hostList.Add("www.testplant.com");
            SetList("hosts", hostList);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>ArrayList</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.GetBoolean(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Add(Facilita.Fc.Runtime.IDataDictionary)">
            <summary>
            Merges the specified <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> into this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>.
            </summary>
            
            <remarks>
            All keys and values are added to this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>.
            Any keys which already exist in this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> 
            will have their values replaced.
            </remarks>
            
            <param name="val">The <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> to be merged.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the key/value pairs in this dictionary.
            </summary>
            
            <returns>An enumerator for iterating over the key/value pairs in this dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.HasKey(System.String)">
            <summary>
            Determines whether the specified <paramref name="key"/> is contained within the dictionary.
            </summary>
            
            <example>
            The following example demonstrates checking if the dictionary contains a key.
            <code language="cs">
            if (myDictionary.HasKey("newHostName"))
            {
                // do something
            }
            else
            {
                // do something else
            }
            </code>
            </example>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns><b>true</b> if the dictionary contains the specified <paramref name="key"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>
            belonging to this Virtual User
            </summary>
            
            <returns>A string representing the key/value pairs in the dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.WhereAmI">
            <summary>
            Returns a stack trace for this Virtual User.
            </summary>
            
            <returns>A stack trace for this Virtual User.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Fail(System.String,System.Boolean)">
            <summary>
            Writes a fail event to the VU event log.
            </summary>
            
            <param name="message">A failure message which appears in the <b>Info</b> column.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.Verify(System.Boolean,System.Boolean)">
            <summary>
            Verifies that a boolean expression is <b>true</b>.
            </summary>
            
            <param name="arg">The expression to evaluate.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the expression evaluates to <b>false</b>.</param>
            
            <returns><b>true</b> if the expression evaluates to <b>true</b>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyEQ(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that two strings are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the strings are not equal.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the strings are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyEQ(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that two integers are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the integers are not equal.</param>
            
            <returns><b>true</b> if the integers are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyEQ(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that two longs are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the longs are not equal.</param>
            
            <returns><b>true</b> if the longs are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyEQ(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that two doubles are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the two values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the doubles are not equal.</param>
            
            <returns><b>true</b> if the doubles are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLT(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that one string is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> string is not less than the 2<sup>nd</sup> string.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> string is less than the 2<sup>nd</sup> string; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLT(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that one integer is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> integer is not less than the 2<sup>nd</sup> integer.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> integer is less than the 2<sup>nd</sup> integer; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLT(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that one long is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> long is not less than the 2<sup>nd</sup> long.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> long is less than the 2<sup>nd</sup> long; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLT(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that one double is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> double is not less than the 2<sup>nd</sup> double.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> double is less than the 2<sup>nd</sup> double; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLE(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that one string is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> string is not less than or equal to the 2<sup>nd</sup> string.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> string is less than or equal to the 2<sup>nd</sup> string; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLE(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that one integer is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> integer is not less than or equal to the 2<sup>nd</sup> integer.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> integer is less than or equal to the 2<sup>nd</sup> integer; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLE(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that one long is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> long is not less than or equal to the 2<sup>nd</sup> long.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> long is less than or equal to the 2<sup>nd</sup> long; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.VerifyLE(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that one double is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> double is not less than or equal to the 2<sup>nd</sup> double.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> double is less than or equal to the 2<sup>nd</sup> double; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.StartRequest(System.String)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndRequest(System.String)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.EndRequest(System.String,Facilita.Fc.Runtime.MetricCollection)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
            <param name="metrics">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordMetric(System.String,System.Int32)">
             <summary>
             Records a user metric.
             </summary>
             
             <remarks>
             This can be any numeric value which is considered relevant to the test, such as the number of search results
             returned by a web page, or a count of files in a directory.
             <para>
             The metric value is written to the Virtual User event log. A chart showing how the metric value changes
             during the test will be available in Test Controller and Analyzer.
             </para>
             </remarks>
            
             <param name="name">The metric identifier.</param>
             <param name="value">The metric value.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordMetrics(Facilita.Fc.Runtime.MetricCollection)">
             <summary>
             Records multiple user metrics simultaneously.
             </summary>
            
             <remarks>
             These can be any numeric value which is considered relevant to the test, such as the number of search results
             returned by a web page, or a count of files in a directory.
             <para>
             Each metric value is written to the Virtual User event log. A chart showing how the metric values change
             during the test will be available in Test Controller and Analyzer.
             </para>
             </remarks>
             
             <param name="metrics">The collection of metrics to record.</param>
             
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.RecordMetric(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordTransaction(System.String,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Records a transaction in the VU event log, specifying whether the transaction <i>passed</i>.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             int startTime = this.ElapsedTime;
             bool result = DoSomething();
             int duration = this.ElapsedTime - startTime;
             
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration, true);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration, false);
             }
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started, measured in milliseconds since the start of the test run.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
             <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordTransaction(System.String,System.Int32,System.Int32)">
             <summary>
             Records a transaction in the VU event log.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             int startTime = this.ElapsedTime;
             bool result = DoSomething();
             int duration = this.ElapsedTime - startTime;
             
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration);
             }
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started, measured in milliseconds since the start of the test run.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordTransaction(System.String,System.DateTime,System.TimeSpan,System.Boolean)">
             <summary>
             Records a transaction in the VU event log, specifying whether the transaction <i>passed</i>.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String,System.Boolean)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             DateTime startTime = DateTime.Now;
             bool result = DoSomething();
             TimeSpan duration = DateTime.Now - startTime;
            
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration, true);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration, false);
             }
             </code>
             </example>
            
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
             <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.RecordTransaction(System.String,System.DateTime,System.TimeSpan)">
             <summary>
             Records a transaction in the VU event log.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             DateTime startTime = DateTime.Now;
             bool result = DoSomething();
             TimeSpan duration = DateTime.Now - startTime;
            
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration);
             }
             </code>
             </example>
            
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUserScript.GetTransactionData(System.String)">
            <summary>
            Get data about the specified transaction.
            </summary>
            <param name="id">The id of the transaction</param>
            <returns>data about the specified transaction.</returns>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.VU">
             <summary>
             Gets the current VU instance, as the most specialised subclass of <see cref="T:Facilita.Fc.Runtime.VirtualUser"/>.
             </summary>
             
             <remarks>
             If you have added methods to a custom Virtual User subclass, you can call them
             on the object returned from this method.
             </remarks>
             
             <example>
             The following example demonstrates calling a custom method on a customised subclass of <see cref="T:Facilita.Fc.Runtime.VirtualUser"/> from within the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> method.
             <code language="cs">
             MyCustomUser thisVU = this.VU;
             thisVU.MyCustomOperation();
             </code>
             </example>
            
             <value>The current VU instance.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.ScriptName">
            <summary>
            Gets the name of this Virtual User Script.
            </summary>
            
            <example>
            The following example demonstrates writing the name of the script into the Virtual User event log.
            <code language="cs">
            WriteMessage(String.Format("Script is: {0}", this.ScriptName));
            </code>
            </example>
            
            <value>The name of this Virtual User Script.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfFailures">
            <summary>
            Gets the current number of script failures for this Virtual User.
            </summary>
            
            <remarks>
            Failures are exceptions - such as communication exceptions - which are caught and produce an error message in the event log.
            They do not cause the Virtual User to exit until the number of failures reaches the value in the <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.MaxFailures"/> property.
            </remarks>
            
            <value>The current number of script failures for this Virtual User.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.MaxFailures"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.MaxFailures">
            <summary>
            Gets the maximum number of failures allowed in the script before this Virtual User terminates.
            </summary>
            
            <remarks>
            Failures are exceptions - such as communication exceptions - which are caught and produce an error message in the event log.
            They do not cause the Virtual User to exit until the number of failures reaches this value.
            </remarks>
            
            <value>The maximum number of failures allowed in the script before this Virtual User terminates.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfFailures"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfIterations">
            <summary>
            Gets the total number of iterations that the <b>repeated</b> sequence of scripts will execute.
            </summary>
            
            <remarks>
            A return value of zero indicates that the iterated scripts are iterating for a specified time or forever, and not for a specified number of iterations.
            </remarks>
            
            <value>The number of iterations that the <b>repeated</b> sequence of scripts will execute, as set in the VU Group runtime settings in eggPlant Performance Studio.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.Iteration"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.CurrentIteration">
            <summary>
            Gets the number of the iteration that this Virtual User is currently executing (beginning at 1).
            </summary>
            
            <remarks>
            As a Virtual User completes execution of the <b>iterated</b> sequence of scripts,
            the iteration number is increased by 1 and execution of the next iteration of
            the <b>iterated</b> sequence of scripts is started from the beginning.
            <para>
            This method returns 1 if this Virtual User is executing the first iteration.
            Compare to <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.Iteration"/>.
            </para>
            </remarks>
            
            <value>The number of the iteration that this Virtual User is currently executing (beginning at 1).</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.Iteration">
            <summary>
            Gets the number of the iteration that this Virtual User is currently executing (beginning at 0).
            </summary>
            
            <remarks>
            As a Virtual User completes execution of the <b>iterated</b> sequence of scripts,
            the iteration number is increased by 1 and execution of the next iteration of
            the <b>iterated</b> sequence of scripts is started from the beginning.
            <para>
            This method returns 0 if this Virtual User is executing the first iteration.
            Compare to <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.CurrentIteration"/>.
            </para>
            </remarks>
            
            <value>The number of the iteration that this Virtual User is currently executing (beginning at 0).</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.DataDictionary">
            <summary>
            Gets the Data Dictionary belonging to this VirtualUser.
            </summary>
            
            <value>The Data Dictionary belonging to this VirtualUser.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.ElapsedTime">
            <summary>
            Gets the elapsed time since the beginning of the test, in milliseconds.
            </summary>
            
            <value>The elapsed time since the beginning of the test, in milliseconds.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.InitialDelay">
            <summary>
            Gets the initial delay for this Virtual User, between the start of the test and the start of the first script execution.
            </summary>
            
            <remarks>
            By the time this method can be called, the initial delay will already have happened,
            and this will return the actual number of milliseconds that this Virtual User waited before starting script execution. 
            The value returned includes the initial group delay <b>and</b> the ramp-up for this specific Virtual User. 
            </remarks>
            
            <value>The initial delay, in milliseconds.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IterationDelay">
            <summary>
            Gets the delay time in milliseconds between iterations of the <b>repeated</b> sequence of scripts.
            </summary>
            
            <remarks>
            This is the value set in the VU Group runtime properties in eggPlant Performance Studio.
            If the <b>pacing</b> option is selected, then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value>The time between iterations, in milliseconds.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.LastIterationDelay"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.Index">
            <summary>
            Gets the index number of this Virtual User within the Virtual User group that it belongs to.
            </summary>
            
            <remarks>
            The first Virtual User has index 1.
            </remarks>
            
            <example>
            The following example demonstrates executing conditional code based on the index number.
            <code language="cs">
            // pause for 1 second, every 10th VU
            if ((this.Index % 10) == 0)
            {
                Pause(1000);
            }
            </code>
            </example>
            
            <value>The index number of this Virtual User within the Virtual User group that it belongs to.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.PauseFactor">
            <summary>
            Gets or sets the current percentage pause factor.
            </summary>
            
            <remarks>
            You can use this property to slow down or speed up a running test, by changing the length of time
            that this Virtual User will pause for.
            </remarks>
            
            <example>
            The following example demonstrates increasing and decreasing the time that a Virtual User will pause for.
            <code language="cs">
            // to make all pauses twice as long (200%)
            this.PauseFactor = 200;
            
            // or to reduce all following pauses to 10% of their stated value
            this.PauseFactor = 10;
            
            // or to obtain the current value
            int pf = this.PauseFactor;
            </code>
            </example>
            
            <value>A percentage factor to apply to all subsequent <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Pause"/> statements.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.Pause"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.ProgressPoint">
            <summary>
            Gets the text of the most recent progress point that was set.
            </summary>
            
            <value>The text of the most recent progress point that was set.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.SetProgressPoint(System.String)"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.CurrentTransaction">
            <summary>
            Gets the name of the transaction that is currently in progress.
            </summary>
            
            <remarks>
            This is the name of the most recent transaction to be started by a call to <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/>.
            If no transaction is currently in progress, then an empty string will be returned.
            </remarks>
            
            <value>The name of the transaction that is currently in progress.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.LastTransaction">
            <summary>
            Gets the name of the most recent transaction to have ended.
            </summary>
            
            <value>The name of the most recent transaction to have ended.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IsPacing">
            <summary>
            Gets a value that indicates whether this Virtual User will adjust the delay between iterations to maintain a steady pace of iterations.
            </summary>
            
            <remarks>
            The Virtual User pauses between each iteration of the <b>iterated</b> sequence of scripts. 
            If the <b>pacing</b> option is selected in the VU Group runtime properties in eggPlant Performance Studio, 
            then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value><b>true</b> if this Virtual User will adjust the delay between iterations to maintain a steady pace of iterations; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IterationDelay"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.LastIterationDelay">
            <summary>
            Gets the delay time in milliseconds between the previous iteration and the current iteration.
            </summary>
            
            <remarks>
            The property value will be zero on the first iteration. 
            If the <b>pacing</b> option is selected, then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value>The time between the previous iteration and the current iteration, in milliseconds.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IterationDelay"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsPacing"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IsInitialScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>initial</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>initial</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsFinalScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsIteratedScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IsIteratedScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>repeated</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>repeated</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsFinalScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsInitialScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IterationForTime">
            <summary>
            Gets the time in milliseconds that the <b>iterated</b> sequence of scripts will iterate for.
            </summary>
            
            <remarks>
            <ul>
            <li>Returns 0 if the <b>iterated</b> sequence of scripts have been set to execute a certain number of iterations, or to iterate forever.</li>
            <li>Returns a value greater than 0 if the <b>iterated</b> sequence of scripts have been set to execute for a given length of time.</li>
            </ul>
            In the second case, the value returned is the amount of time to be spent iterating. Once this length of time is met or exceeded, no further iterations of the
            <b>iterated</b> sequence of scripts will occur.
            </remarks>
            
            <value>The time in milliseconds that the <b>iterated</b> sequence of scripts will iterate for.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.LastError">
            <summary>
            Gets the most recent error encountered by this Virtual User.
            </summary>
            
            <value>The most recent error encountered by this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IsFinalScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>final</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>final</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsIteratedScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.IsInitialScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfWarmupIterations">
            <summary>
            Gets or sets the number of warm-up iterations for this Virtual User.
            </summary>
            
            <remarks>
            The value indicates the number of warm-up iterations this Virtual User will execute and is only relevant to the <b>repeated</b> sequence of scripts. Warm-up 
            iterations are considered to be of no interest statistically and during a warm-up iteration the start and end transaction events are not 
            written to the VU event log.
            </remarks>
            
            <value>The number of warm-up iterations for this Virtual User.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.StartTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUserScript.EndTransaction(System.String)"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.GroupSizes">
            <summary>
            Gets the number of Virtual Users in each Virtual User group.
            </summary>
            
            <example>
            The following example demonstrates getting the number of Virtual Users in the group <b>G1</b>.
            <code language="cs">
            int groupSize = this.GroupSizes.GetInt("G1");
            </code>
            </example>
            
            <value>A data dictionary in which the keys are group names and the values are the group sizes.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.UniqueID">
            <summary>
            Gets a test-wide unique identifier for this Virtual User.
            </summary>
            
            <remarks>
            The first Virtual User has the identifier 1.
            </remarks>
            
            <example>
            The following example demonstrates executing conditional code based on the unique Virtual User index number.
            <code language="cs">
            // pause for 1 second, every 10th VU
            if ((this.UniqueID % 10) == 0)
            {
                Pause(1000);
            }
            </code>
            </example>
            
            <value>The unique identifier of this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.GroupSize">
            <summary>
            Gets the number of Virtual Users in the group that this Virtual User belongs to.
            </summary>
            
            <value>The number of Virtual Users in the group that this Virtual User belongs to.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfWarnings">
            <summary>
            Gets the number of warnings that have been reported for this Virtual User.
            </summary>
            
            <value>The number of warnings that have been reported for this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.NumberOfErrors">
            <summary>
            Gets the number of errors that have been reported for this Virtual User.
            </summary>
            
            <value>The number of errors that have been reported for this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.IsLastIteration">
            <summary>
            Gets a value that indicates whether more iterations will occur for the current Virtual User.
            </summary>
            
            <remarks>
            If the currently executing script belongs to the <b>initial</b> or <b>final</b> sequence of scripts in this Virtual User's workflow, then this property will have the value <b>true</b>.
            <para>
            If the currently executing script belongs to the <b>iterated</b> sequence of scripts and the property value is <b>true</b>, then the VU will cease to iterate once 
            the current sequence has completed execution.
            </para>
            <para>
            <note type="warning">If the Virtual User is set to iterate for a certain length of time, then the time remaining is checked and an estimate is made
            as to whether further iterations may occur.
            </note>
            </para>
            </remarks>
            
            <value><b>true</b> if there will be no more iterations in the current sequence; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.FinishIteratingRequested">
            <summary>
            Gets a value that indicates whether this Virtual User has been requested to finish iterating.
            </summary>
            
            <remarks>
            This happens when <see cref="M:Facilita.Fc.Runtime.VirtualUser.FinishIterating"/> is called.
            </remarks>
            
            <value><b>true</b> if this Virtual User has been requested to finish iterating; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.TransactionLoggingOn">
            <summary>
            Gets or sets a value that indicates whether transactions should be logged for this VU.
            </summary>
            
            <remarks>
            When the Transaction Logging flag is <b>false</b>, start and end transaction events are not written to the event log.
            </remarks>
            
            <value><b>true</b> if the transaction should be logged; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.Name">
            <summary>
            Gets or sets the name of this dictionary.
            </summary>
            
            <value>The name of the Data Dictionary.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.ReadOnly">
            <summary>
            Gets a value that indicates whether this dictionary is read-only.
            </summary>
            
            <value><b>true</b> if the dictionary is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.VUName">
            <summary>
            Gets the name of the <i>group</i> that this Virtual User belongs to.
            </summary>
            
            <value>The Virtual User group name.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.SandboxPath">
            <summary>
            Gets the path to the sandbox location.
            </summary>
            
            <remarks>
            The sandbox is the root location on an injector machine beneath which all test run files are stored. 
            This includes files transferred from the controller machine (project/workspace dlls and jars, data) and test run results and events written during test execution. 
            </remarks>
            
            <value>The path to the sandbox location.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.DataPath"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.FilesDataPath"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.DataPath">
            <summary>
            Gets the path to the data folder.
            </summary>
            
            <remarks>
            This is the folder on an injector machine to which data files are transferred from the controller machine. Files in this folder are only 
            transferred if explicitly assigned to a test or test group.
            <para>
            <note type="note">All files in the project <c>data\Files</c> folder are copied to all injectors - see <see cref="P:Facilita.Fc.Runtime.VirtualUserScript.FilesDataPath"/>.</note>
            </para>
            </remarks>
            
            <value>The path to the data folder.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.SandboxPath"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUserScript.FilesDataPath"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.FilesDataPath">
            <summary>
            Gets the path of the <c>data\Files</c> folder.
            </summary>
            
            <remarks>
            This is the folder on an injector machine to which all the files in the <c>data\Files</c> folder on the controller machine are transferred.
            </remarks>
            
            <value>The path of the <c>data\Files</c> folder.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.RunPath">
             <summary>
             Gets the path to the test run results.
             </summary>
             
             <remarks>
             The run path is the disk location on an injector machine to which Virtual User event files and logs are written. 
             </remarks>
            
             <value>The path to the test run results.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.Keys">
            <summary>
            Gets an enumerator that can be used to iterate over the keys in this dictionary.
            </summary>
            
            <value>An enumerator that can be used to iterate over the keys in this dictionary.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUserScript.MillisecondsSinceEpoch">
            <summary>
            Get the number of milliseconds since the epoch (1st Jan 1970)
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.Event.GroupName">
            <summary>
            Get the name of the group that raised this event (property required by TestController)
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.Event.VirtualUser">
            <summary>
            Get the ID of the VU that raised this event (property required by TestController)
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.EventLogReader">
            <summary>
            Summary description for EventLogReader.
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.EventLogWatcher">
            <summary>
            Watches a number of EventLogs, and sends messages to the controller
            whenever an event occurs
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.EventLogWatcher.#ctor(Facilita.Fc.Runtime.VUGroup,Facilita.Fc.Runtime.IMonitorMessageSender)">
            <summary>
            Constructor
            </summary>
            <param name="group"></param>
            <param name="monitorMessageSender"></param>
        </member>
        <member name="M:Facilita.Fc.Runtime.EventLogWatcher.SetEventLogs(System.String)">
            <summary>
            Start watching the event logs for a selection of VU's
            </summary>
            <param name="vus"></param>
        </member>
        <member name="M:Facilita.Fc.Runtime.Ini.#ctor">
            <summary>
            Default constructor - use in conjunction with Load  
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.Ini.#ctor(System.IO.TextReader)">
            <summary>
            Constructor for creating Ini object based on a System.IO.TextReader reference
            </summary>
            <param name="txtReader">The System.IO.TextReader to be read</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.Ini.#ctor(System.String)">
            <summary>
            Constructor for creating Ini object based on a string path
            </summary>
            <param name="path">The complete file path to be read</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.Ini.Load(System.String)">
            <summary>
            Populates dictionaries based on a path
            </summary>
            <param name="path">The complete file path to be read</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.Ini.Load(System.IO.TextReader)">
            <summary>
            Populates dictionaries based on a TextReader
            </summary>
            <param name="txtReader">A TextReader object</param>
        </member>
        <member name="P:Facilita.Fc.Runtime.Ini.CurrentSection">
            <summary>
            	property for setting current section of the ini structure
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.Ini.CurrentSectionObject">
            <summary>
            	read-only property for returning current section SimpleDataDictionary
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.MessageStream.GenerateCertificate(System.String)">
            <summary>
            Use openssl.exe to create a temporary pfx file
            </summary>
            <returns></returns>
        </member>
        <member name="T:Facilita.Fc.Runtime.Range">
            <summary>
            This class maintains an ordered set int values 
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.Selection.ConvertToString">
            <summary>
            Convert the selection back into a string. Test Controller needs to be able to do
            this to send selections over the wire to the engines
            </summary>
            <returns></returns>
        </member>
        <member name="T:Facilita.Fc.Runtime.SharedData">
            <summary>
            Provides functionality for communication with the Shared Data Server.
            </summary>
            
            <remarks>
            It provides the following features:
            <ul>
            <li>Data can saved in a common data store and read by other Virtual Users.</li>
            <li>Data can be saved and retrieved as FIFO (first in, first out) and LIFO (last in, first out) lists against keys.</li>
            <li>Data can be saved as single key/value pairs.</li>
            <li>Virtual Users will optionally wait until the requested data becomes available.</li>
            <li>Access is locked between Virtual Users for atomic operations.</li>
            </ul>
            Data is stored in the Shared Data Server as a Dictionary in the form of a key and an associated value or list of values. It can be used in a 
            similar way to a <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> or <see cref="T:Facilita.Fc.Runtime.IDataTable"/>. The keys and values are stored as strings, typically (but not necessarily) text characters. 
            To save data types such as integers you should convert the values to strings.
            </remarks>
            
            <example>
            The following example demonstrates using the Shared Data Server.
            <code language="cs">
            // Declare a double and convert to string
            double uid = 1234.567;
            string value = uid.ToString();
            // Add it to the front of a shared list
            sharedData.AddFirst("UID", value);
            // Retrieve and then convert back to a double
            value = sharedData.First("UID", -1);
            Double.TryParse(value, out uid);
            </code>
            </example>
        </member>
        <member name="F:Facilita.Fc.Runtime.SharedData.DEFAULT_MAX_CONNECTIONS">
            <summary>
            The default value of <see cref="P:Facilita.Fc.Runtime.SharedData.MaxConnections"/>
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.SharedData._consumerPools">
            <summary>
            Thread-safe dictionary mapping SDS endpoints to a ConnectionPool. These connection pools are used for reading data from the SDS
            </summary>
        </member>
        <member name="F:Facilita.Fc.Runtime.SharedData._producerPools">
            <summary>
            Thread-safe dictionary mapping SDS endpoints to a ConnectionPool. These connection pools are used for writing data to the SDS
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of the SharedData class, which can be used to connect to a running instance of the Shared Data Server.
            </summary>
            
            <param name="host">The address or host name of the Shared Data Server.</param>
            <param name="port">The TCP port that the Shared Data Server is listening on.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Connect">
            <summary>
            Connects to a running instance of the Shared Data Server.
            </summary>
            
            <remarks>
            Does nothing. This method is included for backwards compatibility only and will be removed in a later release.
            </remarks>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Close"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Close">
             <summary>
             Closes a connection to the Shared Data Server.
             </summary>
            
             <remarks>
             Does nothing. This method is included for backwards compatibility only and will be removed in a later release.
             </remarks>
             
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.AddFirst(System.String,System.String)">
            <summary>
            Adds a value to the start of the specified value list in the Shared Data Server.
            </summary>
            
            <remarks>
            If no current list of values exists for <paramref name="key"/>, then a new list is created.
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates adding a value to a list.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            
            int id = 99;
            sharedData.AddFirst("CustID", id.ToString()); // add value (as a string) to shared data server
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="value">The value to be added at the start of the list of values for <paramref name="key"/>.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddLast(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.First(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Last(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveFirst(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveLast(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.First(System.String,System.Int32)">
            <summary>
            Reads the first value from the specified value list in the Shared Data Server.
            </summary>
            
            <remarks>
            Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
            If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
            and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
            If the connection to the Shared Data Server is lost an exception is raised.
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para><para>
            <note type="note">The value is not removed from the list.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates reading the first value from a list.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            
            string userID = sharedData.First("UID", 20000);   // wait 20 seconds; an exception is raised on timeout
            // Alternate method that catches the exception if no value for key or timeout
            try
            {
                userID = sharedData.First("UID", 0);   // do not wait for a value
            }
            catch (Exception e)
            {
                Error(String.Format("NoValue: {0}", e)); // error is "key=NoValue"
                NextIteration();
            }
            
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
            
            <returns>The first value in the list.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddLast(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddFirst(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Last(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveFirst(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveLast(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.RemoveFirst(System.String,System.Int32)">
            <summary>
            Reads and removes the first value from the specified value list in the Shared Data Server.
            </summary>
            
            <remarks>
            Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
            If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
            and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
            If the connection to the Shared Data Server is lost an exception is raised.
            <para>
            <note type="note">The keys are case-sensitive.</note> 
            </para><para>
            <note type="note">The value is removed from the list.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates removing the first value from a list.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            string accountNum = sharedData.RemoveFirst("AccNum", 90000); // wait up to 90 seconds for a value
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
            
            <returns>The first value in the list.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The request has timed out.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddLast(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddFirst(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Last(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.First(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveLast(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.AddLast(System.String,System.String)">
            <summary>
            Adds a value to the end of the specified value list in the Shared Data Server.
            </summary>
            
            <remarks>
            If no current list of values exists for <paramref name="key"/>, then a new list is created. 
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates adding a value to the end of a list.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            string lastUpdate = DateTime.Now.ToShortDateString(); // string containing current date
            sharedData.AddLast("lastUpdated", lastUpdate); // add value to shared data server
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="value">The value to be added at the end of the list of values for <paramref name="key"/>.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.AddFirst(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Last(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveFirst(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.RemoveLast(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Last(System.String,System.Int32)">
            <summary>
            Reads the last value from the specified value list in the Shared Data Server.
            </summary>
            
            <remarks>
            Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
            If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
            and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
            If the connection to the Shared Data Server is lost an exception is raised.
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para><para>
            <note type="note">The value is not removed from the list.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates reading the last value from a list.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            string userID = sharedData.Last("UID", 20000);   // wait 20 seconds; an exception is raised on timeout
            // Alternate method that catches the exception if no value for key or timeout
            try
            {
                userID = sharedData.Last("UID", 0);   // do not wait for a value
            }
            catch (Exception e)
            {
                Error(String.Format("NoValue: {0}", e)); // error is "key=NoValue"
                NextIteration();
            }
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
            
            <returns>The last value in the list.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.RemoveLast(System.String,System.Int32)">
             <summary>
             Reads and removes the last value from a value list in the Shared Data Server.
             </summary>
             
             <remarks>
             Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
             If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
             and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
             If the connection to the Shared Data Server is lost an exception is raised.
             <para>
             <note type="note">The keys are case-sensitive.</note> 
             </para><para>
             <note type="note">The value is removed from the list.</note>
             </para>
             </remarks>
             
             <example>
             The following example demonstrates removing the last value from a list.
             <code language="cs">
             using Facilita.Fc.Runtime;
             SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
             string accountNum = sharedData.RemoveLast("AccNum", 90000); // wait up to 90 seconds for a value
             </code>
             </example>
             
             <param name="key">The key against which the data is stored.</param>
             <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
             
             <returns>The last value in the list.</returns>
            
             <exception cref="T:Facilita.Exception.NoSuchValueException">The request has timed out.</exception>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Get(System.String,System.Int32)">
            <summary>
            Reads the value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
            If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
            and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
            If the connection to the Shared Data Server is lost an exception is raised.
            <para>
            Values can be set by calling <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>.
            </para><para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates reading a value from the Shared Data Server.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            string value = sharedData.Get("CurrServer", 0);
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
            
            <returns>Value for key that was created by a previous call to <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The request has timed out.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.GetInt(System.String,System.Int32)">
            <summary>
            Reads an integer value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            Set the <paramref name="timeout"/> parameter to 0 (zero) to prevent blocking. Use -1 to wait forever. 
            If no list of values exists for <paramref name="key"/>, then the Virtual User thread will be suspended
            and the call will only return (dependent upon timeout) when a value is read from the Shared Data server.
            If the connection to the Shared Data Server is lost an exception is raised.
            <para>
            Values can be set by calling <see cref="M:Facilita.Fc.Runtime.SharedData.SetInt(System.String,System.Int32)"/>.
            </para><para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates reading an integer.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            int value = sharedData.GetInt("AccountNum", 0);
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
            <param name="timeout">The maximum time in milliseconds to wait for a value to become available.</param>
            
            <returns>Value for key that was created by a previous call to <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The request has timed out.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.SetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)">
            <summary>
            Creates or resets the value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            If no current value exists for key, then a new key/value pair is created.
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates storing a value.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            sharedData.Set("CurrServer", "192.168.0.1");
            </code>
            </example>
            
            <param name="key">The key against which <paramref name="value"/> will be stored.</param>
            <param name="value">The value to be stored.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Get(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.SetInt(System.String,System.Int32)">
            <summary>
            Creates or resets the integer value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            If no current value exists for key, then a new key/value pair is created.
            <para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates storing an integer value.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            sharedData.SetInt("AccountNum", 12345678);
            </code>
            </example>
            
            <param name="key">The key against which <paramref name="value"/> will be stored.</param>
            <param name="value">The value to be stored.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.GetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Increment(System.String,System.Int32)">
            <summary>
            Increments an integer value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            The specified key must already be associated with a value, which can be set by calling 
            <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/> or <see cref="M:Facilita.Fc.Runtime.SharedData.SetInt(System.String,System.Int32)"/>. 
            If the value associated with <paramref name="key"/> is not an incrementable value then no action takes place. 
            <para>
            A negative increment value can be supplied.
            </para><para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates incrementing a value.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            sharedData.Set("Count", "100");
            sharedData.Increment("Count");   // value will = 101
            sharedData.Increment("Count", 7);   // value will = 108
            </code>
            </example>
            
            <param name="key">The key against which the value to be incremented is stored.</param>
            <param name="inc">The amount by which to increment.</param>
            
            <returns>The new, incremented value.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Decrement(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Get(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Decrement(System.String,System.Int32)">
            <summary>
            Decrements an integer value associated with the specified <paramref name="key"/> in the Shared Data Server.
            </summary>
            
            <remarks>
            The specified key must already be associated with a value, which can be set by calling 
            <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/> or <see cref="M:Facilita.Fc.Runtime.SharedData.SetInt(System.String,System.Int32)"/>. 
            If the value associated with <paramref name="key"/> is not a decrementable value then no action takes place. 
            <para>
            A negative decrement value can be supplied.
            </para><para>
            <note type="note">The keys are case-sensitive.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates decrementing a value in the Shared Data Server.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            sharedData.Set("Count", "100");
            sharedData.Decrement("Count");   // value will = 99
            sharedData.Decrement("Count", 7);   // value will = 92
            </code>
            </example>
            
            <param name="key">The key against which the value to be decremented is stored.</param>
            <param name="inc">The amount by which to decrement.</param>
            
            <returns>The new, decremented value.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Increment(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Get(System.String,System.Int32)"/>
            <seealso cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.WriteSetMessage(System.Char,System.String,System.String)">
            <summary>
            Sends a message, no return value (set type messages)
            </summary>
            
            <param name="type"></param>
            <param name="key"></param>
            <param name="value"></param>
            
            <returns></returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Clear">
            <summary>
            Clears all keys and values from a running instance of the Shared Data Server.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.SharedData.Clear(System.String)">
            <summary>
            Clears all values which are associated with the specified <paramref name="key"/> from the Shared Data Server.
            </summary>
            
            <remarks>
            Removes any list or value associated with the specified <paramref name="key"/> from the Shared Data Server. 
            In this case both the list and value items will be removed.
            No exception is raised if the key does not exist.
            <para>
            <note type="note">Note that it is possible to have both a list (created using <see cref="M:Facilita.Fc.Runtime.SharedData.AddFirst(System.String,System.String)"/> or <see cref="M:Facilita.Fc.Runtime.SharedData.AddLast(System.String,System.String)"/>)
            and a value created using <see cref="M:Facilita.Fc.Runtime.SharedData.Set(System.String,System.String)"/> both using the same key.</note>
            </para>
            </remarks>
            
            <example>
            The following example demonstrates clearing the value stored under <c>"MyKey"</c>.
            <code language="cs">
            using Facilita.Fc.Runtime;
            SharedData sharedData = new SharedData(GetString("sharedDataHost", "localhost"), GetInt("sharedDataPort", 5099));
            sharedData.Clear("MyKey");   // remove the list or value for the key
            </code>
            </example>
            
            <param name="key">The key against which the data is stored.</param>
        </member>
        <member name="P:Facilita.Fc.Runtime.SharedData.MaxConnections">
            <summary>
            Gets or sets the maximum number of connections that will be opened from each engine process to each Shared Data Server.
            </summary>
            
            <remarks>
            The default value is 10. You cannot set a value less than 1.
            </remarks>
        </member>
        <member name="P:Facilita.Fc.Runtime.SharedData.MaxConnectionAttempts">
            <summary>
            Gets or sets the maximum number of connection attempts to make when connecting to a Shared Data Server.
            </summary>
            
            <remarks>
            The default is 4.
            </remarks>
            
            <value>The maximum number of connection attempts to make when connecting to a Shared Data Server.</value>
        </member>
        <member name="T:Facilita.Fc.Runtime.SimpleTableBase">
            <summary>
            This interface defines methods to set and get CLR objects and primitive values 
            associated with keys which are Strings.
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.ITableBase">
            <summary>
            This interface defines methods to set and get CLR objects and primitive values 
            associated with keys which are Strings.
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.Task">
            <summary>
            Summary description for Task.
            </summary>
        </member>
        <member name="T:Facilita.Util.IThreadRunnable">
            <summary>
            IThreadRunnable has been carried over from the java implementation as Runnable.
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.VirtualUser">
            <summary>
            Represents a single Virtual User.
            </summary>
            
            <remarks>
            eggPlant Performance emulates real user activity on a system through Virtual Users. Each Virtual User executes a script, or sequence of scripts (workflow) that 
            contain actions which replicate a real user's interaction with an application. Although a real user requires a single desktop or workstation client, 
            many Virtual Users can be simulated from a single client machine.
            <para>
            It is important to understand the distinction between a <b>Virtual User</b> (represented by the VirtualUser class) and a <b>Virtual User Script</b>
            (represented by the <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> class). A <b>Virtual User Script</b> defines a series of actions that a user 
            performs when interacting with a client/server application; whereas a <b>Virtual User</b> runs <b>Virtual User Scripts</b> during test execution.
            A <b>Virtual User</b> can run a single <b>Virtual User Script</b>, or a sequence of <b>Virtual User Scripts</b>. In eggPlant Performance, a sequence of 
            <b>Virtual User Scripts</b> is called a <b>Workflow</b>.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetUniqueID(System.String,System.Int32)">
            <summary>
            Gets a test-wide unique identifier for a specified Virtual User within a Virtual User group.
            </summary>
            
            <remarks>
            The first VU has identifier 1.
            </remarks>
            
            <example>
            The following example demonstrates getting the unique identifier for the 5<sup>th</sup> VU in the <b>Supervisors</b> Virtual User group.
            <code language="cs">
            int VuNum = GetUniqueID("Supervisors", 5);
            </code>
            </example>
            
            <param name="groupName">The group name.</param>
            <param name="index">The index of the Virtual User within the group.</param>
            
            <returns>The unique identifier of the Virtual User.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.AtStartOfIteration">
            <summary>
            This method is called at the start of every iteration.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            at the start of every iteration.
            <para>
            The current iteration number can be obtained using <see cref="P:Facilita.Fc.Runtime.VirtualUser.CurrentIteration"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.AtEndOfIteration">
            <summary>
            This method is called at the end of every iteration.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            at the end of every iteration.
            <para>
            The current iteration number can be obtained using <see cref="P:Facilita.Fc.Runtime.VirtualUser.CurrentIteration"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.#ctor">
            <summary> 
            Initialises a new instance of the VirtualUser class.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FinishIterating">
            <summary>
            Prevents further iterations of the <b>iterated</b> sequence of scripts for this Virtual User.
            </summary>
            
            <remarks>
            The current script will continue executing, and any subsequent scripts in the <b>iterated</b> sequence of scripts will also be executed.
            Once the end of the iteration is reached, the Virtual User will not start another iteration but will instead
            execute the scripts in the <b>final</b> sequence of scripts before exiting. 
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.NextIteration">
            <summary>
            Stops execution of the current script, and starts execution of the next iteration.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of the next iteration of scripts is begun. If the sequence of scripts being 
            executed is the <b>initial</b> or <b>final</b> sequence of scripts, then the execution of this sequence is curtailed. Otherwise, the execution of the <b>repeated</b> 
            sequence of scripts begins again at the next iteration. 
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.NextSequence">
            <summary>
            Stops execution of the current script and any other scripts in the current sequence, and starts execution of the next sequence of scripts.
            </summary>
            
            <remarks>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.NextScript">
            <summary>
            Stops execution of the current script, and starts execution of the next script in the sequence.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of the next script in the sequence of scripts to be executed is begun. 
            This method and the return statement are not equivalent. This method should be used in preference to the return statement. 
            Remember that a <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> may have additional methods other than <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> and executing a return statement 
            from anywhere other than the <see cref="M:Facilita.Fc.Runtime.VirtualUserScript.Script"/> method will not exit the execution of the <see cref="T:Facilita.Fc.Runtime.VirtualUserScript"/> object.
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FinalSequence">
            <summary>
            Stops execution of the current script and then executes the scripts in the <b>final</b> section of the current workflow.
            </summary>
            
            <remarks>
            The execution of the calling script ceases and the execution of all further scripts in the current sequence is curtailed.
            <para>
            <note type="warning">
            This method raises a ScriptContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)">
             <summary>
             Writes an alert of the specified <paramref name="severity"/> to the Alerts table in Test Controller.
             </summary>
             
             <remarks>
             <note type="warning">
             <b>RaiseAlert must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>, 
             <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/> to output to the VU event log; this can be viewed 
             at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
             </note>
             </remarks>
            
             <param name="severity">The severity of the alert.</param>
             <param name="description">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnRaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)">
            <summary>
            This method is called whenever an alert is raised
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)"/> method.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever an alert is raised.
            </remarks>
            
            <param name="severity">The severity of the alert.</param>
            <param name="description">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String,System.String)">
            <summary>
            Writes a warning message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <param name="id">The warning identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">A warning message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.Exception)">
            <summary>
            Writes a warning message to the VU event log, consisting of the specified exception
            </summary>
            <param name="e">The exception to write to the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String,System.String,System.String)">
            <summary>
            Writes a warning message and an image link to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            <remarks>
            An warning message is written to the VU event log, and then the event log is flushed.	
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>), and the path passed should be relative to this path.
            </remarks>
            <param name="id">the warning identifier, which appears in the <b>ID</b> column</param>
            <param name="info">an warning message which appears in the <b>Info</b> column</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnWarn(System.String,System.String)">
            <summary>
            This method is called whenever a warning is written to the VU event log
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a warning is written to the VU event log.
            </remarks>
            
            <param name="id">The warning identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">A warning message which appears in the <b>Info</b> column.</param>
            
            <returns>true if the warning should be written to the event log, or false if the error should be ignored.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)">
            <summary>
            Writes a warning message to the VU event log.
            </summary>
            
            <param name="info">A warning message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String,System.String)">
            <summary>
            Writes an error message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="id">The error identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String,System.Exception)">
            <summary>
            Writes an error message to the VU event log, which will include the stack trace of the specified Exception.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
            <param name="e">The stack trace of this Exception will be recorded in the error message.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Error(System.Exception)">
            <summary>
            Writes an error message to the VU event log, which will consist of the details of the specified Exception.
            </summary>
            
            /// <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="e">The exception to record in the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnError(System.String,System.String)">
            <summary>
            This method is called whenever an error is written to the VU event log
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String,System.Exception)"/>
            or <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever an error is written to the VU event log.
            </remarks>
            
            <param name="id">The error identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
            
            <returns>true if the error should be written to the event log, or false if the error should be ignored.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnException(System.Exception)">
            <summary>
            This method is called whenever an unhandled exception is thrown by a script.
            </summary>
            
            <param name="e">The exception that was thrown</param>
            
            <returns>true if the exception should be recorded as an error and counted as a script failure, false if the exception should be ignored.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)">
            <summary>
            Writes an error message to the VU event log.
            </summary>
            
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            </remarks>
            
            <param name="info">An error message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String,System.String,System.String)">
            <summary>
            Writes an error message and an image link to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            <remarks>
            An error message is written to the VU event log, and then the event log is flushed.
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>, and the path passed should be relative to this path.
            </remarks>
            <param name="id">the error identifier, which appears in the <b>ID</b> column</param>
            <param name="info">an error message which appears in the <b>Info</b> column</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ExecuteCommand">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Setup(Facilita.Fc.Runtime.EventLog,Facilita.Util.Time,Facilita.Fc.Runtime.CompoundDataDictionary,System.Int32,Facilita.Fc.Runtime.SimpleDataDictionary,Facilita.Fc.Runtime.VUGroup,Facilita.Fc.Runtime.AlertManager)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="eventLog">For internal use only.</param>
            <param name="time">For internal use only.</param>
            <param name="dataDictionary">For internal use only.</param>
            <param name="index">For internal use only.</param>
            <param name="groupSizes">For internal use only.</param>
            <param name="group">For internal use only.</param>
            <param name="alertManager">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Pause(System.Int32)">
            <summary>
            Pauses the execution of the script for a specified <paramref name="interval"/> (modified by <see cref="P:Facilita.Fc.Runtime.VirtualUser.PauseFactor"/>).
            </summary>
            
            <remarks>
            The specified <paramref name="interval"/> may be altered by the value of <see cref="P:Facilita.Fc.Runtime.VirtualUser.PauseFactor"/>
            or by the runtime options set in eggPlant Performance Studio.
            </remarks>
            
            <param name="interval">The number of milliseconds to pause before executing the next statement.</param>
            
            <returns>The length of time that the script actually paused for, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.TimeToPause(System.Int32)">
             <summary>
             Gets the length of time that this Virtual User would pause for if <see cref="M:Facilita.Fc.Runtime.VirtualUser.Pause(System.Int32)"/>
             were called with the specified <paramref name="interval"/>.
             </summary>
             
             <remarks>
             When calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.Pause(System.Int32)"/>, a length of time in milliseconds is passed as a parameter.
             The actual pause time may be different, depending on the value of <see cref="P:Facilita.Fc.Runtime.VirtualUser.PauseFactor"/> or
             runtime options set in eggPlant Performance Studio. This method returns the actual time that the Virtual User would pause for,
             if <see cref="M:Facilita.Fc.Runtime.VirtualUser.Pause(System.Int32)"/> were called with the specified <paramref name="interval"/>.
             </remarks>
             
             <param name="interval">The interval, in milliseconds.</param>
            
             <returns>The actual length of the pause, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Pause">
            <summary>
            Pauses the execution of the script.
            </summary>
            
            <remarks>
            The script pauses for a random number of milliseconds between the minimum and maximum values set in eggPlant Performance Studio. 
            The actual pause time may be altered by the value of <see cref="P:Facilita.Fc.Runtime.VirtualUser.PauseFactor"/>
            or by the runtime options set in eggPlant Performance Studio.
            </remarks>
            
            <returns>The length of time that the script paused for, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)">
            <summary>
            Sets a progress point in the VU event log.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String,System.Boolean)">
            <summary>
            Sets a progress point in the VU event log, specifying whether the progress point <i>passed</i>.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text, and whether it <i>passed</i> or <i>failed</i> will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a logon attempt has taken place, and whether it succeeded or failed.
            <code language="cs">
            SetProgressPoint("AtLogon");
            
            string response = ....   // the response from the server
            if (response.Contains("Invalid User or Password"))
            {
                SetProgressPoint("logon", false);   // logon failed
            }
            else
            {
                SetProgressPoint("logon", true);   // logon OK
            }
            </code>
            </example>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
            <param name="pass"><b>true</b> if the progress point should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String,System.String,System.Boolean)">
            <summary>
            Sets a progress point in the VU event log, specifying whether the progress point <i>passed</i>,
            and specifying extra information which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            A progress point can be used to indicate that the execution of a script has reached a certain point, or that the application under test is in a certain state.
            The <paramref name="progressPoint"/> text, and whether it <i>passed</i> or <i>failed</i> will be written to the VU event log, and will appear in Test Controller summary views during the test.
            </remarks>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a logon attempt has taken place, and whether it succeeded or failed.
            <code language="cs">
            SetProgressPoint("AtLogon");
            
            string response = ....   // the response from the server
            if (response.Contains("Invalid User or Password"))
            {
                SetProgressPoint("logon", response, false);   // logon failed
            }
            else
            {
                SetProgressPoint("logon", response, true);   // logon OK
            }
            </code>
            </example>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
            <param name="info">Extra information which appears in the <b>Info</b> column.</param>
            <param name="pass"><b>true</b> if the progress point should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnSetProgressPoint(System.String,System.String,System.Boolean)">
            <summary>
            This method is called whenever a progress point is set
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String,System.Boolean)"/>
            or <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String,System.String,System.Boolean)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a progress point is set.
            </remarks>
            
            <param name="progressPoint">The progress point identifier, which will appear in the <b>Progress Point</b> column in Test Controller.</param>
            <param name="info">Extra information which appears in the <b>Info</b> column.</param>
            <param name="pass"><b>true</b> if the progress point should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ClearProgressPoint">
            <summary>
            Clears the current progress point set for this Virtual User.
            </summary>
            
            <remarks>
            This has the effect of clearing the <b>Progress Point</b> column in Test Controller for this Virtual User.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnExitVU(System.String,System.Boolean)">
            <summary>
            This method is called whenever the Virtual User stops execution as a result of the <see cref="M:Facilita.Fc.Runtime.VirtualUser.ExitVU"/>,
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.ExitVU(System.Boolean)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.ExitVU(System.String,System.Boolean)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever the Virtual User stops execution.
            </remarks>
            
            <param name="msg">An information message which appears in the <b>Info</b> column of the <b>end</b> entry.</param>
            <param name="pass"><b>true</b> if the script should be considered to have completed successfully; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ExitVU">
            <summary>
            Stops execution of this Virtual User.
            </summary>
            
            <remarks>
            The script processing for the Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts 
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log 
            is written. 
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ExitVU(System.Boolean)">
            <summary>
            Stops execution of this Virtual User, specifying whether the script completed successfully.
            </summary>
            
            <remarks>
            The script processing for this Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log
            is annotated with <b>Pass</b> or <b>Fail</b> in the <b>ID</b> column depending on the value of <paramref name="pass"/>. The Virtual User will also
            be counted in the <b>In Error</b> column in Test Controller if <paramref name="pass"/> is <b>false</b>.
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
            
            <param name="pass"><b>true</b> if the script should be considered to have completed successfully; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ExitVU(System.String,System.Boolean)">
            <summary>
            Stops execution of this Virtual User, specifying whether the script completed successfully and a message to display at the end of the event log.
            </summary>
            
            <remarks>
            The script processing for this Virtual User is immediately ended (i.e. all further statements in this script are not executed, and the execution of all further scripts
            is also stopped). An information message is written to the VU event log to indicate that ExitVU() has been called, and the final <b>end</b> entry in the log
            is annotated with <b>Pass</b> or <b>Fail</b> in the <b>ID</b> column depending on the value of <paramref name="pass"/>. The Virtual User will also
            be counted in the <b>In Error</b> column in Test Controller if <paramref name="pass"/> is <b>false</b>.
            <para>
            <note type="warning">
            This method raises a ContextTerminationException and under normal conditions you should not write any code to catch this exception, as this would interfere with 
            the mechanism of the eggPlant Performance engine.
            </note>
            </para>
            </remarks>
            
            <param name="msg">An information message which appears in the <b>Info</b> column of the <b>end</b> entry.</param>
            <param name="pass"><b>true</b> if the script should be considered to have completed successfully; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)">
            <summary>
            Writes a <b>start transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/> is called with the same <paramref name="id"/>, an <b>end transaction</b> 
            event is written to the VU event log. eggPlant Performance uses the time difference between the events to calculate 
            the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)">
            <summary>
            Writes a <b>start transaction</b> event to the VU event log,
            specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/> is called with the same <paramref name="id"/>, an <b>end transaction</b> 
            event is written to the VU event log. eggPlant Performance uses the time difference between the events to calculate 
            the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetTransactionElapsedTime(System.String)">
            <summary>
            Gets the current elapsed time of the transaction with the specified <paramref name="id"/>.
            </summary>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a transaction has lasted more than 5 seconds.
            <code language="cs">
            StartTransaction("Transaction1");
            
            // do activity
            
            if (GetTransactionElapsedTime("Transaction1") > 5000)
            {
                SetProgressPoint("Activity > 5 Seconds");
            }
            
            // do more activity
            
            EndTransaction("Transaction1", true);
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>The elapsed time of the transaction, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetTransactionElapsedTime(System.String,System.String)">
            <summary>
            Gets the current elapsed time of the transaction with the specified <paramref name="id"/> and <paramref name="tag"/>.
            </summary>
            
            <example>
            The following example demonstrates setting a progress point to indicate that a transaction has lasted more than 5 seconds.
            <code language="cs">
            StartTransaction("Transaction1", "Tag1");
            
            // do activity
            
            StartTransaction("Transaction1", "Tag2");
            if (GetTransactionElapsedTime("Transaction1", "Tag1") > 5000)
            {
                SetProgressPoint("Activity > 5 Seconds");
            }
            
            EndTransaction("Transaction1", true, "Tag1");
            
            // do more activity
            
            EndTransaction("Transaction1", true, "Tag2");
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
            
            <returns>The elapsed time of the transaction, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetTimingElapsedTime">
            <summary>
            Gets the elapsed time of the current active timing.
            </summary>
            
            <remarks>
            Returns 0 (zero) if there is no current timing. A timing can be started using the 
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/> method.
            </remarks>
            <example>
            The following example demonstrates setting a progress point to indicate that a timing has lasted more than 5 seconds.
            <code language="cs">
            StartTiming("Timing1");
            
            // do activity
            
            if (GetTimingElapsedTime() &gt; 5000)
            {
                SetProgressPoint("Activity &gt; 5 Seconds");
            }
            
            // do more activity
            
            EndTiming("Timing1");
            </code>
            </example>
            
            <returns>The elapsed time of the timing, in milliseconds.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StartRequest(System.String)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndRequest(System.String)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndRequest(System.String,Facilita.Fc.Runtime.MetricCollection)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="request">For internal use only.</param>
            <param name="metrics">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordMetric(System.String,System.Int32)">
             <summary>
             Records a user metric.
             </summary>
             
             <remarks>
             This can be any numeric value which is considered relevant to the test, such as the number of search results
             returned by a web page, or a count of files in a directory.
             <para>
             The metric value is written to the Virtual User event log. A chart showing how the metric value changes
             during the test will be available in Test Controller and Analyzer.
             </para>
             </remarks>
            
             <param name="name">The metric identifier.</param>
             <param name="value">The metric value.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordMetrics(Facilita.Fc.Runtime.MetricCollection)">
             <summary>
             Records multiple user metrics simultaneously.
             </summary>
            
             <remarks>
             These can be any numeric value which is considered relevant to the test, such as the number of search results
             returned by a web page, or a count of files in a directory.
             <para>
             Each metric value is written to the Virtual User event log. A chart showing how the metric values change
             during the test will be available in Test Controller and Analyzer.
             </para>
             </remarks>
             
             <param name="metrics">The collection of metrics to record.</param>
             
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.RecordMetric(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnStartTransaction(System.String,System.String)">
            <summary>
            This method is called whenever a transaction is started using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>
            or <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a transaction is started.
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)">
             <summary>
             Suspends the timing of the specified transaction.
             </summary>
             
             <remarks>
             Use <see cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/> to resume timing again afterwards.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String,System.String)">
             <summary>
             Suspends the timing of the specified transaction,
             identified by <paramref name="tag"/> as well as <paramref name="id"/>.
             </summary>
             
             <remarks>
             Use <see cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String,System.String)"/> to resume timing again afterwards.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login", "1");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login", "1");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login", "1");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login", true, "1");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="tag">The transaction tag.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String,System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnSuspendTransaction(System.String,System.String)">
            <summary>
            This method is called whenever a transaction is suspended
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a transaction is suspended.
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)">
             <summary>
             Resumes the timing of the specified transaction.
             </summary>
             
             <remarks>
             Use this method after a call to <see cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>.
             </remarks>
             
             <example>
             The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
             <code language="cs">
             StartTransaction("login");
             
             // This should be included in the transaction time
             GoToLoginPage();
             
             SuspendTransaction("login");
             
             // The time taken for this processing to be done will be
             // subtracted from the total "login" transaction time
             // because it isn't related to the performance of the SUT
             PrepareLoginDetails();
             
             ResumeTransaction("login");
             
             // This should be included in the transaction time
             PerformLogin();
             
             EndTransaction("login");
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
            
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String,System.String)">
            <summary>
            Resumes the timing of the specified transaction,
            identified by <paramref name="tag"/> as well as <paramref name="id"/>.
            </summary>
            
            <remarks>
            Use this method after a call to <see cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String,System.String)"/>.
            </remarks>
            
            <example>
            The following example demonstrates suspending a transaction while performing processing that is unrepresentative of a real user's work.
            <code language="cs">
            StartTransaction("login", "1");
            
            // This should be included in the transaction time
            GoToLoginPage();
            
            SuspendTransaction("login", "1");
            
            // The time taken for this processing to be done will be
            // subtracted from the total "login" transaction time
            // because it isn't related to the performance of the SUT
            PrepareLoginDetails();
            
            ResumeTransaction("login", "1");
            
            // This should be included in the transaction time
            PerformLogin();
            
            EndTransaction("login", true, "1");
            </code>
            </example>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnResumeTransaction(System.String,System.String)">
            <summary>
            This method is called whenever a transaction is resumed
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a transaction is resumed.
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">The transaction tag.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log, specifying whether the transaction <i>passed</i>.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            <para>
            If the transaction <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)">
            <summary>
            Writes an <b>end transaction</b> event to the VU event log, specifying whether the transaction <i>passed</i>,
            and specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            <para>
            If the transaction <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SuspendTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.ResumeTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnEndTransaction(System.String,System.Boolean,System.String)">
            <summary>
            This method is called whenever a transaction is ended using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>,
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/>,
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.FailTransaction(System.String)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.FailTransaction(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a transaction is ended.
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordTransaction(System.String,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Records a transaction in the VU event log, specifying whether the transaction <i>passed</i>.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             int startTime = this.ElapsedTime;
             bool result = DoSomething();
             int duration = this.ElapsedTime - startTime;
             
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration, true);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration, false);
             }
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started, measured in milliseconds since the start of the test run.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
             <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordTransaction(System.String,System.Int32,System.Int32)">
             <summary>
             Records a transaction in the VU event log.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
            
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             int startTime = this.ElapsedTime;
             bool result = DoSomething();
             int duration = this.ElapsedTime - startTime;
             
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration);
             }
             </code>
             </example>
             
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started, measured in milliseconds since the start of the test run.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordTransaction(System.String,System.DateTime,System.TimeSpan,System.Boolean)">
             <summary>
             Records a transaction in the VU event log, specifying whether the transaction <i>passed</i>.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             DateTime startTime = DateTime.Now;
             bool result = DoSomething();
             TimeSpan duration = DateTime.Now - startTime;
            
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration, true);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration, false);
             }
             </code>
             </example>
            
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
             <param name="pass"><b>true</b> if the transaction should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.RecordTransaction(System.String,System.DateTime,System.TimeSpan)">
             <summary>
             Records a transaction in the VU event log.
             </summary>
             
             <remarks>
             The recommended way to record a transaction is by using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> 
             and <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/> methods.
             <para>
             This method is useful if you need to measure a transaction where the start time and/or the transaction name are not known at the point the transaction starts. 
             For example, you may wish to record a different transaction name depending on the result of a particular call to the SUT.
             </para>
             </remarks>
             
             <example>
             The following example demonstrates recording a transaction with a different name, depending on the return value of a method.
             <code language="cs">
             DateTime startTime = DateTime.Now;
             bool result = DoSomething();
             TimeSpan duration = DateTime.Now - startTime;
            
             // Transaction name differs, depending on the result of the call        
             if (result)
             {
                 RecordTransaction("transaction1", startTime, duration);
             }
             else
             {
                 RecordTransaction("transaction2", startTime, duration);
             }
             </code>
             </example>
            
             <param name="id">The transaction identifier.</param>
             <param name="startTime">The time at which the transaction started.</param>
             <param name="duration">The duration of the transaction, in milliseconds.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)">
            <summary>
            Writes a <b>start timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            When <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String)"/> is called with the same <paramref name="id"/>, an <b>end timing</b>
            event is written to the VU event log. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnStartTiming(System.String)">
            <summary>
            This method is called whenever a timing is started using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/> method.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a timing is started.
            </remarks>
            
            <param name="timing">The timing identifier.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String,System.Boolean)">
            <summary>
            Writes an <b>end timing</b> event to the VU event log, specifying whether the timing <i>passed</i>.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            <para>
            If the timing <i>failed</i>, then it will be counted separately in Test Controller and Analyzer.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            <param name="pass"><b>true</b> if the timing should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String)">
            <summary>
            Writes an <b>end timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnEndTiming(System.String,System.Boolean)">
            <summary>
            This method is called whenever a timing is ended using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String)"/>
            or <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String,System.Boolean)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever a timing is ended.
            </remarks>
            
            <param name="timing">The timing identifier.</param>
            <param name="pass"><b>true</b> if the timing should be interpreted as a <i>pass</i>; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)">
            <summary>
            Writes an information message to the VU event log.
            </summary>
            
            <param name="message">An information message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String,System.String)">
            <summary>
            Writes an information message to the VU event log, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <param name="id">The message identifier, which appears in the <b>ID</b> column.</param>
            <param name="message">An information message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.Exception)">
            <summary>
            Write an information message to the VU event log, consisting of the exception specified.
            </summary>
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>), and the path passed should be relative to this path.
            <param name="e">The exception to write to the event log.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String,System.String,System.String)">
            <summary>
            Writes an information message to the VU event log and also a link to an image, specifying an identifier which appears in the <b>ID</b> column.
            </summary>
            
            <remarks>
            The image must be contained within the run directory (as returned by <see cref="P:Facilita.Fc.Runtime.VirtualUser.RunPath"/>), and the path passed should be relative to this path.
            </remarks>
            
            <param name="id">The message identifier, which appears in the <b>ID</b> column.</param>
            <param name="info">An information message which appears in the <b>Info</b> column.</param>
            <param name="imagePath">the path to an image file (such as a png or bmp). The path should be a relative path.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnWriteMessage(System.String,System.String)">
            <summary>
            This method is called whenever an information message is written to the VU event log
            using the <see cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/> or <see cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String,System.String)"/> methods.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever an information message is written to the VU event log.
            </remarks>
            
            <param name="id">The message identifier, which appears in the <b>ID</b> column.</param>
            <param name="message">An information message which appears in the <b>Info</b> column.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Pre">
            <summary>
            This method is called before any scripts are executed.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            only once, before any scripts are executed.
            <para>
            <note type="warning">
            This method initialises logging systems. If you override this method 
            in a custom Virtual User, then a call to <c>base.Pre()</c>
            <b>must</b> be made and must occur before any code that may cause an exception or write to a log.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Post">
            <summary>
            This method is called after all scripts have finished executing.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            only once, after all scripts have finished executing.
            <para>
            <note type="warning">
            This method shuts down logging systems. If you override this method 
            in a custom Virtual User, then a call to <c>base.Post()</c>
            <b>must</b> be made at the end of the method.
            </note>
            <note type="warning">
            All exceptions thrown during the execution of this method
            must be caught and handled. 
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StartCustomVUWatcher">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.StopCustomVUWatcher">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Fail(System.String,System.Boolean)">
            <summary>
            Writes a fail event to the VU event log.
            </summary>
            
            <param name="message">A failure message which appears in the <b>Info</b> column.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Verify(System.Boolean,System.Boolean)">
            <summary>
            Verifies that a boolean expression is <b>true</b>.
            </summary>
            
            <param name="arg">The expression to evaluate.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the expression evaluates to <b>false</b>.</param>
            
            <returns><b>true</b> if the expression evaluates to <b>true</b>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyEQ(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that two strings are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the strings are not equal.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the strings are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyEQ(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that two integers are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the integers are not equal.</param>
            
            <returns><b>true</b> if the integers are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyEQ(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that two longs are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the longs are not equal.</param>
            
            <returns><b>true</b> if the longs are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyEQ(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that two doubles are equal.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the two values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the doubles are not equal.</param>
            
            <returns><b>true</b> if the doubles are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLT(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that one string is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> string is not less than the 2<sup>nd</sup> string.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> string is less than the 2<sup>nd</sup> string; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLT(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that one integer is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> integer is not less than the 2<sup>nd</sup> integer.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> integer is less than the 2<sup>nd</sup> integer; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLT(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that one long is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> long is not less than the 2<sup>nd</sup> long.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> long is less than the 2<sup>nd</sup> long; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLT(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that one double is less than another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> double is not less than the 2<sup>nd</sup> double.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> double is less than the 2<sup>nd</sup> double; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLE(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that one string is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> string.</param>
            <param name="arg2">The 2<sup>nd</sup> string.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> string is not less than or equal to the 2<sup>nd</sup> string.</param>
            <param name="caseInsensitive"><b>true</b> if the comparison should be case-insensitive.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> string is less than or equal to the 2<sup>nd</sup> string; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLE(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies that one integer is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> integer.</param>
            <param name="arg2">The 2<sup>nd</sup> integer.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> integer is not less than or equal to the 2<sup>nd</sup> integer.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> integer is less than or equal to the 2<sup>nd</sup> integer; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLE(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifies that one long is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> long.</param>
            <param name="arg2">The 2<sup>nd</sup> long.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> long is not less than or equal to the 2<sup>nd</sup> long.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> long is less than or equal to the 2<sup>nd</sup> long; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.VerifyLE(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifies that one double is less than or equal to another.
            </summary>
            
            <param name="arg1">The 1<sup>st</sup> double.</param>
            <param name="arg2">The 2<sup>nd</sup> double.</param>
            <param name="delta">The maximum permitted difference between the values.</param>
            <param name="throwException"><b>true</b> if an <see cref="T:Facilita.Exception.FCException"/> should be thrown if the 1<sup>st</sup> double is not less than or equal to the 2<sup>nd</sup> double.</param>
            
            <returns><b>true</b> if the 1<sup>st</sup> double is less than or equal to the 2<sup>nd</sup> double; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FailAction(Facilita.Fc.Runtime.ActionType,System.String)">
            <summary>
            Takes the specified <paramref name="action"/>, using the specified error <paramref name="msg"/>.
            </summary>
            
            <param name="action">The action to take.</param>
            <param name="msg">The error message.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetDataDictionary(System.String)">
            <summary>
            Gets the Data Dictionary named with the specified <paramref name="key"/> and assigned to the Virtual User in eggPlant Performance Studio.
            </summary>
            
            <param name="key">The name of the Data Dictionary as it appears in eggPlant Performance Studio.</param>
            
            <returns>The specified Data Dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetDataTable(System.String)">
            <summary>
            Gets the specified Data Table.
            </summary>
            
            <remarks>
            This method allows you to locate the existing Data Table by name. The dictionaries it contains can then be accessed by using the appropriate methods 
            of <see cref="T:Facilita.Fc.Runtime.IDataTable"/>.
            </remarks>
            
            <param name="key">The name of the <see cref="T:Facilita.Fc.Runtime.IDataTable"/>.</param>
            
            <returns>A reference to a named <see cref="T:Facilita.Fc.Runtime.IDataTable"/> object.</returns>
            
            <seealso cref="T:Facilita.Fc.Runtime.IDataTable"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetString(System.String)">
            <summary>
            Returns a <c>string</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>string</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetString(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetString(System.String,System.String)">
            <summary>
            Returns a <c>string</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>string</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetString(System.String,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetInt(System.String)">
            <summary>
            Returns an <c>int</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An <c>int</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetInt(System.String,System.Int32)">
            <summary>
            Returns an <c>int</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>int</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetInt(System.String,System.Int32)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetLong(System.String)">
            <summary>
            Returns a <c>long</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>long</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetLong(System.String,System.Int64)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetLong(System.String,System.Int64)">
            <summary>
            Returns a <c>long</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>long</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetLong(System.String,System.Int64)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetFloat(System.String)">
            <summary>
            Returns a <c>float</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>float</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetFloat(System.String,System.Single)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetFloat(System.String,System.Single)">
            <summary>
            Returns a <c>float</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>float</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetFloat(System.String,System.Single)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetDouble(System.String)">
            <summary>
            Returns a <c>double</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>double</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetDouble(System.String,System.Double)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetDouble(System.String,System.Double)">
            <summary>
            Returns a <c>double</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>double</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetDouble(System.String,System.Double)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetBoolean(System.String)">
            <summary>
            Returns a <c>boolean</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>A <c>boolean</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetBoolean(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetBoolean(System.String,System.Boolean)">
            <summary>
            Returns a <c>boolean</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>A <c>boolean</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetBoolean(System.String,System.Boolean)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Get(System.String)">
             <summary>
             Returns a reference to an <c>object</c> held in the dictionary.
             </summary>
            
             <param name="key">The key to be looked up in the dictionary.</param>
             
             <returns>An <c>object</c> value held in the dictionary.</returns>
             
             <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
             
             <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Get``1(System.String)">
            <summary>
            Returns a reference to an <c>object</c> held in the dictionary.
            </summary>
            
            <typeparam name="T">The type of value to get</typeparam>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            <exception cref="T:Facilita.Exception.BadValueException">The <paramref name="key"/> is not of the correct type.</exception>
            
            <returns>An <c>object</c> value held in the dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Get(System.String,System.Object)">
            <summary>
            Returns an <c>object</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>object</c> value held in the dictionary, or the <paramref name="defaultValue"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetString(System.String,System.String)">
            <summary>
            Sets a <c>string</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>string</c> in the data dictionary.
            <code language="cs">
            SetString("hostName", "www.testplant.com");
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>string</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetString(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetInt(System.String,System.Int32)">
            <summary>
            Sets an <c>int</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>int</c> in the data dictionary.
            <code language="cs">
            SetInt("port", 8080);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>int</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetInt(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetLong(System.String,System.Int64)">
            <summary>
            Sets a <c>long</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>long</c> in the data dictionary.
            <code language="cs">
            SetLong("timestamp", 9156598231230);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>long</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetLong(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetFloat(System.String,System.Single)">
            <summary>
            Sets a <c>float</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>float</c> in the data dictionary.
            <code language="cs">
            SetFloat("amount", 123.45f);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>float</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetFloat(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetDouble(System.String,System.Double)">
            <summary>
            Sets a <c>double</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>double</c> in the data dictionary.
            <code language="cs">
            SetDouble("amount", 123.45);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>double</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetDouble(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets a <c>boolean</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>boolean</c> in the data dictionary.
            <code language="cs">
            SetBoolean("retryLogon", false);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>boolean</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetBoolean(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Set(System.String,System.Object)">
            <summary>
            Sets an <c>object</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>object</c> in the data dictionary.
            <code language="cs">
            Set("today", DateTime.Now);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>object</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Get(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Set``1(System.String,``0)">
            <summary>
            Sets an <c>object</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting a <c>Form</c> in the data dictionary.
            <code language="cs">
            Set%lt;Form&gt;("form_33_1", form_33_1);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>object</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetList(System.String,System.Collections.ArrayList)">
            <summary>
            Returns an <c>ArrayList</c> value held in the dictionary, or the <paramref name="defaultList"/> if the <paramref name="key"/> cannot be found.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            <param name="defaultList">The value to return if the <paramref name="key"/> is not present in the dictionary.</param>
            
            <returns>An <c>ArrayList</c> value held in the dictionary, or the <paramref name="defaultList"/> if the <paramref name="key"/> cannot be found.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetList(System.String,System.Collections.ArrayList)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetList(System.String)">
            <summary>
            Returns an <c>ArrayList</c> value held in the dictionary.
            </summary>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns>An <c>ArrayList</c> value held in the dictionary.</returns>
            
            <exception cref="T:Facilita.Exception.NoSuchValueException">The <paramref name="key"/> does not exist in the dictionary.</exception>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetList(System.String,System.Collections.ArrayList)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.SetList(System.String,System.Collections.ArrayList)">
            <summary>
            Sets an <c>ArrayList</c> value in the dictionary.
            </summary>
            
            <remarks>
            <paramref name="key"/> is associated with the value in the dictionary. 
            If the <paramref name="key"/> already exists in the dictionary then the old value 
            is replaced by the new value, otherwise a new key/value pair is added to the dictionary.
            </remarks>
            
            <example>
            The following example demonstrates setting an <c>ArrayList</c> in the dictionary.
            <code language="cs">
            ArrayList hostList = new ArrayList();
            hostList.Add("www.testplant.com");
            SetList("hosts", hostList);
            </code>
            </example>
            
            <param name="key">The key to associate with <paramref name="val"/> in the dictionary.</param>
            <param name="val">The <c>ArrayList</c> to be associated with the <paramref name="key"/> in the dictionary.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.GetBoolean(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.Add(Facilita.Fc.Runtime.IDataDictionary)">
            <summary>
            Merges the specified <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> into this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>.
            </summary>
            
            <remarks>
            All keys and values are added to this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>.
            Any keys which already exist in this <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> 
            will have their values replaced.
            </remarks>
            
            <param name="val">The <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/> to be merged.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the key/value pairs in this dictionary.
            </summary>
            
            <returns>An enumerator for iterating over the key/value pairs in this dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.HasKey(System.String)">
            <summary>
            Determines whether the specified <paramref name="key"/> is contained within the dictionary.
            </summary>
            
            <example>
            The following example demonstrates checking if the dictionary contains a key.
            <code language="cs">
            if (myDictionary.HasKey("newHostName"))
            {
                // do something
            }
            else
            {
                // do something else
            }
            </code>
            </example>
            
            <param name="key">The key to be looked up in the dictionary.</param>
            
            <returns><b>true</b> if the dictionary contains the specified <paramref name="key"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FailTiming(System.String)">
            <summary>
            Writes a <b>fail timing</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the timing with the specified <paramref name="id"/>.
            <para>
            This timing will be interpreted as having <i>failed</i>,
            so it will be counted separately in Test Controller and Analyzer. This is equivalent to
            calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTiming(System.String,System.Boolean)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Timings are similar to transactions but are measured and grouped separately in test results.
            </para>
            </remarks>
            
            <param name="id">The timing identifier.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTiming(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FailTransaction(System.String)">
            <summary>
            Writes a <b>fail transaction</b> event to the VU event log.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            This transaction will be interpreted as having <i>failed</i>, 
            so it will be counted separately in Test Controller and Analyzer.
            This is equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FailTransaction(System.String,System.String)">
            <summary>
            Writes a <b>fail transaction</b> event to the VU event log, specifying a <paramref name="tag"/> which appears in the <b>Info</b> column.
            </summary>
            
            <remarks>
            The time in milliseconds since the start of the test run is recorded when this method is called.
            The <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/> method should already 
            have been called with the same <paramref name="id"/>. eggPlant Performance uses the time difference between
            the events to calculate the <i>transaction time</i> for the transaction named with the specified <paramref name="id"/>.
            <para>
            This transaction will be interpreted as having <i>failed</i>, 
            so it will be counted separately in Test Controller and Analyzer.
            This is equivalent to calling <see cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/> with a pass value of <b>false</b>.
            </para>
            <para>
            Test Controller and Analyzer use the <i>transaction times</i> to calculate statistics
            such as average transaction time for each different <paramref name="id"/>. These statistics give 
            an indication of the performance of the System Under Test, as they show how long it takes for 
            Virtual Users to perform the actions.
            </para>
            </remarks>
            
            <param name="id">The transaction identifier.</param>
            <param name="tag">Extra information which appears in the <b>Info</b> column.</param>
            
            <returns>Elapsed time in milliseconds since the start of the test.</returns>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String,System.Boolean,System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.FlushEventLog">
            <summary>
            Flushes the event log to disk.
            </summary>
            
            <remarks>
            Any events still held in-memory are written to the Virtual User event log on disk. 
            This enables the event log file to be viewed before the test has completed.
            <para>
            <note type="note">
            Writing an error event also flushes the log.
            </note>
            </para>
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteSystemLog(System.String,System.String)">
            <summary>
            Writes an alert of <b>Error</b> severity to the Alerts table in Test Controller, specifying a <paramref name="heading"/> to prefix to the <paramref name="message"/>.
            </summary>
            
            <remarks>
            This method was included for backwards compatibility with older eggPlant Performance scripts.
            The Test Controller Alerts table is made accessible from the script using WriteSystemLog. WriteSystemLog will add an alert of severity level <b>Error</b>. 
            Other table fields include the time into the test the error alert was raised (HH:MM:SS), the source of the alert (this will always be 'Engine' when 
            called from the script), the index of the VU who raised the alert and the injector that VU was deployed on, the group which that VU was a member of and 
            the script the VU was executing when the alert was raised.
            <para>
            <note type="warning">
            <b>WriteSystemLog must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>, 
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/> to output to the VU event log; this can be viewed 
            at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
            </note>
            </para>
            </remarks>
            
            <param name="heading">A string to be prefixed to the output <paramref name="message"/>.</param>
            <param name="message">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.WriteSystemLog(System.String)">
            <summary>
            Writes an alert of <b>Error</b> severity to the Alerts table in Test Controller.
            </summary>
            
            <remarks>
            This method was included for backwards compatibility with older eggPlant Performance scripts.
            The Test Controller Alerts table is made accessible from the script using WriteSystemLog. WriteSystemLog will add an alert of severity level <b>Error</b>. 
            Other table fields include the time into the test the error alert was raised (HH:MM:SS), the source of the alert (this will always be 'Engine' when 
            called from the script), the index of the VU who raised the alert and the injector that VU was deployed on, the group which that VU was a member of and 
            the script the VU was executing when the alert was raised.
            <para>
            <note type="warning">
            <b>WriteSystemLog must be used sparingly.</b> It is possible to flood the Alerts log. For diagnostic purposes use <see cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>, 
            <see cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)"/>, <see cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/> and <see cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/> to output to the VU event log; this can be viewed 
            at runtime in Test Controller. The Alerts log should only be used for a small number of important messages. 
            </note>
            </para>
            </remarks>
            
            <param name="message">An alert message which appears in the <b>Description</b> column of the alerts table in the <b>Alerts</b> sub-view of Test Controller.</param>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.RaiseAlert(Facilita.Fc.Runtime.AlertSeverity,System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.WriteMessage(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Warn(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Error(System.String)"/>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetGroupSize(System.String)">
            <summary>
            Gets the number of Virtual Users in the specified Virtual User group.
            </summary>
            
            <example>
            The following example demonstrates getting the number of Virtual Users in the group <b>G1</b>.
            <code language="cs">
            int groupSize = GetGroupSize("G1"); 
            </code>
            </example>
            
            <param name="groupName">A Virtual User group.</param>
            
            <returns>The size of the Virtual User group.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Facilita.Fc.Runtime.IDataDictionary"/>
            belonging to this Virtual User
            </summary>
            
            <returns>A string representing the key/value pairs in the dictionary.</returns>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnStartInitialSection">
            <summary>
            This method is called whenever the Virtual User is about to start executing the <b>initial</b> sequence of scripts in its workflow.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever the Virtual User starts executing the <b>initial</b> sequence of scripts.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.OnStartFinalSection">
            <summary>
            This method is called whenever the Virtual User is about to start executing the <b>final</b> sequence of scripts in its workflow.
            </summary>
            
            <remarks>
            Override this method in your custom Virtual User if you have code which should be run
            whenever the Virtual User starts executing the <b>final</b> sequence of scripts.
            </remarks>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.AttachLogMessageSender(Facilita.Fc.Runtime.IMessageSender)">
            <summary>
            For internal use only.
            </summary>
            
            <param name="messageSender">For internal use only.</param>
        </member>
        <member name="M:Facilita.Fc.Runtime.VirtualUser.GetTransactionData(System.String)">
            <summary>
            Get data about the specified transaction.
            </summary>
            <param name="id">The id of the transaction</param>
            <returns>data about the specified transaction.</returns>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IterationDelay">
            <summary>
            Gets the delay time in milliseconds between iterations of the <b>repeated</b> sequence of scripts.
            </summary>
            
            <remarks>
            This is the value set in the VU Group runtime properties in eggPlant Performance Studio.
            If the <b>pacing</b> option is selected, then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value>The time between iterations, in milliseconds.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.LastIterationDelay"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Flags">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Group">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NumberOfWarmupIterations">
            <summary>
            Gets or sets the number of warm-up iterations for this Virtual User.
            </summary>
            
            <remarks>
            The value indicates the number of warm-up iterations this Virtual User will execute and is only relevant to the <b>repeated</b> sequence of scripts. Warm-up 
            iterations are considered to be of no interest statistically and during a warm-up iteration the start and end transaction events are not 
            written to the VU event log.
            </remarks>
            
            <value>The number of warm-up iterations for this Virtual User.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.EndTransaction(System.String)"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NumberOfIterations">
            <summary>
            Gets the total number of iterations that the <b>repeated</b> sequence of scripts will execute.
            </summary>
            
            <remarks>
            A return value of zero indicates that the iterated scripts are iterating for a specified time or forever, and not for a specified number of iterations.
            </remarks>
            
            <value>The number of iterations that the <b>repeated</b> sequence of scripts will execute, as set in the VU Group runtime settings in eggPlant Performance Studio.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.Iteration"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.TransactionLoggingOn">
            <summary>
            Gets or sets a value that indicates whether transactions should be logged for this VU.
            </summary>
            
            <remarks>
            When the Transaction Logging flag is <b>false</b>, start and end transaction events are not written to the event log.
            </remarks>
            
            <value><b>true</b> if the transaction should be logged; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.CurrentIteration">
            <summary>
            Gets the number of the iteration that this Virtual User is currently executing (beginning at 1).
            </summary>
            
            <remarks>
            As a Virtual User completes execution of the <b>iterated</b> sequence of scripts,
            the iteration number is increased by 1 and execution of the next iteration of
            the <b>iterated</b> sequence of scripts is started from the beginning.
            <para>
            This method returns 1 if this Virtual User is executing the first iteration.
            Compare to <see cref="P:Facilita.Fc.Runtime.VirtualUser.Iteration"/>.
            </para>
            </remarks>
            
            <value>The number of the iteration that this Virtual User is currently executing (beginning at 1).</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Iteration">
            <summary>
            Gets the number of the iteration that this Virtual User is currently executing (beginning at 0).
            </summary>
            
            <remarks>
            As a Virtual User completes execution of the <b>iterated</b> sequence of scripts,
            the iteration number is increased by 1 and execution of the next iteration of
            the <b>iterated</b> sequence of scripts is started from the beginning.
            <para>
            This method returns 0 if this Virtual User is executing the first iteration.
            Compare to <see cref="P:Facilita.Fc.Runtime.VirtualUser.CurrentIteration"/>.
            </para>
            </remarks>
            
            <value>The number of the iteration that this Virtual User is currently executing (beginning at 0).</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.DataDictionary">
            <summary>
            Gets the Data Dictionary belonging to this Virtual User.
            </summary>
            
            <value>The Data Dictionary belonging to this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.ContextState">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.ElapsedTime">
            <summary>
            Gets the elapsed time since the beginning of the test, in milliseconds.
            </summary>
            
            <value>The elapsed time since the beginning of the test, in milliseconds.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.VUName">
            <summary>
            Gets the name of the <i>group</i> that this Virtual User belongs to.
            </summary>
            
            <value>The Virtual User group name.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.InitialDelay">
            <summary>
            Gets the initial delay for this Virtual User, between the start of the test and the start of the first script execution.
            </summary>
            
            <remarks>
            By the time this method can be called, the initial delay will already have happened,
            and this will return the actual number of milliseconds that this Virtual User waited before starting script execution. 
            The value returned includes the initial group delay <b>and</b> the ramp-up for this specific Virtual User. 
            </remarks>
            
            <value>The initial delay, in milliseconds.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Index">
            <summary>
            Gets the index number of this Virtual User within the Virtual User group that it belongs to.
            </summary>
            
            <remarks>
            The first Virtual User has index 1.
            </remarks>
            
            <example>
            The following example demonstrates executing conditional code based on the index number.
            <code language="cs">
            // pause for 1 second, every 10th VU
            if ((this.Index % 10) == 0)
            {
                Pause(1000);
            }
            </code>
            </example>
            
            <value>The index number of this Virtual User within the Virtual User group that it belongs to.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.UniqueID">
            <summary>
            Gets a test-wide unique identifier for this Virtual User.
            </summary>
            
            <remarks>
            The first Virtual User has the identifier 1.
            </remarks>
            
            <example>
            The following example demonstrates executing conditional code based on the unique Virtual User index number.
            <code language="cs">
            // pause for 1 second, every 10th VU
            if ((this.UniqueID % 10) == 0)
            {
                Pause(1000);
            }
            </code>
            </example>
            
            <value>The unique identifier of this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.PauseFactor">
            <summary>
            Gets or sets the current percentage pause factor.
            </summary>
            
            <remarks>
            You can use this property to slow down or speed up a running test, by changing the length of time
            that this Virtual User will pause for.
            </remarks>
            
            <example>
            The following example demonstrates increasing and decreasing the time that a Virtual User will pause for.
            <code language="cs">
            // to make all pauses twice as long (200%)
            this.PauseFactor = 200;
            
            // or to reduce all following pauses to 10% of their stated value
            this.PauseFactor = 10;
            
            // or to obtain the current value
            int pf = this.PauseFactor;
            </code>
            </example>
            
            <value>A percentage factor to apply to all subsequent <see cref="M:Facilita.Fc.Runtime.VirtualUser.Pause"/> statements.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.Pause"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.ProgressPoint">
            <summary>
            Gets the text of the most recent progress point that was set.
            </summary>
            
            <value>The text of the most recent progress point that was set.</value>
            
            <seealso cref="M:Facilita.Fc.Runtime.VirtualUser.SetProgressPoint(System.String)"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.CurrentTransaction">
            <summary>
            Gets the name of the transaction that is currently in progress.
            </summary>
            
            <remarks>
            This is the name of the most recent transaction to be started by a call to <see cref="M:Facilita.Fc.Runtime.VirtualUser.StartTransaction(System.String)"/>.
            If no transaction is currently in progress, then an empty string will be returned.
            </remarks>
            
            <value>The name of the transaction that is currently in progress.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.LastTransaction">
            <summary>
            Gets the name of the most recent transaction to have ended.
            </summary>
            
            <value>The name of the most recent transaction to have ended.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.CurrentScript">
             <summary>
             Gets the currently-executing script.
             </summary>
            
             <value>The currently-executing script.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.GroupSizes">
            <summary>
            Gets the number of Virtual Users in each Virtual User group.
            </summary>
            
            <example>
            The following example demonstrates getting the number of Virtual Users in the group <b>G1</b>.
            <code language="cs">
            int groupSize = this.GroupSizes.GetInt("G1");
            </code>
            </example>
            
            <value>A data dictionary in which the keys are group names and the values are the group sizes.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.LastError">
            <summary>
            Gets the most recent error encountered by this Virtual User.
            </summary>
            
            <value>The most recent error encountered by this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IsPacing">
            <summary>
            Gets a value that indicates whether this Virtual User will adjust the delay between iterations to maintain a steady pace of iterations.
            </summary>
            
            <remarks>
            The Virtual User pauses between each iteration of the <b>iterated</b> sequence of scripts. 
            If the <b>pacing</b> option is selected in the VU Group runtime properties in eggPlant Performance Studio, 
            then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value><b>true</b> if this Virtual User will adjust the delay between iterations to maintain a steady pace of iterations; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IterationDelay"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.LastIterationDelay">
            <summary>
            Gets the delay time in milliseconds between the previous iteration and the current iteration.
            </summary>
            
            <remarks>
            The property value will be zero on the first iteration. 
            If the <b>pacing</b> option is selected, then the iteration delay value is adjusted each time to maintain a fixed rate of script iterations.
            </remarks>
            
            <value>The time between the previous iteration and the current iteration, in milliseconds.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IterationDelay"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsPacing"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IsInitialScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>initial</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>initial</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsFinalScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsIteratedScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IsIteratedScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>repeated</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>repeated</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsFinalScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsInitialScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IsFinalScript">
            <summary>
            Gets a value that indicates whether the current executing script is within the <b>final</b> section of this Virtual User's workflow.
            </summary>
            
            <value><b>true</b> if the current executing script is within the <b>final</b> section of this Virtual User's workflow; otherwise, <b>false</b>.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsIteratedScript"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.IsInitialScript"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IterationForTime">
            <summary>
            Gets the time in milliseconds that the <b>iterated</b> sequence of scripts will iterate for.
            </summary>
            
            <remarks>
            <ul>
            <li>Returns 0 if the <b>iterated</b> sequence of scripts have been set to execute a certain number of iterations, or to iterate forever.</li>
            <li>Returns a value greater than 0 if the <b>iterated</b> sequence of scripts have been set to execute for a given length of time.</li>
            </ul>
            In the second case, the value returned is the amount of time to be spent iterating. Once this length of time is met or exceeded, no further iterations of the
            <b>iterated</b> sequence of scripts will occur.
            </remarks>
            
            <value>The time in milliseconds that the <b>iterated</b> sequence of scripts will iterate for.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.IsLastIteration">
            <summary>
            Gets a value that indicates whether more iterations will occur for the current Virtual User.
            </summary>
            
            <remarks>
            If the currently executing script belongs to the <b>initial</b> or <b>final</b> sequence of scripts in this Virtual User's workflow, then this property will have the value <b>true</b>.
            <para>
            If the currently executing script belongs to the <b>iterated</b> sequence of scripts and the property value is <b>true</b>, then the VU will cease to iterate once 
            the current sequence has completed execution.
            </para>
            <para>
            <note type="warning">If the Virtual User is set to iterate for a certain length of time, then the time remaining is checked and an estimate is made
            as to whether further iterations may occur.
            </note>
            </para>
            </remarks>
            
            <value><b>true</b> if there will be no more iterations in the current sequence; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.FinishIteratingRequested">
            <summary>
            Gets a value that indicates whether this Virtual User has been requested to finish iterating.
            </summary>
            
            <remarks>
            This happens when <see cref="M:Facilita.Fc.Runtime.VirtualUser.FinishIterating"/> is called.
            </remarks>
            
            <value><b>true</b> if this Virtual User has been requested to finish iterating; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NumberOfWarnings">
            <summary>
            Gets the number of warnings that have been reported for this Virtual User.
            </summary>
            
            <value>The number of warnings that have been reported for this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NumberOfErrors">
            <summary>
            Gets the number of errors that have been reported for this Virtual User.
            </summary>
            
            <value>The number of errors that have been reported for this Virtual User.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.SandboxPath">
            <summary>
            Gets the path to the sandbox location.
            </summary>
            
            <remarks>
            The sandbox is the root location on an injector machine beneath which all test run files are stored. 
            This includes files transferred from the controller machine (project/workspace dlls and jars, data) and test run results and events written during test execution. 
            </remarks>
            
            <value>The path to the sandbox location.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.DataPath"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.FilesDataPath"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.DataPath">
            <summary>
            Gets the path to the data folder.
            </summary>
            
            <remarks>
            This is the folder on an injector machine to which data files are transferred from the controller machine. Files in this folder are only 
            transferred if explicitly assigned to a test or test group.
            <para>
            <note type="note">All files in the project <c>data\Files</c> folder are copied to all injectors - see <see cref="P:Facilita.Fc.Runtime.VirtualUser.FilesDataPath"/>.</note>
            </para>
            </remarks>
            
            <value>The path to the data folder.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.SandboxPath"/>
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.FilesDataPath"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.FilesDataPath">
            <summary>
            Gets the path of the <c>data\Files</c> folder.
            </summary>
            
            <remarks>
            This is the folder on an injector machine to which all the files in the <c>data\Files</c> folder on the controller machine are transferred.
            </remarks>
            
            <value>The path of the <c>data\Files</c> folder.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NowSeconds">
            <summary>
            For internal use only.
            </summary>
            
            <value></value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.StartTimeSeconds">
            <summary>
            For internal use only.
            </summary>
            
            <value></value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.RunPath">
             <summary>
             Gets the path to the test run results.
             </summary>
             
             <remarks>
             The run path is the disk location on an injector machine to which Virtual User event files and logs are written. 
             </remarks>
            
             <value>The path to the test run results.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.NumberOfFailures">
            <summary>
            Gets the current number of script failures for this Virtual User.
            </summary>
            
            <remarks>
            Failures are exceptions - such as communication exceptions - which are caught and produce an error message in the event log.
            They do not cause the Virtual User to exit until the number of failures reaches the value in the <see cref="P:Facilita.Fc.Runtime.VirtualUser.MaxFailures"/> property.
            </remarks>
            
            <value>The current number of script failures for this Virtual User.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.MaxFailures"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.MaxFailures">
            <summary>
            Gets the maximum number of failures allowed in the script before this Virtual User terminates.
            </summary>
            
            <remarks>
            Failures are exceptions - such as communication exceptions - which are caught and produce an error message in the event log.
            They do not cause the Virtual User to exit until the number of failures reaches this value.
            </remarks>
            
            <value>The maximum number of failures allowed in the script before this Virtual User terminates.</value>
            
            <seealso cref="P:Facilita.Fc.Runtime.VirtualUser.NumberOfFailures"/>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Name">
            <summary>
            Gets or sets the name of this dictionary.
            </summary>
            
            <value>The name of the Data Dictionary.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.ReadOnly">
            <summary>
            Gets a value that indicates whether this dictionary is read-only.
            </summary>
            
            <value><b>true</b> if the dictionary is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.Keys">
            <summary>
            Gets an enumerator that can be used to iterate over the keys in this dictionary.
            </summary>
            
            <value>An enumerator that can be used to iterate over the keys in this dictionary.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.GroupSize">
            <summary>
            Gets the number of Virtual Users in the group that this Virtual User belongs to.
            </summary>
            
            <value>The number of Virtual Users in the group that this Virtual User belongs to.</value>
        </member>
        <member name="P:Facilita.Fc.Runtime.VirtualUser.MillisecondsSinceEpoch">
            <summary>
            Get the number of milliseconds since the epoch (1st Jan 1970)
            </summary>
        </member>
        <member name="T:Facilita.Fc.Runtime.VUSnapshot">
            <summary>
            Represents the state of a VU at a point in time
            </summary>
        </member>
        <member name="T:Facilita.Util.ASCIICodes">
            <summary>
            This structure defines strings representing the possible binary values of a byte.
            They are designed to be used when composing strings containing non-printable or binary data. 
            </summary>
        </member>
        <member name="F:Facilita.Util.BitmapFinder.bitmapCache">
            <summary>
            Stores pattern matchers for all of the bitmaps we have encountered so far
            </summary>
        </member>
        <member name="M:Facilita.Util.BitmapFinder.Find(System.Drawing.Bitmap,System.String)">
            <summary>
            Search for a bitmap within a given area
            </summary>
            <param name="searchArea"></param>
            <param name="targetPath"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.BitmapFinder.CreateColumnHashValues(System.Drawing.Bitmap,System.Collections.Generic.IEnumerator{System.Int32}[])">
            <summary>
            Build up the array of column hashes for the next row of the bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="columnHashValueGenerators"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.BitmapFinder.CreateHashGeneratorsForBitmapColumns(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Create an array of generators for computing the rolling hash values for the bitmap columns
            </summary>
            <param name="bitmap"></param>
            <param name="targetHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.BitmapFinder.ColumnHashes(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Generates the column hash values for a bitmap.
            This is a rolling hash function whereby retrieving the next value from the sequence
            is very quick
            </summary>
            <param name="bitmap"></param>
            <param name="x"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.BitmapFinder.GetCachedBitmap(System.String)">
            <summary>
            Attempt to retrieve a bitmap from the cache, adding it if it is not
            already there
            </summary>
            <param name="bitmapPath"></param>
            <returns></returns>
        </member>
        <member name="T:Facilita.Util.PerfmonLog">
            <summary>
            Reads from a Perfmon log file
            </summary>
        </member>
        <member name="M:Facilita.Util.PerfmonLog.ParseCounterName(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Extract series, metric, machine name from a counter path
            </summary>
        </member>
        <member name="M:Facilita.Util.PerfmonLog.ReadCounters(System.DateTime,System.TimeSpan)">
            <summary>
            Read the values of the counters into memory
            </summary>
        </member>
        <member name="M:Facilita.Util.PerfmonLog.GetMultiStringsFromPtr(System.IntPtr,System.Int32)">
            <summary>
            Extract a list of strings from an unmanaged multi-string
            </summary>
            <param name="ptr"></param>
            <param name="listLength"></param>
            <returns></returns>
        </member>
        <member name="T:Facilita.Util.Collections.BlockingQueue">
            <summary>
            Same as Queue except Dequeue function blocks until there is an object to return.
            Note: This class does not need to be synchronized
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.#ctor(System.Collections.ICollection)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="col">The System.Collections.ICollection to copy elements from</param>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.#ctor(System.Int32,System.Single)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
            <param name="growFactor">The factor by which the capacity of the queue is expanded</param>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.#ctor(System.Int32)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.#ctor">
            <summary>
            Create new BlockingQueue.
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Finalize">
            <summary>
            BlockingQueue Destructor (Close queue, resume any waiting thread).
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Clear">
            <summary>
            Remove all objects from the Queue.
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Close">
            <summary>
            Remove all objects from the Queue, resume all dequeue threads.
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Dequeue(System.TimeSpan)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning (in milliseconds)</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the Queue.
            </summary>
            <param name="obj">Object to put in queue</param>
        </member>
        <member name="M:Facilita.Util.Collections.BlockingQueue.Open">
            <summary>
            Open Queue.
            </summary>
        </member>
        <member name="P:Facilita.Util.Collections.BlockingQueue.Closed">
            <summary>
            Gets flag indicating if queue has been closed.
            </summary>
        </member>
        <member name="T:Facilita.Util.Collections.LinkedList">
            <summary>
            Summary description for LinkedList.
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.First">
            <summary>
            Return first object in list
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.Last">
            <summary>
            return last object in list
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.RemoveFirst">
            <summary>
            removes first object in list
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.RemoveLast">
            <summary>
            removes last object in list
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.AddLast(System.Object)">
            <summary>
            adds object to end of list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.AddFirst(System.Object)">
            <summary>
            adds object to begining of list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.Contains(System.Object)">
            <summary>
            identifies if object is contained in list
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.ToNext">
            <summary>
            moves index to the next Node
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.ToPrevious">
            <summary>
            moves index to the previous Node
            </summary>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.GoTo(System.Int32)">
            <summary>
            positions the index  to the index you fill in
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:Facilita.Util.Collections.LinkedList.Clear">
            <summary>
            Clears the contents of the LinkedList
            </summary>
        </member>
        <member name="P:Facilita.Util.Collections.LinkedList.Count">
            <summary>
            Give Back how many nodes there are.
            </summary>
        </member>
        <member name="P:Facilita.Util.Collections.LinkedList.CurrentNode">
            <summary>
            Gives Back the current Node
            </summary>
        </member>
        <member name="P:Facilita.Util.Collections.LinkedList.CurrentNodeIndex">
            <summary>
            Keeps track of the index where you are
            </summary>
        </member>
        <member name="T:Facilita.Util.Data.ICARecordingReader">
            <summary>
            Simple implementation of loading instructions into ArrayList for controlling ICAClient execution.
            </summary>
        </member>
        <member name="T:Facilita.Util.Decode">
            <summary>
            Part of the initial conversion - part of recording process
            </summary>
        </member>
        <member name="T:Facilita.Util.HashSet">
            <summary>
            SupportClass for the HashSet class.
            </summary>
        </member>
        <member name="T:Facilita.Util.HashtableOverwrite">
            <summary>
            Summary description for HashtableOverwrite.
            </summary>
        </member>
        <member name="T:Facilita.Util.HexCodes">
            <summary>
            This structure defines strings representing the possible binary values of a byte.
            They are designed to be used when composing strings containing non-printable or binary data.
            </summary>
        </member>
        <member name="T:Facilita.Util.Lock">
            <summary>Provides a simple programatic method of synchronising code between threads
            </summary>
        </member>
        <member name="T:Facilita.Util.MergeSort`1">
            <summary>
            Provides an implementation of the MergeSort algorithm (see http://en.wikipedia.org/wiki/Merge_sort)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Facilita.Util.ParseCmdLine">
            <summary>
            Derived from Example 3.23, C# Cookbook by Stephen Teilbet &amp; Jay Hilyard. 
            Copyright 2004 O'Reilly &amp; Associates.
            
            Parses command line parameters as per the format of the Visual C# .NET language compiler.
            </summary>
        </member>
        <member name="M:Facilita.Util.ParseCmdLine.ParseSwitch(System.String)">
            <summary>
            Command line parameter has no further arguments e.g. -f
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Facilita.Util.ParseCmdLine.ParseSwitchColonArg(System.String,System.String@,System.String@)">
            <summary>
            Command line parameter a single argument e.g. -file:C:\fred.txt
            </summary>
            <param name="arg"></param>
            <param name="outSwitch"></param>
            <param name="outArgument"></param>
        </member>
        <member name="M:Facilita.Util.ParseCmdLine.ParseSwitchColonArgs(System.String,System.String@,System.String[]@)">
            <summary>
            Command line parameter a single argument e.g. -files:C:\fred.txt;C:\dave.txt
            </summary>
            <param name="arg"></param>
            <param name="outSwitch"></param>
            <param name="outArguments"></param>
        </member>
        <member name="T:Facilita.Util.PatternMatcher`1">
            <summary>
            Provides a method to search for a pattern in a larger list.
            Uses the Knuth-Morris-Pratt algorithm (http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Facilita.Util.PInvoke.MapAccess">
            <summary>
              Specifies access for the mapped file.
              These correspond to the FILE_MAP_XXX
              constants used by MapViewOfFile[Ex]()
            </summary>
        </member>
        <member name="T:Facilita.Util.PInvoke.Mmap">
            <summary>Wrapper class around the Win32 MMF APIs</summary>
            <remarks>
               <list>
                  <item>You can't specify security descriptors</item>
                  <item>You can't build the memory mapped file
                      on top of a System.IO.File already opened</item>
               </list>
            </remarks>
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Create(Facilita.Util.PInvoke.MapProtection,System.Int64,System.String)">
            <summary>
              Create an unnamed map object with no file backing
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Create(Facilita.Util.PInvoke.MapProtection,System.Int64)">
            <summary>
              Create an named map object with no file backing
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Create(System.String,Facilita.Util.PInvoke.MapProtection)">
            <summary>
              Create an unnamed map object with a maximum Size
              equal to that of the file
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Create(System.String,Facilita.Util.PInvoke.MapProtection,System.Int64)">
            <summary>
              Create an unnamed map object 
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Create(System.String,Facilita.Util.PInvoke.MapProtection,System.Int64,System.String)">
             <summary>
               Create a named map object 
             </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Open(Facilita.Util.PInvoke.MapAccess,System.String)">
            <summary>
              Open an existing named File Mapping object
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.Close">
            <summary>
              Close this File Mapping object
              From here on, You can't do anything with it
              but the open views remain valid.
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.MapView(Facilita.Util.PInvoke.MapAccess,System.Int64,System.Int32)">
            <summary>
              Map a view of the file mapping object
              This returns a stream, giving you easy access to the memory,
              as you can use StreamReaders and writes on top of it
            </summary>
            
        </member>
        <member name="M:Facilita.Util.PInvoke.Mmap.MapMeUp(Facilita.Util.PInvoke.MapAccess,System.Int64,System.Int32)">
            <summary>
              Map a view of the file mapping object
              This must be called when not using MapView and streams.
            </summary>
            
        </member>
        <member name="T:Facilita.Util.PInvoke.MmapStream">
            <summary>
              Allows you to read/write from/to
              a view of a memory mapped file.
            </summary>
        </member>
        <member name="T:Facilita.Util.PInvoke.Win32Apis">
            <summary>
            Summary description for Win32Apis.
            </summary>
        </member>
        <member name="T:Facilita.Util.FriendlyNamePropertyDescriptor">
            <summary>
            Class that extends PropertyDescriptor in order to override DisplayName and thus
            return a more suitable name for display in PropertyGrids etc.
            </summary>
        </member>
        <member name="T:Facilita.Util.PropertySettings">
            <summary>
            Base class for all property settings.
            </summary>
        </member>
        <member name="M:Facilita.Util.PropertySettings.SetFriendlyNames">
            <summary>
            Populate friendly name ArrayList with the friendly names of the class's property.
            The friendly name will then be returned as the DisplayName for use in PropertyGrids etc
            </summary>
        </member>
        <member name="T:Facilita.Util.StringUtils">
            <summary>
            Provides simple static methods for string manipulation.
            </summary>
        </member>
        <member name="M:Facilita.Util.StringUtils.SplitString(System.String,System.String)">
            <summary>
            Splits a string based upon any character in the specified <paramref name="token"/>.
            </summary>
            
            <remarks>
            <note type="note">The string is split on any individual character in the <paramref name="token"/> parameter, not the string as a whole.</note>
            </remarks>
            
            <example>
            The following example demonstrates splitting a string on space and 'o' characters. The result is an array which looks like this: <c>["Split", "me", "up!", "W", "rd1", "W", "rd2", "W", "rd3."]</c>.
            <code language="cs">
            string[] tokens = StringUtils.SplitString("Split me up! Word1 Word2 Word3.", " o");
            
            foreach (string token in tokens)
            {
                WriteMessage("Token: " + token);
            }
            </code>
            </example>
            
            <param name="p">The string to split.</param>
            <param name="token">The characters to use as delimiters.</param>
            
            <returns>An array of strings.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.SplitStringExcel(System.String,System.Char)">
            <summary>
            Splits a string using Microsoft Excel-style quoting.
            </summary>
            
            <param name="line">The string to split.</param>
            <param name="delim">The token to use as delimiters.</param>
            
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.ConcatString(System.String[],System.String)">
            <summary>
            Concatenates a string array into a single string, using the <paramref name="token"/> parameter as a separator.
            </summary>
            
            <example>
            The following example demonstrates concatenating the values in the string array into a single string, which looks like this: <c>"item1, item2, item3"</c>.
            <code language="cs">
            string value = StringUtils.ConcatString(new string[] { "item1", "item2", "item3" }, ", ");
            WriteMessage(value);
            </code>
            </example>
            
            <param name="p">The array of strings to concatenate.</param>
            <param name="token">The delimiter to place between the strings.</param>
            
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.ExpandEnvironmentVariables(System.String)">
            <summary>
            Expands any environment variables in the specified text.
            </summary>
            
            <remarks>
            Any environment variables in the form <c>%VARIABLE%</c> will be replaced with the value of the environment variable on the injector machine at runtime.
            </remarks>
            
            <param name="arg">The text to parse.</param>
            
            <returns>The text, with any environment variables expanded.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.FindInbetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Searches for two strings in <paramref name="text"/> and returns the text between them, or an empty string if the patterns could not be matched.
            </summary>
            
            <example>
            The following example demonstrates finding the text in a HTML tag's <c>name</c> attribute, by searching between <c>name="</c> and <c>"&gt;</c>.
            <code language="cs">
            // If the web page contained the string ...name="John Smith">, this call will return
            // the text "John Smith" (excluding the quotes)
            string page = response.Content; // get the contents of the response
            string myValue = StringUtils.FindInbetween(page, "name=\"", "\">", true); // find the text between value=" and ">
            </code>
            </example>
            
            <param name="text">The string to search in.</param>
            <param name="startPattern">A string which occurs immediately before the text to be extracted.</param>
            <param name="endPattern">A string which occurs immediately after the text to be extracted.</param>
            <param name="ignoreCase"><b>true</b> if the search should be case-independent.</param>
            
            <returns>The string found between the start and end patterns, or an empty string if is there is no match.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.SimplifyWhitespace(System.String)">
            <summary>
            Replaces one or more consecutive white space characters by a single space character, and trims white space from each end of a string.
            </summary>
            
            <remarks>
            White space comprises of the characters <c>" \t\n\r"</c> - space, tab, line feed and newline.
            </remarks>
            
            <example>
            The following example demonstrates removing extraneous whitespace from a string.
            <code language="cs">
            string s = "  This is  a\t\rstring\n\nwith white space  ";
            s = StringUtils.SimplifyWhiteSpace(s);
            // s now contains "This is a string with white space"
            </code>
            </example>
            
            <param name="text">The string to be modified.</param>
            
            <returns>The modified string.</returns>
        </member>
        <member name="M:Facilita.Util.StringUtils.HexToBinary(System.String)">
            <summary>
            Returns a byte array containing the values of a sequence of hexadecimal numbers in the <paramref name="hex"/> string parameter.
            </summary>
            
            <remarks>
            This method is used to convert a string containing the hexadecimal representation of a sequence of bytes into a byte array containing the binary values.
            <para>
            The input string must contain pairs of hexadecimal characters; white space or any non hexadecimal character between each pair is ignored.
            </para>
            <para>
            If the second character of an expected pair of hexadecimal characters is not a valid hex character, the conversion is terminated.
            </para>
            <list type="table">
            <listheader><term>Valid input format examples</term></listheader>
            <item><term><c>"8014833031F300AB15974D4252204157"</c></term></item>
            <item><term><c>"80 14 83 f3 31 F3 00 ab 15 97 4d 42 ef 20 41 57"</c></term></item>
            <item><term><c>"x80 x14 xAA x30"</c></term></item>
            <item><term><c>"80 1483xAAx31 \\x33 0080bcef4d4252204157"</c></term></item>
            </list>
            </remarks>
            
            <example>
            The following example demonstrates converting a hex string to a byte array and back again.
            <code language="cs">
            string EBCDIC = "C2C9C8C4F0F1F8F04040F0F240404040404040404040E2D";
            byte[] hex = StringUtils.HexToBinary(EBCDIC);
            WriteMessage(StringUtils.HexToString(hex)); //  display contents
            </code>
            </example>
            
            <param name="hex">The input string, composed of pairs of hexadecimal characters where each pair represents a single byte.</param>
            
            <returns>The binary values of the hexadecimal bytes in the input string.</returns>
            
            <seealso cref="M:Facilita.Util.StringUtils.HexToString(System.Byte[])"/>
        </member>
        <member name="M:Facilita.Util.StringUtils.HexToString(System.Byte[])">
            <summary>
            Returns a hexadecimal string representation of the byte values in the <paramref name="hex"/> parameter.
            </summary>
            
            <remarks>
            The returned string is in the format typically used to display binary data such as in an ethernet trace or the log file output from a TCP Virtual User. 
            <list type="table">
            <listheader><term>Typical output format example</term></listheader>
            <item><term><c>"80 14 83 f3 31 F3 00 ab 15 97 4d 42 ef 20 41 57"</c></term></item>
            </list>
            </remarks>
            
            <param name="hex">The input byte array.</param>
            
            <returns>A hexadecimal string representation of the byte values.</returns>
            
            <seealso cref="M:Facilita.Util.StringUtils.HexToBinary(System.String)"/>
        </member>
        <member name="T:Facilita.Util.SubDirectoriesFilter">
            <summary> 
            NLR for c#.
            </summary>
        </member>
        <member name="M:Facilita.Util.SubDirectoriesFilter.accept(System.IO.FileInfo,System.String)">
            <summary>
            Accept directories only.
            </summary>
        </member>
        <member name="T:Facilita.Util.WaitOnObject">
            <summary>Provides a simple method of waiting for an object to
            return between threads.
            </summary>
        </member>
        <member name="T:Facilita.Util.WorkspaceInfo">
            <summary>
            Summary description for WorkspaceInfo.
            </summary>
        </member>
    </members>
</doc>
